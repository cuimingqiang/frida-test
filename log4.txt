
[JNIEnv] 调用: GetStringUTFChars
  参数: hV�

[JNIEnv] 调用: GetStringUTFChars
  参数: ��Nq���p�-�
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: android.app.servertransaction.TopResumedActivityChangeItem
调用栈:
0xe723de83 libandroid_runtime.so!0x79e83,0x71fcdccb boot-framework.oat!0x199ccb
[JNIEnv] GetStringUTFChars 返回: debug.allocTracker.stackDepth

[JNIEnv] 调用: GetStringUTFChars
  参数: 8�Wqp��8�WqP��TrP�qP��'
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: CompatibilityChangeReporter

[JNIEnv] 调用: GetStringUTFChars
  参数: p��8�WqP��TrP�qP��'
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: Compat change id reported: 171979766; UID 10150; state: DISABLED

[JNIEnv] 调用: GetStringUTFChars
  参数: h�P�
调用栈:
0xe533eb1f libart.so!_ZN3artL31VMRuntime_setProcessPackageNameEP7_JNIEnvP7_jclassP8_jstring+0x16,0x711645e1 boot-core-libart.oat!0xe5e1
[JNIEnv] GetStringUTFChars 返回: com.sytt.tzy

[JNIEnv] 调用: GetStringUTFChars
  参数: �	�P�
调用栈:
0xe533ebc3 libart.so!_ZN3artL33VMRuntime_setProcessDataDirectoryEP7_JNIEnvP7_jclassP8_jstring+0x16,0x711645e1 boot-core-libart.oat!0xe5e1
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy

[JNIEnv] 调用: GetStringUTFChars
  参数: ȸ�rȸ�r�-q���pȸ�rȸ�r] �p<��p82�r
调用栈:
0xdc22f5f7 libicu_jni.so!0x95f7,0xdc23057f libicu_jni.so!0xa57f,0x72677a81 boot-core-icu4j.oat!0x2ea81
[JNIEnv] GetStringUTFChars 返回: zh-CN

[JNIEnv] 调用: GetStringUTFChars
  参数: �pLq��t�+�A��t�+�A����hstr8q9�%#q@��
调用栈:
0xe9764eef libhwui.so!0x2d4eef,0xe976d117 libhwui.so!0x2dd117,0x71fbb60b boot-framework.oat!0x18760b
[JNIEnv] GetStringUTFChars 返回: DEFAULT

[JNIEnv] 调用: GetStringUTFChars
  参数: qLq8��t�+�A��t�+�A��8��hstr8q9�%#q@��
调用栈:
0xe9764eef libhwui.so!0x2d4eef,0xe976d117 libhwui.so!0x2dd117,0x71fbb60b boot-framework.oat!0x18760b
[JNIEnv] GetStringUTFChars 返回: DEFAULT_BOLD

[JNIEnv] 调用: GetStringUTFChars
  参数: ��Lq��t�+�A��t�+�A����hstr8q9�%#q@��
调用栈:
0xe9764eef libhwui.so!0x2d4eef,0xe976d117 libhwui.so!0x2dd117,0x71fbb60b boot-framework.oat!0x18760b
[JNIEnv] GetStringUTFChars 返回: SANS_SERIF

[JNIEnv] 调用: GetStringUTFChars
  参数: ��Lqx��t�+�A��t�+�A��x��hstr8q9�%#q@��
调用栈:
0xe9764eef libhwui.so!0x2d4eef,0xe976d117 libhwui.so!0x2dd117,0x71fbb60b boot-framework.oat!0x18760b
[JNIEnv] GetStringUTFChars 返回: SERIF

[JNIEnv] 调用: GetStringUTFChars
  参数: `�Lqh��t�+�A��t�+�A��h��hstr8q9�%#q@��
调用栈:
0xe9764eef libhwui.so!0x2d4eef,0xe976d117 libhwui.so!0x2dd117,0x71fbb60b boot-framework.oat!0x18760b
[JNIEnv] GetStringUTFChars 返回: MONOSPACE

[JNIEnv] 调用: GetStringUTFChars
  参数: 0.OqPe(�
调用栈:
0xe9764eef libhwui.so!0x2d4eef,0xe976bd75 libhwui.so!0x2dbd75,0x71fc074f boot-framework.oat!0x18c74f
[JNIEnv] GetStringUTFChars 返回: serif

[JNIEnv] 调用: GetStringUTFChars
  参数: p(Oq�e(�
调用栈:
0xe9764eef libhwui.so!0x2d4eef,0xe976bd75 libhwui.so!0x2dbd75,0x71fc074f boot-framework.oat!0x18c74f
[JNIEnv] GetStringUTFChars 返回: sans-serif

[JNIEnv] 调用: GetStringUTFChars
  参数: ЯNq�b(�
调用栈:
0xe9764eef libhwui.so!0x2d4eef,0xe976bd75 libhwui.so!0x2dbd75,0x71fc074f boot-framework.oat!0x18c74f
[JNIEnv] GetStringUTFChars 返回: cursive

[JNIEnv] 调用: GetStringUTFChars
  参数: ��Nq e(�
调用栈:
0xe9764eef libhwui.so!0x2d4eef,0xe976bd75 libhwui.so!0x2dbd75,0x71fc074f boot-framework.oat!0x18c74f
[JNIEnv] GetStringUTFChars 返回: fantasy

[JNIEnv] 调用: GetStringUTFChars
  参数: ��Nq@@��
调用栈:
0xe9764eef libhwui.so!0x2d4eef,0xe976bd75 libhwui.so!0x2dbd75,0x71fc074f boot-framework.oat!0x18c74f
[JNIEnv] GetStringUTFChars 返回: monospace

[JNIEnv] 调用: GetStringUTFChars
  参数: 8	Rq���ph�r���8	Rqh�r_�7r0)�qXe�r
调用栈:
0xe723de83 libandroid_runtime.so!0x79e83,0x71fcdccb boot-framework.oat!0x199ccb
[JNIEnv] GetStringUTFChars 返回: debug.force_rtl

[JNIEnv] 调用: NewStringUTF
  参数: false
调用栈:
0xe723e443 libandroid_runtime.so!0x7a443,0xe633e5b5 libc.so!_ZN16SystemProperties12ReadCallbackEPK9prop_infoPFvPvPKcS5_jES3_+0xa8,0xe723de97 libandroid_runtime.so!0x79e97,0x71fcdccb boot-framework.oat!0x199ccb

[JNIEnv] 调用: GetStringUTFChars
  参数: ��Nq���$r�~q���(�%q���8��p��Nq8�ɸ
调用栈:
0xe723e147 libandroid_runtime.so!0x7a147,0x71fcdc41 boot-framework.oat!0x199c41
[JNIEnv] GetStringUTFChars 返回: cache_key.display_info

[JNIEnv] 调用: GetStringUTFChars
  参数: X�
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: android.view.DisplayAddress$Physical

[JNIEnv] 调用: NewStringUTF
  参数: 内置屏幕
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: GetStringUTFChars
  参数: P�
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: android.view.Display$HdrCapabilities

[JNIEnv] 调用: NewStringUTF
  参数: local:0
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: GetStringUTFChars
  参数: (�
调用栈:
0xe72b4b5b libandroid_runtime.so!0xf0b5b,0x71fbb1bb boot-framework.oat!0x1871bb
[JNIEnv] GetStringUTFChars 返回: zh-CN

[JNIEnv] 调用: GetStringUTFChars
  参数: �
调用栈:
0xe72b4b5b libandroid_runtime.so!0xf0b5b,0x71fbb1bb boot-framework.oat!0x1871bb
[JNIEnv] GetStringUTFChars 返回: zh-CN

[JNIEnv] 调用: GetStringUTFChars
  参数: ���
调用栈:
0xe72ec8eb libandroid_runtime.so!0x1288eb,0x71fba1ab boot-framework.oat!0x1861ab
[JNIEnv] GetStringUTFChars 返回: /data/app/~~hYKtoZqlctb0dKGf8OSOKQ==/com.sytt.tzy-YAzL_LiSSbrdnOTT58XTsA==/base.apk

[JNIEnv] 调用: GetStringUTFChars
  参数: � �
调用栈:
0xe72ec8eb libandroid_runtime.so!0x1288eb,0x71fba1ab boot-framework.oat!0x1861ab
[JNIEnv] GetStringUTFChars 返回: /data/resource-cache/data@resource-cache@com.android.systemui-neutral-Bkw5.frro@idmap

[JNIEnv] 调用: GetStringUTFChars
  参数: �$�
调用栈:
0xe72ec8eb libandroid_runtime.so!0x1288eb,0x71fba1ab boot-framework.oat!0x1861ab
[JNIEnv] GetStringUTFChars 返回: /data/resource-cache/data@resource-cache@com.android.systemui-accent-Mq6z.frro@idmap

[JNIEnv] 调用: GetStringUTFChars
  参数: 8	Rq���ph�rh+�8	Rqh�r_�7r0)�qXe�r
调用栈:
0xe723de83 libandroid_runtime.so!0x79e83,0x71fcdccb boot-framework.oat!0x199ccb
[JNIEnv] GetStringUTFChars 返回: debug.force_rtl

[JNIEnv] 调用: NewStringUTF
  参数: false
调用栈:
0xe723e443 libandroid_runtime.so!0x7a443,0xe633e5b5 libc.so!_ZN16SystemProperties12ReadCallbackEPK9prop_infoPFvPvPKcS5_jES3_+0xa8,0xe723de97 libandroid_runtime.so!0x79e97,0x71fcdccb boot-framework.oat!0x199ccb

[JNIEnv] 调用: GetStringUTFChars
  参数: �,�
调用栈:
0xe72b4b5b libandroid_runtime.so!0xf0b5b,0x71fbb1bb boot-framework.oat!0x1871bb
[JNIEnv] GetStringUTFChars 返回: zh-CN

[JNIEnv] 调用: GetStringUTFChars
  参数: @�Nq
调用栈:
0xe723e147 libandroid_runtime.so!0x7a147,0x71fcdc41 boot-framework.oat!0x199c41
[JNIEnv] GetStringUTFChars 返回: cache_key.package_info

[JNIEnv] 调用: GetStringUTFChars
  参数: ȸ�rȸ�r�-q���pȸ�rȸ�r] �p<��p82�r�i�rHA�p���p�1�r82�r�:�
调用栈:
0xdc22f5f7 libicu_jni.so!0x95f7,0xdc23057f libicu_jni.so!0xa57f,0x72677a81 boot-core-icu4j.oat!0x2ea81
[JNIEnv] GetStringUTFChars 返回: zh-CN

[JNIEnv] 调用: GetStringUTFChars
  参数: X�
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy

[JNIEnv] 调用: GetStringUTFChars
  参数: 0�
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/cache

[JNIEnv] 调用: GetStringUTFChars
  参数: ��
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user_de/0/com.sytt.tzy

[JNIEnv] 调用: GetStringUTFChars
  参数: �6�
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user_de/0/com.sytt.tzy/code_cache

[JNIEnv] 调用: GetStringUTFChars
  参数: �7�@8�2Oq�7��7��Nq@8��6���
调用栈:
0xe978c225 libhwui.so!0x2fc225,0x71fbb60b boot-framework.oat!0x18760b
[JNIEnv] GetStringUTFChars 返回: /data/user_de/0/com.sytt.tzy/code_cache/com.android.opengl.shaders_cache

[JNIEnv] 调用: GetStringUTFChars
  参数: @8�2Oq�7��7��Nq@8��6���
调用栈:
0xe978c247 libhwui.so!0x2fc247,0x71fbb60b boot-framework.oat!0x18760b
[JNIEnv] GetStringUTFChars 返回: /data/user_de/0/com.sytt.tzy/code_cache/com.android.skia.shaders_cache

[JNIEnv] 调用: GetStringUTFChars
  参数: @�Nq
调用栈:
0xe723e147 libandroid_runtime.so!0x7a147,0x71fcdc41 boot-framework.oat!0x199c41
[JNIEnv] GetStringUTFChars 返回: cache_key.package_info

[JNIEnv] 调用: NewStringUTF
  参数: com.sytt.tzy
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: com.sytt.tzy
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: com.sytt.tzy
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /data/app/~~hYKtoZqlctb0dKGf8OSOKQ==/com.sytt.tzy-YAzL_LiSSbrdnOTT58XTsA==
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /data/app/~~hYKtoZqlctb0dKGf8OSOKQ==/com.sytt.tzy-YAzL_LiSSbrdnOTT58XTsA==
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /data/app/~~hYKtoZqlctb0dKGf8OSOKQ==/com.sytt.tzy-YAzL_LiSSbrdnOTT58XTsA==/base.apk
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /data/app/~~hYKtoZqlctb0dKGf8OSOKQ==/com.sytt.tzy-YAzL_LiSSbrdnOTT58XTsA==/base.apk
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /data/app/~~hYKtoZqlctb0dKGf8OSOKQ==/com.sytt.tzy-YAzL_LiSSbrdnOTT58XTsA==/lib/arm
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /data/app/~~hYKtoZqlctb0dKGf8OSOKQ==/com.sytt.tzy-YAzL_LiSSbrdnOTT58XTsA==/lib
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: armeabi-v7a
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /data/resource-cache/com.android.systemui-neutral-Bkw5.frro
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /data/resource-cache/com.android.systemui-accent-Mq6z.frro
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: default:targetSdkVersion=29
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: :complete
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /system/framework/android.test.base.jar
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /system/framework/android.test.base.jar
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: android.test.base
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: android
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /data/user/0/com.sytt.tzy
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /data/user_de/0/com.sytt.tzy
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /data/user/0/com.sytt.tzy
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: 10
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: GetStringUTFChars
  参数: 0I�)_r9�
调用栈:
0xe729e5b7 libandroid_runtime.so!0xda5b7,0x71fbb60b boot-framework.oat!0x18760b
[JNIEnv] GetStringUTFChars 返回: /data/app/~~hYKtoZqlctb0dKGf8OSOKQ==/com.sytt.tzy-YAzL_LiSSbrdnOTT58XTsA==/lib/arm:/data/app/~~hYKtoZqlctb0dKGf8OSOKQ==/com.sytt.tzy-YAzL_LiSSbrdnOTT58XTsA==/base.apk!/lib/armeabi-v7a

[JNIEnv] 调用: GetStringUTFChars
  参数: �Pq(J� �'q ��0*r(C�q�Oq����Oq��Nq���p(J�
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: GraphicsEnvironment

[JNIEnv] 调用: GetStringUTFChars
  参数: (J� �'q ��0*r(C�q�Oq����Oq��Nq���p(J�
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: ANGLE Developer option for 'com.sytt.tzy' set to: 'default'

[JNIEnv] 调用: GetStringUTFChars
  参数: �Pq�K��?���?��`�
��A�q%�I���p�t��?��
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: GraphicsEnvironment

[JNIEnv] 调用: GetStringUTFChars
  参数: �K��?���?��`�
��A�q%�I���p�t��?��
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: ANGLE GameManagerService for com.sytt.tzy: false

[JNIEnv] 调用: GetStringUTFChars
  参数: ��Rq���p��Oq��Nq���p(J�
调用栈:
0xe723de83 libandroid_runtime.so!0x79e83,0x71fcdccb boot-framework.oat!0x199ccb
[JNIEnv] GetStringUTFChars 返回: ro.gfx.driver.0

[JNIEnv] 调用: GetStringUTFChars
  参数: лRq���p��OqлRq���p���p
调用栈:
0xe723de83 libandroid_runtime.so!0x79e83,0x71fcdccb boot-framework.oat!0x199ccb
[JNIEnv] GetStringUTFChars 返回: ro.gfx.driver.1

[JNIEnv] 调用: NewStringUTF
  参数: com.qualcomm.qti.gpudrivers.kona.api30
调用栈:
0xe723e443 libandroid_runtime.so!0x7a443,0xe723de97 libandroid_runtime.so!0x79e97,0x71fcdccb boot-framework.oat!0x199ccb

[JNIEnv] 调用: GetStringUTFChars
  参数: �Pq��Pq��Pq
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: GraphicsEnvironment

[JNIEnv] 调用: GetStringUTFChars
  参数: ��Pq��Pq
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: Updatable production driver is not supported on the device.

[JNIEnv] 调用: GetStringUTFChars
  参数: ��Rq
调用栈:
0xe723dff3 libandroid_runtime.so!0x79ff3,0x71fcdd57 boot-framework.oat!0x199d57
[JNIEnv] GetStringUTFChars 返回: ro.gfx.driver_build_time

[JNIEnv] 调用: GetStringUTFChars
  参数: ؗNq8q9��#���PqH@��
调用栈:
0xe723e147 libandroid_runtime.so!0x7a147,0x71fcdc41 boot-framework.oat!0x199c41
[JNIEnv] GetStringUTFChars 返回: cache_key.has_system_feature

[JNIEnv] 调用: GetStringUTFChars
  参数: ���p���p
调用栈:
0xe729dcff libandroid_runtime.so!0xd9cff,0x71fcd07f boot-framework.oat!0x19907f
[JNIEnv] GetStringUTFChars 返回: system

[JNIEnv] 调用: GetStringUTFChars
  参数: ���p
调用栈:
0xe729dd57 libandroid_runtime.so!0xd9d57,0x71fcd07f boot-framework.oat!0x19907f
[JNIEnv] GetStringUTFChars 返回: 

[JNIEnv] 调用: GetStringUTFChars
  参数: ��
调用栈:
0xe729ddad libandroid_runtime.so!0xd9dad,0x71fcd07f boot-framework.oat!0x19907f
[JNIEnv] GetStringUTFChars 返回: com.sytt.tzy

[JNIEnv] 调用: GetStringUTFChars
  参数: @�Nq
调用栈:
0xe723e147 libandroid_runtime.so!0x7a147,0x71fcdc41 boot-framework.oat!0x199c41
[JNIEnv] GetStringUTFChars 返回: cache_key.package_info

[JNIEnv] 调用: NewStringUTF
  参数: com.sytt.tzy
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: 1.0.0
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: com.sytt.tzy
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: com.sytt.tzy
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: com.sytt.tzy
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /data/app/~~hYKtoZqlctb0dKGf8OSOKQ==/com.sytt.tzy-YAzL_LiSSbrdnOTT58XTsA==
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /data/app/~~hYKtoZqlctb0dKGf8OSOKQ==/com.sytt.tzy-YAzL_LiSSbrdnOTT58XTsA==
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /data/app/~~hYKtoZqlctb0dKGf8OSOKQ==/com.sytt.tzy-YAzL_LiSSbrdnOTT58XTsA==/base.apk
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /data/app/~~hYKtoZqlctb0dKGf8OSOKQ==/com.sytt.tzy-YAzL_LiSSbrdnOTT58XTsA==/base.apk
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /data/app/~~hYKtoZqlctb0dKGf8OSOKQ==/com.sytt.tzy-YAzL_LiSSbrdnOTT58XTsA==/lib/arm
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /data/app/~~hYKtoZqlctb0dKGf8OSOKQ==/com.sytt.tzy-YAzL_LiSSbrdnOTT58XTsA==/lib
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: armeabi-v7a
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /data/resource-cache/com.android.systemui-neutral-Bkw5.frro
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /data/resource-cache/com.android.systemui-accent-Mq6z.frro
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: default:targetSdkVersion=29
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: :complete
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /system/framework/android.test.base.jar
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /system/framework/android.test.base.jar
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: android.test.base
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: android
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /data/user/0/com.sytt.tzy
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /data/user_de/0/com.sytt.tzy
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /data/user/0/com.sytt.tzy
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: 10
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: 10
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: android
调用栈:
0xe72b8eef libandroid_runtime.so!0xf4eef,0xe72b4ccd libandroid_runtime.so!0xf0ccd,0x71fba7e1 boot-framework.oat!0x1867e1

[JNIEnv] 调用: NewStringUTF
  参数: lineageos.platform
调用栈:
0xe72b8eef libandroid_runtime.so!0xf4eef,0xe72b4ccd libandroid_runtime.so!0xf0ccd,0x71fba7e1 boot-framework.oat!0x1867e1

[JNIEnv] 调用: NewStringUTF
  参数: com.sytt.tzy
调用栈:
0xe72b8eef libandroid_runtime.so!0xf4eef,0xe72b4ccd libandroid_runtime.so!0xf0ccd,0x71fba7e1 boot-framework.oat!0x1867e1

[JNIEnv] 调用: GetStringUTFChars
  参数: �cPq(ePq�Q��R��M1rl�q(��p�	���"q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: NetworkSecurityConfig

[JNIEnv] 调用: GetStringUTFChars
  参数: (ePq�Q��R��M1rl�q(��p�	���"q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: No Network Security Config specified, using platform default

[JNIEnv] 调用: GetStringUTFChars
  参数: ШOq
调用栈:
0xda7e0719 libjavacore.so!0x19719,0x7116694f boot-core-libart.oat!0x1094f
[JNIEnv] GetStringUTFChars 返回: ANDROID_ROOT

[JNIEnv] 调用: NewStringUTF
  参数: /system
调用栈:
0xda7e072d libjavacore.so!0x1972d,0x7116694f boot-core-libart.oat!0x1094f

[JNIEnv] 调用: GetStringUTFChars
  参数: �cPq(ePqp
��
��M1rl�q(��p�	���"qȘ'q@�h��Q���
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: NetworkSecurityConfig

[JNIEnv] 调用: GetStringUTFChars
  参数: (ePqp
��
��M1rl�q(��p�	���"qȘ'q@�h��Q���
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: No Network Security Config specified, using platform default

[JNIEnv] 调用: GetStringUTFChars
  参数: �MMq�br��qP
��� ��MMq�MMqPj%q��pP��p ��MMq���q�tqPj%q ����q�[tq��"qh.�qx��x�� ��MMq;��qH�tq
调用栈:
0xe534c0fd libart.so!_ZN3artL29VMClassLoader_findLoadedClassEP7_JNIEnvP7_jclassP8_jobjectP8_jstring+0x40,0x711656bb boot-core-libart.oat!0xf6bb
[JNIEnv] GetStringUTFChars 返回: android.app.Application

[JNIEnv] 调用: NewStringUTF
  参数: com.sytt.tzy
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: com.sytt.tzy
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: com.sytt.tzy
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /data/app/~~hYKtoZqlctb0dKGf8OSOKQ==/com.sytt.tzy-YAzL_LiSSbrdnOTT58XTsA==
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /data/app/~~hYKtoZqlctb0dKGf8OSOKQ==/com.sytt.tzy-YAzL_LiSSbrdnOTT58XTsA==
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /data/app/~~hYKtoZqlctb0dKGf8OSOKQ==/com.sytt.tzy-YAzL_LiSSbrdnOTT58XTsA==/base.apk
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /data/app/~~hYKtoZqlctb0dKGf8OSOKQ==/com.sytt.tzy-YAzL_LiSSbrdnOTT58XTsA==/base.apk
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /data/app/~~hYKtoZqlctb0dKGf8OSOKQ==/com.sytt.tzy-YAzL_LiSSbrdnOTT58XTsA==/lib/arm
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /data/app/~~hYKtoZqlctb0dKGf8OSOKQ==/com.sytt.tzy-YAzL_LiSSbrdnOTT58XTsA==/lib
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: armeabi-v7a
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /data/resource-cache/com.android.systemui-neutral-Bkw5.frro
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /data/resource-cache/com.android.systemui-accent-Mq6z.frro
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: default:targetSdkVersion=29
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: :complete
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /system/framework/android.test.base.jar
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /system/framework/android.test.base.jar
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: android.test.base
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: android
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /data/user/0/com.sytt.tzy
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /data/user_de/0/com.sytt.tzy
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /data/user/0/com.sytt.tzy
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: 10
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: GetStringUTFChars
  参数: ȸ�rȸ�r�-q���pȸ�rȸ�r] �p<��p82�r�i�rHA�p���p�1�r82�r`>�
调用栈:
0xdc22f5f7 libicu_jni.so!0x95f7,0xdc23057f libicu_jni.so!0xa57f,0x72677a81 boot-core-icu4j.oat!0x2ea81
[JNIEnv] GetStringUTFChars 返回: zh-CN

[JNIEnv] 调用: GetStringUTFChars
  参数: 8	Rq���ph�r1�8	Rqh�r_�7r0)�qXe�r
调用栈:
0xe723de83 libandroid_runtime.so!0x79e83,0x71fcdccb boot-framework.oat!0x199ccb
[JNIEnv] GetStringUTFChars 返回: debug.force_rtl

[JNIEnv] 调用: NewStringUTF
  参数: false
调用栈:
0xe723e443 libandroid_runtime.so!0x7a443,0xe633e5b5 libc.so!_ZN16SystemProperties12ReadCallbackEPK9prop_infoPFvPvPKcS5_jES3_+0xa8,0xe723de97 libandroid_runtime.so!0x79e97,0x71fcdccb boot-framework.oat!0x199ccb

[JNIEnv] 调用: GetStringUTFChars
  参数: h2�
调用栈:
0xe72b4b5b libandroid_runtime.so!0xf0b5b,0x71fbb1bb boot-framework.oat!0x1871bb
[JNIEnv] GetStringUTFChars 返回: zh-CN

[JNIEnv] 调用: GetStringUTFChars
  参数: h�Nq���p	�P��H=�P����r���q	��������
调用栈:
0xe723de83 libandroid_runtime.so!0x79e83,0x71fcdccb boot-framework.oat!0x199ccb
[JNIEnv] GetStringUTFChars 返回: debug.second-display.pkg

[JNIEnv] 调用: GetStringUTFChars
  参数: ����br��qH=�P�� �������X����pP��p �������q�tqPj%q �w��q�[tq
调用栈:
0xe534c0fd libart.so!_ZN3artL29VMClassLoader_findLoadedClassEP7_JNIEnvP7_jclassP8_jobjectP8_jstring+0x40,0x711656bb boot-core-libart.oat!0xf6bb
[JNIEnv] GetStringUTFChars 返回: com.sytt.tzy.UnityPlayerActivity

[JNIEnv] 调用: NewStringUTF
  参数: 神域天堂
调用栈:
0xe7241659 libandroid_runtime.so!0x7d659,0x71fba861 boot-framework.oat!0x186861

[JNIEnv] 调用: GetStringUTFChars
  参数: 8U�r
调用栈:
0xdc22e867 libicu_jni.so!0x8867,0x72677869 boot-core-icu4j.oat!0x2e869
[JNIEnv] GetStringUTFChars 返回: UTF-8

[JNIEnv] 调用: NewStringUTF
  参数: com.android.providers.settings.SettingsProvider
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: com.android.providers.settings
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: com.android.providers.settings
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: com.android.providers.settings
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: system
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /system/priv-app/SettingsProvider
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /system/priv-app/SettingsProvider
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /system/priv-app/SettingsProvider/SettingsProvider.apk
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /system/priv-app/SettingsProvider/SettingsProvider.apk
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /system/priv-app/SettingsProvider/lib/arm64
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /system/priv-app/SettingsProvider/lib
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: arm64-v8a
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /system/product/overlay/SettingsProvider__auto_generated_rro_product.apk
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /data/resource-cache/com.android.systemui-neutral-rxNo.frro
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /data/resource-cache/com.android.systemui-accent-fC1b.frro
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /system/product/overlay/SettingsProvider__auto_generated_rro_product.apk
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: platform:privapp:targetSdkVersion=24
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: :complete
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /data/user_de/0/com.android.providers.settings
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /data/user_de/0/com.android.providers.settings
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /data/user/0/com.android.providers.settings
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: com.android.providers.settings.SettingsBackupAgent
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: 12
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: system
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: settings
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: GetStringUTFChars
  参数: w�
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: android.util.MemoryIntArray

[JNIEnv] 调用: GetStringUTFChars
  参数: �w�
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: android.os.ParcelFileDescriptor

[JNIEnv] 调用: GetStringUTFChars
  参数: �L�p
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: android.os.ParcelFileDescriptor

[JNIEnv] 调用: GetStringUTFChars
  参数: 8��
调用栈:
0xda7e2b8f libjavacore.so!0x1bb8f,0x71166d05 boot-core-libart.oat!0x10d05
[JNIEnv] GetStringUTFChars 返回: /data/app/~~hYKtoZqlctb0dKGf8OSOKQ==/com.sytt.tzy-YAzL_LiSSbrdnOTT58XTsA==/lib/arm/libmain.so

[JNIEnv] 调用: GetStringUTFChars
  参数: 8�� �
调用栈:
0xda745fcd libopenjdkjvm.so!JVM_NativeLoad+0x2c,0x70e65741 boot.oat!0xa7741
[JNIEnv] GetStringUTFChars 返回: /data/app/~~hYKtoZqlctb0dKGf8OSOKQ==/com.sytt.tzy-YAzL_LiSSbrdnOTT58XTsA==/lib/arm/libmain.so

[JNIEnv] 调用: GetStringUTFChars
  参数: ���
调用栈:
0xe975388b libhwui.so!0x2c388b,0x71fb97d9 boot-framework.oat!0x1857d9
[JNIEnv] GetStringUTFChars 返回: com.unity3d.player.UnityPlayer

[JNIEnv] 调用: GetStringUTFChars
  参数: ��
调用栈:
0xe975388b libhwui.so!0x2c388b,0x71fb97d9 boot-framework.oat!0x1857d9
[JNIEnv] GetStringUTFChars 返回: com.unity3d.player.l

[JNIEnv] 调用: GetStringUTFChars
  参数: p��Nqh��.��+�p��Nq*�ɽ�9r\͙q�+�p���Nqh�
调用栈:
0xe72b6cfd libandroid_runtime.so!0xf2cfd,0x71fbaac7 boot-framework.oat!0x186ac7
[JNIEnv] GetStringUTFChars 返回: unity_static_splash

[JNIEnv] 调用: GetStringUTFChars
  参数: �Nqh��.��+�p��Nq*�ɽ�9r\͙q�+�p���Nqh�
调用栈:
0xe72b6d1f libandroid_runtime.so!0xf2d1f,0x71fbaac7 boot-framework.oat!0x186ac7
[JNIEnv] GetStringUTFChars 返回: drawable

[JNIEnv] 调用: GetStringUTFChars
  参数: h��.��+�p��Nq*�ɽ�9r\͙q�+�p���Nqh�
调用栈:
0xe72b6d59 libandroid_runtime.so!0xf2d59,0x71fbaac7 boot-framework.oat!0x186ac7
[JNIEnv] GetStringUTFChars 返回: com.sytt.tzy

[JNIEnv] 调用: GetStringUTFChars
  参数: ���
调用栈:
0xb76fb193 libmain.so!0x1193,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50ac560 libart.so!nterp_helper+0xb0,0xe50ac560 libart.so!nterp_helper+0xb0,0xe50acfa4 libart.so!nterp_helper+0xaf4,0x7224b36f boot-framework.oat!0x41736f
[JNIEnv] GetStringUTFChars 返回: /data/app/~~hYKtoZqlctb0dKGf8OSOKQ==/com.sytt.tzy-YAzL_LiSSbrdnOTT58XTsA==/lib/arm

[JNIEnv] 调用: NewStringUTF
  参数: unity
调用栈:
0xb72d04f3 libunity.so!0xcbf4f3

[JNIEnv] 调用: NewStringUTF
  参数:  
调用栈:
0xb72d04f3 libunity.so!0xcbf4f3

[JNIEnv] 调用: NewStringUTF
  参数: unity
调用栈:
0xb72d04f3 libunity.so!0xcbf4f3

[JNIEnv] 调用: NewStringUTF
  参数: 
调用栈:
0xb72d04f3 libunity.so!0xcbf4f3

[JNIEnv] 调用: NewStringUTF
  参数: android.intent.extra.VR_LAUNCH
调用栈:
0xb72d04f3 libunity.so!0xcbf4f3

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x184a
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回:  

[JNIEnv] 调用: NewStringUTF
  参数: bin/Data/boot.config
调用栈:
0xb72d04f3 libunity.so!0xcbf4f3

[JNIEnv] 调用: GetStringUTFChars
  参数: @�
调用栈:
0xe72b4f7d libandroid_runtime.so!0xf0f7d,0x71fbac03 boot-framework.oat!0x186c03
[JNIEnv] GetStringUTFChars 返回: bin/Data/boot.config

[JNIEnv] 调用: NewStringUTF
  参数: UTF-8
调用栈:
0xb72d04f3 libunity.so!0xcbf4f3

[JNIEnv] 调用: GetStringUTFChars
  参数: 8U�r
调用栈:
0xdc22e867 libicu_jni.so!0x8867,0x72677869 boot-core-icu4j.oat!0x2e869
[JNIEnv] GetStringUTFChars 返回: UTF-8

[JNIEnv] 调用: NewStringUTF
  参数: \z
调用栈:
0xb72d04f3 libunity.so!0xcbf4f3

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x18e6
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: gfx-disable-mt-rendering=1
wait-for-native-debugger=0
vr-enabled=0
hdr-display-enabled=0
android-force-sdcard-permission=1
androidStartInFullscreen=1
androidRenderOutsideSafeArea=1
buildDate=638852347424642162


[JNIEnv] 调用: GetStringUTFChars
  参数: ���
调用栈:
0xe975388b libhwui.so!0x2c388b,0x71fb97d9 boot-framework.oat!0x1857d9
[JNIEnv] GetStringUTFChars 返回: android.view.SurfaceView

[JNIEnv] 调用: GetStringUTFChars
  参数: 
调用栈:
0xe72b6cfd libandroid_runtime.so!0xf2cfd,0x71fbaac7 boot-framework.oat!0x186ac7
[JNIEnv] GetStringUTFChars 返回: unitySurfaceView

[JNIEnv] 调用: GetStringUTFChars
  参数: �s�ph��.��+�
调用栈:
0xe72b6d1f libandroid_runtime.so!0xf2d1f,0x71fbaac7 boot-framework.oat!0x186ac7
[JNIEnv] GetStringUTFChars 返回: id

[JNIEnv] 调用: GetStringUTFChars
  参数: h��.��+�
调用栈:
0xe72b6d59 libandroid_runtime.so!0xf2d59,0x71fbaac7 boot-framework.oat!0x186ac7
[JNIEnv] GetStringUTFChars 返回: com.sytt.tzy

[JNIEnv] 调用: GetStringUTFChars
  参数: ���X?Oqh��.��+����X?Oq�ɽ�9r\͙q�+�p��X?Oqh��}��C0�	7
��.��2����m�r0�uq�.����X?Oqh�^���]��^���]��
调用栈:
0xe72b6cfd libandroid_runtime.so!0xf2cfd,0x71fbaac7 boot-framework.oat!0x186ac7
[JNIEnv] GetStringUTFChars 返回: game_view_content_description

[JNIEnv] 调用: GetStringUTFChars
  参数: X?Oqh��.��+����X?Oq�ɽ�9r\͙q�+�p��X?Oqh��}��C0�	7
��.��2����m�r0�uq�.����X?Oqh�^���]��^���]��
调用栈:
0xe72b6d1f libandroid_runtime.so!0xf2d1f,0x71fbaac7 boot-framework.oat!0x186ac7
[JNIEnv] GetStringUTFChars 返回: string

[JNIEnv] 调用: GetStringUTFChars
  参数: h��.��+����X?Oq�ɽ�9r\͙q�+�p��X?Oqh��}��C0�	7
��.��2����m�r0�uq�.����X?Oqh�^���]��^���]��
调用栈:
0xe72b6d59 libandroid_runtime.so!0xf2d59,0x71fbaac7 boot-framework.oat!0x186ac7
[JNIEnv] GetStringUTFChars 返回: com.sytt.tzy

[JNIEnv] 调用: NewStringUTF
  参数: Game view
调用栈:
0xe7241659 libandroid_runtime.so!0x7d659,0x71fba861 boot-framework.oat!0x186861

[JNIEnv] 调用: GetStringUTFChars
  参数: 

[JNIEnv] 调用: GetStringUTFChars
  参数: ���
调用栈:
0xe534a987 libart.so!_ZN3artL20Thread_setNativeNameEP7_JNIEnvP8_jobjectP8_jstring+0x2a,0x70e65c97 boot.oat!0xa7c97
[JNIEnv] GetStringUTFChars 返回: UnityMain

[JNIEnv] 调用: GetStringUTFChars
  参数: ��
调用栈:
0xe975388b libhwui.so!0x2c388b,0x71fb97d9 boot-framework.oat!0x1857d9
[JNIEnv] GetStringUTFChars 返回: com.android.internal.policy.DecorView

[JNIEnv] 调用: NewStringUTF
  参数: res/interpolator/linear_out_slow_in.xml
调用栈:
0xe723df49 libandroid_runtime.so!0x79f49,0x71fc0ddd boot-framework.oat!0x18cddd
[JNIEnv] GetStringUTFChars 返回: log.looper.10150.UnityMain.slow
调用栈:
0xe7241659 libandroid_runtime.so!0x7d659,0x71fba861 boot-framework.oat!0x186861

[JNIEnv] 调用: GetStringUTFChars
  参数: h��`r�r�
调用栈:
0xe72b58fd libandroid_runtime.so!0xf18fd,0x71fbae73 boot-framework.oat!0x186e73
[JNIEnv] GetStringUTFChars 返回: res/interpolator/linear_out_slow_in.xml

[JNIEnv] 调用: NewStringUTF
  参数: pathInterpolator
调用栈:
0xe7241659 libandroid_runtime.so!0x7d659,0x71fba861 boot-framework.oat!0x186861

[JNIEnv] 调用: NewStringUTF
  参数: res/interpolator/fast_out_linear_in.xml
调用栈:
0xe7241659 libandroid_runtime.so!0x7d659,0x71fba861 boot-framework.oat!0x186861

[JNIEnv] 调用: GetStringUTFChars
  参数: `��`r�rs
调用栈:
0xe72b58fd libandroid_runtime.so!0xf18fd,0x71fbae73 boot-framework.oat!0x186e73
[JNIEnv] GetStringUTFChars 返回: res/interpolator/fast_out_linear_in.xml

[JNIEnv] 调用: NewStringUTF
  参数: pathInterpolator
调用栈:
0xe7241659 libandroid_runtime.so!0x7d659,0x71fba861 boot-framework.oat!0x186861

[JNIEnv] 调用: GetStringUTFChars
  参数: �ZWq
调用栈:
0xe723e09f libandroid_runtime.so!0x7a09f,0x71fc0ddd boot-framework.oat!0x18cddd
[JNIEnv] GetStringUTFChars 返回: ro.surface_flinger.supports_background_blur

[JNIEnv] 调用: NewStringUTF
  参数: res/layout/screen_simple.xml
调用栈:
0xe7241659 libandroid_runtime.so!0x7d659,0x71fba861 boot-framework.oat!0x186861

[JNIEnv] 调用: GetStringUTFChars
  参数: ���`r�r�
调用栈:
0xe72b58fd libandroid_runtime.so!0xf18fd,0x71fbae73 boot-framework.oat!0x186e73
[JNIEnv] GetStringUTFChars 返回: res/layout/screen_simple.xml

[JNIEnv] 调用: NewStringUTF
  参数: LinearLayout
调用栈:
0xe7241659 libandroid_runtime.so!0x7d659,0x71fba861 boot-framework.oat!0x186861

[JNIEnv] 调用: GetStringUTFChars
  参数: p��
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: android.widget.LinearLayout

[JNIEnv] 调用: GetStringUTFChars
  参数: (��
调用栈:
0xe975388b libhwui.so!0x2c388b,0x71fb97d9 boot-framework.oat!0x1857d9
[JNIEnv] GetStringUTFChars 返回: android.widget.LinearLayout

[JNIEnv] 调用: NewStringUTF
  参数: ViewStub
调用栈:
0xe7241659 libandroid_runtime.so!0x7d659,0x71fba861 boot-framework.oat!0x186861

[JNIEnv] 调用: GetStringUTFChars
  参数: ���
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: android.widget.ViewStub

[JNIEnv] 调用: GetStringUTFChars
  参数: ���
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: android.webkit.ViewStub

[JNIEnv] 调用: GetStringUTFChars
  参数: ���
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: android.app.ViewStub

[JNIEnv] 调用: GetStringUTFChars
  参数: ���
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: android.view.ViewStub

[JNIEnv] 调用: GetStringUTFChars
  参数: ��
调用栈:
0xe975388b libhwui.so!0x2c388b,0x71fb97d9 boot-framework.oat!0x1857d9
[JNIEnv] GetStringUTFChars 返回: android.view.ViewStub

[JNIEnv] 调用: NewStringUTF
  参数: FrameLayout
调用栈:
0xe7241659 libandroid_runtime.so!0x7d659,0x71fba861 boot-framework.oat!0x186861

[JNIEnv] 调用: GetStringUTFChars
  参数: ��
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: android.widget.FrameLayout

[JNIEnv] 调用: GetStringUTFChars
  参数: H�
调用栈:
0xe975388b libhwui.so!0x2c388b,0x71fb97d9 boot-framework.oat!0x1857d9
[JNIEnv] GetStringUTFChars 返回: android.widget.FrameLayout

[JNIEnv] 调用: NewStringUTF
  参数: res/transition/fade.xml
调用栈:
0xe7241659 libandroid_runtime.so!0x7d659,0x71fba861 boot-framework.oat!0x186861

[JNIEnv] 调用: GetStringUTFChars
  参数: ��`r�r(
调用栈:
0xe72b58fd libandroid_runtime.so!0xf18fd,0x71fbae73 boot-framework.oat!0x186e73
[JNIEnv] GetStringUTFChars 返回: res/transition/fade.xml

[JNIEnv] 调用: NewStringUTF
  参数: fade
调用栈:
0xe7241659 libandroid_runtime.so!0x7d659,0x71fba861 boot-framework.oat!0x186861

[JNIEnv] 调用: NewStringUTF
  参数: res/transition/move.xml
调用栈:
0xe7241659 libandroid_runtime.so!0x7d659,0x71fba861 boot-framework.oat!0x186861

[JNIEnv] 调用: GetStringUTFChars
  参数: P	�`r�r)
调用栈:
0xe72b58fd libandroid_runtime.so!0xf18fd,0x71fbae73 boot-framework.oat!0x186e73
[JNIEnv] GetStringUTFChars 返回: res/transition/move.xml

[JNIEnv] 调用: NewStringUTF
  参数: transitionSet
调用栈:
0xe7241659 libandroid_runtime.so!0x7d659,0x71fba861 boot-framework.oat!0x186861

[JNIEnv] 调用: NewStringUTF
  参数: changeBounds
调用栈:
0xe7241659 libandroid_runtime.so!0x7d659,0x71fba861 boot-framework.oat!0x186861

[JNIEnv] 调用: NewStringUTF
  参数: changeTransform
调用栈:
0xe7241659 libandroid_runtime.so!0x7d659,0x71fba861 boot-framework.oat!0x186861

[JNIEnv] 调用: NewStringUTF
  参数: changeClipBounds
调用栈:
0xe7241659 libandroid_runtime.so!0x7d659,0x71fba861 boot-framework.oat!0x186861

[JNIEnv] 调用: NewStringUTF
  参数: changeImageTransform
调用栈:
0xe7241659 libandroid_runtime.so!0x7d659,0x71fba861 boot-framework.oat!0x186861

[JNIEnv] 调用: GetStringUTFChars
  参数: ;�(;�p_��\_��`�
�$��
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: json

[JNIEnv] 调用: GetStringUTFChars
  参数: (;�p_��\_��`�
�$��
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回:  = 获取oaid

[JNIEnv] 调用: GetStringUTFChars
  参数: �>�
调用栈:
0xda7e2b8f libjavacore.so!0x1bb8f,0x71166d05 boot-core-libart.oat!0x10d05
[JNIEnv] GetStringUTFChars 返回: /data/app/~~hYKtoZqlctb0dKGf8OSOKQ==/com.sytt.tzy-YAzL_LiSSbrdnOTT58XTsA==/lib/arm/libsecsdk.so

[JNIEnv] 调用: GetStringUTFChars
  参数: �>� �
调用栈:
0xda745fcd libopenjdkjvm.so!JVM_NativeLoad+0x2c,0x70e65741 boot.oat!0xa7741
[JNIEnv] GetStringUTFChars 返回: /data/app/~~hYKtoZqlctb0dKGf8OSOKQ==/com.sytt.tzy-YAzL_LiSSbrdnOTT58XTsA==/lib/arm/libsecsdk.so

[JNIEnv] 调用: NewStringUTF
  参数: GB2312
调用栈:
0xb535604c libsecsdk.so!0x1304c,0xb53584e8 libsecsdk.so!0x154e8,0xb535003c libsecsdk.so!0xd03c,0xb534dab4 libsecsdk.so!0xaab4,0xb534db78 libsecsdk.so!0xab78,0xb534fb10 libsecsdk.so!0xcb10,0xb5355178 libsecsdk.so!0x12178,0xb534cc34 libsecsdk.so!0x9c34,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50b13d7 libart.so!art_quick_invoke_stub_internal+0x46,0xe54c48a9 libart.so!art_quick_invoke_static_stub+0x120,0xe51065b7 libart.so!_ZN3art9ArtMethod6InvokeEPNS_6ThreadEPjjPNS_6JValueEPKc+0x9e,0xe520ce2f libart.so!_ZN3art11interpreter34ArtInterpreterToCompiledCodeBridgeEPNS_6ThreadEPNS_9ArtMethodEPNS_11ShadowFrameEtPNS_6JValueE+0x116,0xe520837d libart.so!_ZN3art11interpreter6DoCallILb0ELb0EEEbPNS_9ArtMethodEPNS_6ThreadERNS_11ShadowFrameEPKNS_11InstructionEtPNS_6JValueE+0x29c,0xe54b1f25 libart.so!MterpInvokeStatic+0x3bc,0xe509eb98 libart.so!mterp_op_invoke_static+0x18

[JNIEnv] 调用: GetStringUTFChars
  参数: G�G����pq�pXP��hQ��hQ����r
调用栈:
0xdc22dcd7 libicu_jni.so!0x7cd7,0x72677401 boot-core-icu4j.oat!0x2e401
[JNIEnv] GetStringUTFChars 返回: GB2312

[JNIEnv] 调用: NewStringUTF
  参数: GBK
调用栈:
0xdc22ec53 libicu_jni.so!0x8c53,0xdc22dd29 libicu_jni.so!0x7d29,0x72677401 boot-core-icu4j.oat!0x2e401

[JNIEnv] 调用: NewStringUTF
  参数: GBK
调用栈:
0xdc22de65 libicu_jni.so!0x7e65,0x72677401 boot-core-icu4j.oat!0x2e401

[JNIEnv] 调用: NewStringUTF
  参数: CP936
调用栈:
0xdc22de65 libicu_jni.so!0x7e65,0x72677401 boot-core-icu4j.oat!0x2e401

[JNIEnv] 调用: NewStringUTF
  参数: MS936
调用栈:
0xdc22de65 libicu_jni.so!0x7e65,0x72677401 boot-core-icu4j.oat!0x2e401

[JNIEnv] 调用: NewStringUTF
  参数: windows-936
调用栈:
0xdc22de65 libicu_jni.so!0x7e65,0x72677401 boot-core-icu4j.oat!0x2e401

[JNIEnv] 调用: NewStringUTF
  参数: chinese
调用栈:
0xdc22de65 libicu_jni.so!0x7e65,0x72677401 boot-core-icu4j.oat!0x2e401

[JNIEnv] 调用: NewStringUTF
  参数: iso-ir-58
调用栈:
0xdc22de65 libicu_jni.so!0x7e65,0x72677401 boot-core-icu4j.oat!0x2e401

[JNIEnv] 调用: NewStringUTF
  参数: GB2312
调用栈:
0xdc22de65 libicu_jni.so!0x7e65,0x72677401 boot-core-icu4j.oat!0x2e401

[JNIEnv] 调用: NewStringUTF
  参数: csGB2312
调用栈:
0xdc22de65 libicu_jni.so!0x7e65,0x72677401 boot-core-icu4j.oat!0x2e401

[JNIEnv] 调用: NewStringUTF
  参数: GB_2312-80
调用栈:
0xdc22de65 libicu_jni.so!0x7e65,0x72677401 boot-core-icu4j.oat!0x2e401

[JNIEnv] 调用: NewStringUTF
  参数: csISO58GB231280
调用栈:
0xdc22de65 libicu_jni.so!0x7e65,0x72677401 boot-core-icu4j.oat!0x2e401

[JNIEnv] 调用: NewStringUTF
  参数: GBK
调用栈:
0xdc22de65 libicu_jni.so!0x7e65,0x72677401 boot-core-icu4j.oat!0x2e401

[JNIEnv] 调用: NewStringUTF
  参数: CP936
调用栈:
0xdc22de65 libicu_jni.so!0x7e65,0x72677401 boot-core-icu4j.oat!0x2e401

[JNIEnv] 调用: NewStringUTF
  参数: windows-936
调用栈:
0xdc22de65 libicu_jni.so!0x7e65,0x72677401 boot-core-icu4j.oat!0x2e401

[JNIEnv] 调用: NewStringUTF
  参数: windows-936
调用栈:
0xdc22de65 libicu_jni.so!0x7e65,0x72677401 boot-core-icu4j.oat!0x2e401

[JNIEnv] 调用: NewStringUTF
  参数: GBK
调用栈:
0xdc22de65 libicu_jni.so!0x7e65,0x72677401 boot-core-icu4j.oat!0x2e401

[JNIEnv] 调用: NewStringUTF
  参数: windows-936-2000
调用栈:
0xdc22df09 libicu_jni.so!0x7f09,0x72677401 boot-core-icu4j.oat!0x2e401

[JNIEnv] 调用: GetStringUTFChars
  参数: (I�
调用栈:
0xdc22e867 libicu_jni.so!0x8867,0x72677869 boot-core-icu4j.oat!0x2e869
[JNIEnv] GetStringUTFChars 返回: windows-936-2000

[JNIEnv] 调用: NewStringUTF
  参数: UTF-8
调用栈:
0xb53a7a14 libsecsdk.so!0x64a14,0xb53a82b0 libsecsdk.so!0x652b0,0xb53aa204 libsecsdk.so!0x67204,0xb5397a84 libsecsdk.so!0x54a84,0xb53553d8 libsecsdk.so!0x123d8,0xb534cc34 libsecsdk.so!0x9c34,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50b13d7 libart.so!art_quick_invoke_stub_internal+0x46,0xe54c48a9 libart.so!art_quick_invoke_static_stub+0x120,0xe51065b7 libart.so!_ZN3art9ArtMethod6InvokeEPNS_6ThreadEPjjPNS_6JValueEPKc+0x9e,0xe520ce2f libart.so!_ZN3art11interpreter34ArtInterpreterToCompiledCodeBridgeEPNS_6ThreadEPNS_9ArtMethodEPNS_11ShadowFrameEtPNS_6JValueE+0x116,0xe520837d libart.so!_ZN3art11interpreter6DoCallILb0ELb0EEEbPNS_9ArtMethodEPNS_6ThreadERNS_11ShadowFrameEPKNS_11InstructionEtPNS_6JValueE+0x29c,0xe54b1f25 libart.so!MterpInvokeStatic+0x3bc,0xe509eb98 libart.so!mterp_op_invoke_static+0x18,0xe5201e05 libart.so!_ZN3art11interpreterL7ExecuteEPNS_6ThreadERKNS_20CodeItemDataAccessorERNS_11ShadowFrameENS_6JValueEbb+0xc8,0xe5207aa9 libart.so!_ZN3art11interpreter30EnterInterpreterFromEntryPointEPNS_6ThreadERKNS_20CodeItemDataAccessorEPNS_11ShadowFrameE+0x8c

[JNIEnv] 调用: NewStringUTF
  参数: UTF-8
调用栈:
0xb53a7a14 libsecsdk.so!0x64a14,0xb53a82d0 libsecsdk.so!0x652d0,0xb53aa204 libsecsdk.so!0x67204,0xb5397a84 libsecsdk.so!0x54a84,0xb53553d8 libsecsdk.so!0x123d8,0xb534cc34 libsecsdk.so!0x9c34,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50b13d7 libart.so!art_quick_invoke_stub_internal+0x46,0xe54c48a9 libart.so!art_quick_invoke_static_stub+0x120,0xe51065b7 libart.so!_ZN3art9ArtMethod6InvokeEPNS_6ThreadEPjjPNS_6JValueEPKc+0x9e,0xe520ce2f libart.so!_ZN3art11interpreter34ArtInterpreterToCompiledCodeBridgeEPNS_6ThreadEPNS_9ArtMethodEPNS_11ShadowFrameEtPNS_6JValueE+0x116,0xe520837d libart.so!_ZN3art11interpreter6DoCallILb0ELb0EEEbPNS_9ArtMethodEPNS_6ThreadERNS_11ShadowFrameEPKNS_11InstructionEtPNS_6JValueE+0x29c,0xe54b1f25 libart.so!MterpInvokeStatic+0x3bc,0xe509eb98 libart.so!mterp_op_invoke_static+0x18,0xe5201e05 libart.so!_ZN3art11interpreterL7ExecuteEPNS_6ThreadERKNS_20CodeItemDataAccessorERNS_11ShadowFrameENS_6JValueEbb+0xc8,0xe5207aa9 libart.so!_ZN3art11interpreter30EnterInterpreterFromEntryPointEPNS_6ThreadERKNS_20CodeItemDataAccessorEPNS_11ShadowFrameE+0x8c

[JNIEnv] 调用: NewStringUTF
  参数: UTF-8
调用栈:
0xb53a7bd4 libsecsdk.so!0x64bd4,0xb53a830c libsecsdk.so!0x6530c,0xb53aa204 libsecsdk.so!0x67204,0xb5397a84 libsecsdk.so!0x54a84,0xb53553d8 libsecsdk.so!0x123d8,0xb534cc34 libsecsdk.so!0x9c34,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50b13d7 libart.so!art_quick_invoke_stub_internal+0x46,0xe54c48a9 libart.so!art_quick_invoke_static_stub+0x120,0xe51065b7 libart.so!_ZN3art9ArtMethod6InvokeEPNS_6ThreadEPjjPNS_6JValueEPKc+0x9e,0xe520ce2f libart.so!_ZN3art11interpreter34ArtInterpreterToCompiledCodeBridgeEPNS_6ThreadEPNS_9ArtMethodEPNS_11ShadowFrameEtPNS_6JValueE+0x116,0xe520837d libart.so!_ZN3art11interpreter6DoCallILb0ELb0EEEbPNS_9ArtMethodEPNS_6ThreadERNS_11ShadowFrameEPKNS_11InstructionEtPNS_6JValueE+0x29c,0xe54b1f25 libart.so!MterpInvokeStatic+0x3bc,0xe509eb98 libart.so!mterp_op_invoke_static+0x18,0xe5201e05 libart.so!_ZN3art11interpreterL7ExecuteEPNS_6ThreadERKNS_20CodeItemDataAccessorERNS_11ShadowFrameENS_6JValueEbb+0xc8,0xe5207aa9 libart.so!_ZN3art11interpreter30EnterInterpreterFromEntryPointEPNS_6ThreadERKNS_20CodeItemDataAccessorEPNS_11ShadowFrameE+0x8c

[JNIEnv] 调用: NewStringUTF
  参数: OnInit
调用栈:
0xb539c8dc libsecsdk.so!0x598dc,0xb53553d8 libsecsdk.so!0x123d8,0xb534cc34 libsecsdk.so!0x9c34,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50b13d7 libart.so!art_quick_invoke_stub_internal+0x46,0xe54c48a9 libart.so!art_quick_invoke_static_stub+0x120,0xe51065b7 libart.so!_ZN3art9ArtMethod6InvokeEPNS_6ThreadEPjjPNS_6JValueEPKc+0x9e,0xe520ce2f libart.so!_ZN3art11interpreter34ArtInterpreterToCompiledCodeBridgeEPNS_6ThreadEPNS_9ArtMethodEPNS_11ShadowFrameEtPNS_6JValueE+0x116,0xe520837d libart.so!_ZN3art11interpreter6DoCallILb0ELb0EEEbPNS_9ArtMethodEPNS_6ThreadERNS_11ShadowFrameEPKNS_11InstructionEtPNS_6JValueE+0x29c,0xe54b1f25 libart.so!MterpInvokeStatic+0x3bc,0xe509eb98 libart.so!mterp_op_invoke_static+0x18,0xe5201e05 libart.so!_ZN3art11interpreterL7ExecuteEPNS_6ThreadERKNS_20CodeItemDataAccessorERNS_11ShadowFrameENS_6JValueEbb+0xc8,0xe5207aa9 libart.so!_ZN3art11interpreter30EnterInterpreterFromEntryPointEPNS_6ThreadERKNS_20CodeItemDataAccessorEPNS_11ShadowFrameE+0x8c,0xe5499c25 libart.so!artQuickToInterpreterBridge+0x2a4,0xe50b5f25 libart.so!art_quick_to_interpreter_bridge+0x24,0xe50ac560 libart.so!nterp_helper+0xb0

[JNIEnv] 调用: NewStringUTF
  参数: com.bun.miitmdid.core.MainMdidSdk
调用栈:
0xb539c8dc libsecsdk.so!0x598dc,0xb53553d8 libsecsdk.so!0x123d8,0xb534cc34 libsecsdk.so!0x9c34,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50b13d7 libart.so!art_quick_invoke_stub_internal+0x46,0xe54c48a9 libart.so!art_quick_invoke_static_stub+0x120,0xe51065b7 libart.so!_ZN3art9ArtMethod6InvokeEPNS_6ThreadEPjjPNS_6JValueEPKc+0x9e,0xe520ce2f libart.so!_ZN3art11interpreter34ArtInterpreterToCompiledCodeBridgeEPNS_6ThreadEPNS_9ArtMethodEPNS_11ShadowFrameEtPNS_6JValueE+0x116,0xe520837d libart.so!_ZN3art11interpreter6DoCallILb0ELb0EEEbPNS_9ArtMethodEPNS_6ThreadERNS_11ShadowFrameEPKNS_11InstructionEtPNS_6JValueE+0x29c,0xe54b1f25 libart.so!MterpInvokeStatic+0x3bc,0xe509eb98 libart.so!mterp_op_invoke_static+0x18,0xe5201e05 libart.so!_ZN3art11interpreterL7ExecuteEPNS_6ThreadERKNS_20CodeItemDataAccessorERNS_11ShadowFrameENS_6JValueEbb+0xc8,0xe5207aa9 libart.so!_ZN3art11interpreter30EnterInterpreterFromEntryPointEPNS_6ThreadERKNS_20CodeItemDataAccessorEPNS_11ShadowFrameE+0x8c,0xe5499c25 libart.so!artQuickToInterpreterBridge+0x2a4,0xe50b5f25 libart.so!art_quick_to_interpreter_bridge+0x24,0xe50ac560 libart.so!nterp_helper+0xb0

[JNIEnv] 调用: GetStringUTFChars
  参数: xV�
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.bun.miitmdid.core.MainMdidSdk

[JNIEnv] 调用: NewStringUTF
  参数: UTF-8
调用栈:
0xb53a7a14 libsecsdk.so!0x64a14,0xb53a82b0 libsecsdk.so!0x652b0,0xb53aa204 libsecsdk.so!0x67204,0xb539c834 libsecsdk.so!0x59834,0xb53553d8 libsecsdk.so!0x123d8,0xb534cc34 libsecsdk.so!0x9c34,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50b13d7 libart.so!art_quick_invoke_stub_internal+0x46,0xe54c48a9 libart.so!art_quick_invoke_static_stub+0x120,0xe51065b7 libart.so!_ZN3art9ArtMethod6InvokeEPNS_6ThreadEPjjPNS_6JValueEPKc+0x9e,0xe520ce2f libart.so!_ZN3art11interpreter34ArtInterpreterToCompiledCodeBridgeEPNS_6ThreadEPNS_9ArtMethodEPNS_11ShadowFrameEtPNS_6JValueE+0x116,0xe520837d libart.so!_ZN3art11interpreter6DoCallILb0ELb0EEEbPNS_9ArtMethodEPNS_6ThreadERNS_11ShadowFrameEPKNS_11InstructionEtPNS_6JValueE+0x29c,0xe54b1f25 libart.so!MterpInvokeStatic+0x3bc,0xe509eb98 libart.so!mterp_op_invoke_static+0x18,0xe5201e05 libart.so!_ZN3art11interpreterL7ExecuteEPNS_6ThreadERKNS_20CodeItemDataAccessorERNS_11ShadowFrameENS_6JValueEbb+0xc8,0xe5207aa9 libart.so!_ZN3art11interpreter30EnterInterpreterFromEntryPointEPNS_6ThreadERKNS_20CodeItemDataAccessorEPNS_11ShadowFrameE+0x8c

[JNIEnv] 调用: NewStringUTF
  参数: UTF-8
调用栈:
0xb53a7a14 libsecsdk.so!0x64a14,0xb53a82d0 libsecsdk.so!0x652d0,0xb53aa204 libsecsdk.so!0x67204,0xb539c834 libsecsdk.so!0x59834,0xb53553d8 libsecsdk.so!0x123d8,0xb534cc34 libsecsdk.so!0x9c34,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50b13d7 libart.so!art_quick_invoke_stub_internal+0x46,0xe54c48a9 libart.so!art_quick_invoke_static_stub+0x120,0xe51065b7 libart.so!_ZN3art9ArtMethod6InvokeEPNS_6ThreadEPjjPNS_6JValueEPKc+0x9e,0xe520ce2f libart.so!_ZN3art11interpreter34ArtInterpreterToCompiledCodeBridgeEPNS_6ThreadEPNS_9ArtMethodEPNS_11ShadowFrameEtPNS_6JValueE+0x116,0xe520837d libart.so!_ZN3art11interpreter6DoCallILb0ELb0EEEbPNS_9ArtMethodEPNS_6ThreadERNS_11ShadowFrameEPKNS_11InstructionEtPNS_6JValueE+0x29c,0xe54b1f25 libart.so!MterpInvokeStatic+0x3bc,0xe509eb98 libart.so!mterp_op_invoke_static+0x18,0xe5201e05 libart.so!_ZN3art11interpreterL7ExecuteEPNS_6ThreadERKNS_20CodeItemDataAccessorERNS_11ShadowFrameENS_6JValueEbb+0xc8,0xe5207aa9 libart.so!_ZN3art11interpreter30EnterInterpreterFromEntryPointEPNS_6ThreadERKNS_20CodeItemDataAccessorEPNS_11ShadowFrameE+0x8c

[JNIEnv] 调用: NewStringUTF
  参数: UTF-8
调用栈:
0xb53a7bd4 libsecsdk.so!0x64bd4,0xb53a830c libsecsdk.so!0x6530c,0xb53aa204 libsecsdk.so!0x67204,0xb539c834 libsecsdk.so!0x59834,0xb53553d8 libsecsdk.so!0x123d8,0xb534cc34 libsecsdk.so!0x9c34,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50b13d7 libart.so!art_quick_invoke_stub_internal+0x46,0xe54c48a9 libart.so!art_quick_invoke_static_stub+0x120,0xe51065b7 libart.so!_ZN3art9ArtMethod6InvokeEPNS_6ThreadEPjjPNS_6JValueEPKc+0x9e,0xe520ce2f libart.so!_ZN3art11interpreter34ArtInterpreterToCompiledCodeBridgeEPNS_6ThreadEPNS_9ArtMethodEPNS_11ShadowFrameEtPNS_6JValueE+0x116,0xe520837d libart.so!_ZN3art11interpreter6DoCallILb0ELb0EEEbPNS_9ArtMethodEPNS_6ThreadERNS_11ShadowFrameEPKNS_11InstructionEtPNS_6JValueE+0x29c,0xe54b1f25 libart.so!MterpInvokeStatic+0x3bc,0xe509eb98 libart.so!mterp_op_invoke_static+0x18,0xe5201e05 libart.so!_ZN3art11interpreterL7ExecuteEPNS_6ThreadERKNS_20CodeItemDataAccessorERNS_11ShadowFrameENS_6JValueEbb+0xc8,0xe5207aa9 libart.so!_ZN3art11interpreter30EnterInterpreterFromEntryPointEPNS_6ThreadERKNS_20CodeItemDataAccessorEPNS_11ShadowFrameE+0x8c

[JNIEnv] 调用: NewStringUTF
  参数: UTF-8
调用栈:
0xb53a7a14 libsecsdk.so!0x64a14,0xb53a82b0 libsecsdk.so!0x652b0,0xb53ac13c libsecsdk.so!0x6913c,0xb5398034 libsecsdk.so!0x55034,0xb53553d8 libsecsdk.so!0x123d8,0xb534cc34 libsecsdk.so!0x9c34,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50ac560 libart.so!nterp_helper+0xb0,0xe50b13d7 libart.so!art_quick_invoke_stub_internal+0x46,0xe54c48a9 libart.so!art_quick_invoke_static_stub+0x120,0xe51065b7 libart.so!_ZN3art9ArtMethod6InvokeEPNS_6ThreadEPjjPNS_6JValueEPKc+0x9e,0xe53c315f libart.so!_ZN3art17InvokeWithJValuesIPNS_9ArtMethodEEENS_6JValueERKNS_33ScopedObjectAccessAlreadyRunnableEP8_jobjectT_PK6jvalue+0x162,0xe53c3333 libart.so!_ZN3art17InvokeWithJValuesIP10_jmethodIDEENS_6JValueERKNS_33ScopedObjectAccessAlreadyRunnableEP8_jobjectT_PK6jvalue+0x2e,0xe529844d libart.so!_ZN3art3JNIILb0EE21CallStaticVoidMethodAEP7_JNIEnvP7_jclassP10_jmethodIDPK6jvalue+0x1cc,0xb53b0dc0 libsecsdk.so!0x6ddc0,0xb539cd94 libsecsdk.so!0x59d94

[JNIEnv] 调用: NewStringUTF
  参数: UTF-8
调用栈:
0xb53a7a14 libsecsdk.so!0x64a14,0xb53a82d0 libsecsdk.so!0x652d0,0xb53ac13c libsecsdk.so!0x6913c,0xb5398034 libsecsdk.so!0x55034,0xb53553d8 libsecsdk.so!0x123d8,0xb534cc34 libsecsdk.so!0x9c34,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50ac560 libart.so!nterp_helper+0xb0,0xe50b13d7 libart.so!art_quick_invoke_stub_internal+0x46,0xe54c48a9 libart.so!art_quick_invoke_static_stub+0x120,0xe51065b7 libart.so!_ZN3art9ArtMethod6InvokeEPNS_6ThreadEPjjPNS_6JValueEPKc+0x9e,0xe53c315f libart.so!_ZN3art17InvokeWithJValuesIPNS_9ArtMethodEEENS_6JValueERKNS_33ScopedObjectAccessAlreadyRunnableEP8_jobjectT_PK6jvalue+0x162,0xe53c3333 libart.so!_ZN3art17InvokeWithJValuesIP10_jmethodIDEENS_6JValueERKNS_33ScopedObjectAccessAlreadyRunnableEP8_jobjectT_PK6jvalue+0x2e,0xe529844d libart.so!_ZN3art3JNIILb0EE21CallStaticVoidMethodAEP7_JNIEnvP7_jclassP10_jmethodIDPK6jvalue+0x1cc,0xb53b0dc0 libsecsdk.so!0x6ddc0,0xb539cd94 libsecsdk.so!0x59d94

[JNIEnv] 调用: NewStringUTF
  参数: UTF-8
调用栈:
0xb53a7bd4 libsecsdk.so!0x64bd4,0xb53a830c libsecsdk.so!0x6530c,0xb53ac13c libsecsdk.so!0x6913c,0xb5398034 libsecsdk.so!0x55034,0xb53553d8 libsecsdk.so!0x123d8,0xb534cc34 libsecsdk.so!0x9c34,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50ac560 libart.so!nterp_helper+0xb0,0xe50b13d7 libart.so!art_quick_invoke_stub_internal+0x46,0xe54c48a9 libart.so!art_quick_invoke_static_stub+0x120,0xe51065b7 libart.so!_ZN3art9ArtMethod6InvokeEPNS_6ThreadEPjjPNS_6JValueEPKc+0x9e,0xe53c315f libart.so!_ZN3art17InvokeWithJValuesIPNS_9ArtMethodEEENS_6JValueERKNS_33ScopedObjectAccessAlreadyRunnableEP8_jobjectT_PK6jvalue+0x162,0xe53c3333 libart.so!_ZN3art17InvokeWithJValuesIP10_jmethodIDEENS_6JValueERKNS_33ScopedObjectAccessAlreadyRunnableEP8_jobjectT_PK6jvalue+0x2e,0xe529844d libart.so!_ZN3art3JNIILb0EE21CallStaticVoidMethodAEP7_JNIEnvP7_jclassP10_jmethodIDPK6jvalue+0x1cc,0xb53b0dc0 libsecsdk.so!0x6ddc0,0xb539cd94 libsecsdk.so!0x59d94

[JNIEnv] 调用: NewStringUTF
  参数: UTF-8
调用栈:
0xb53a7a14 libsecsdk.so!0x64a14,0xb53a82b0 libsecsdk.so!0x652b0,0xb53aa204 libsecsdk.so!0x67204,0xb539c834 libsecsdk.so!0x59834,0xb53553d8 libsecsdk.so!0x123d8,0xb534cc34 libsecsdk.so!0x9c34,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50ac560 libart.so!nterp_helper+0xb0,0xe50b13d7 libart.so!art_quick_invoke_stub_internal+0x46,0xe54c476f libart.so!art_quick_invoke_stub+0x11e,0xe51065a5 libart.so!_ZN3art9ArtMethod6InvokeEPNS_6ThreadEPjjPNS_6JValueEPKc+0x8c,0xe53c17bd libart.so!_ZN3art12InvokeMethodILNS_11PointerSizeE4EEEP8_jobjectRKNS_33ScopedObjectAccessAlreadyRunnableES3_S3_S3_j+0x358,0xe53562c3 libart.so!_ZN3artL13Method_invokeEP7_JNIEnvP8_jobjectS3_P13_jobjectArray+0x22,0x70e69249 boot.oat!0xab249

[JNIEnv] 调用: NewStringUTF
  参数: UTF-8
调用栈:
0xb53a7a14 libsecsdk.so!0x64a14,0xb53a82d0 libsecsdk.so!0x652d0,0xb53aa204 libsecsdk.so!0x67204,0xb539c834 libsecsdk.so!0x59834,0xb53553d8 libsecsdk.so!0x123d8,0xb534cc34 libsecsdk.so!0x9c34,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50ac560 libart.so!nterp_helper+0xb0,0xe50b13d7 libart.so!art_quick_invoke_stub_internal+0x46,0xe54c476f libart.so!art_quick_invoke_stub+0x11e,0xe51065a5 libart.so!_ZN3art9ArtMethod6InvokeEPNS_6ThreadEPjjPNS_6JValueEPKc+0x8c,0xe53c17bd libart.so!_ZN3art12InvokeMethodILNS_11PointerSizeE4EEEP8_jobjectRKNS_33ScopedObjectAccessAlreadyRunnableES3_S3_S3_j+0x358,0xe53562c3 libart.so!_ZN3artL13Method_invokeEP7_JNIEnvP8_jobjectS3_P13_jobjectArray+0x22,0x70e69249 boot.oat!0xab249

[JNIEnv] 调用: NewStringUTF
  参数: UTF-8
调用栈:
0xb53a7bd4 libsecsdk.so!0x64bd4,0xb53a830c libsecsdk.so!0x6530c,0xb53aa204 libsecsdk.so!0x67204,0xb539c834 libsecsdk.so!0x59834,0xb53553d8 libsecsdk.so!0x123d8,0xb534cc34 libsecsdk.so!0x9c34,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50ac560 libart.so!nterp_helper+0xb0,0xe50b13d7 libart.so!art_quick_invoke_stub_internal+0x46,0xe54c476f libart.so!art_quick_invoke_stub+0x11e,0xe51065a5 libart.so!_ZN3art9ArtMethod6InvokeEPNS_6ThreadEPjjPNS_6JValueEPKc+0x8c,0xe53c17bd libart.so!_ZN3art12InvokeMethodILNS_11PointerSizeE4EEEP8_jobjectRKNS_33ScopedObjectAccessAlreadyRunnableES3_S3_S3_j+0x358,0xe53562c3 libart.so!_ZN3artL13Method_invokeEP7_JNIEnvP8_jobjectS3_P13_jobjectArray+0x22,0x70e69249 boot.oat!0xab249

[JNIEnv] 调用: NewStringUTF
  参数: UTF-8
调用栈:
0xb53a7a14 libsecsdk.so!0x64a14,0xb53a82b0 libsecsdk.so!0x652b0,0xb53aa204 libsecsdk.so!0x67204,0xb539c834 libsecsdk.so!0x59834,0xb53553d8 libsecsdk.so!0x123d8,0xb534cc34 libsecsdk.so!0x9c34,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50ac560 libart.so!nterp_helper+0xb0,0xe50b13d7 libart.so!art_quick_invoke_stub_internal+0x46,0xe54c476f libart.so!art_quick_invoke_stub+0x11e,0xe51065a5 libart.so!_ZN3art9ArtMethod6InvokeEPNS_6ThreadEPjjPNS_6JValueEPKc+0x8c,0xe53c17bd libart.so!_ZN3art12InvokeMethodILNS_11PointerSizeE4EEEP8_jobjectRKNS_33ScopedObjectAccessAlreadyRunnableES3_S3_S3_j+0x358,0xe53562c3 libart.so!_ZN3artL13Method_invokeEP7_JNIEnvP8_jobjectS3_P13_jobjectArray+0x22,0x70e69249 boot.oat!0xab249

[JNIEnv] 调用: NewStringUTF
  参数: UTF-8
调用栈:
0xb53a7a14 libsecsdk.so!0x64a14,0xb53a82d0 libsecsdk.so!0x652d0,0xb53aa204 libsecsdk.so!0x67204,0xb539c834 libsecsdk.so!0x59834,0xb53553d8 libsecsdk.so!0x123d8,0xb534cc34 libsecsdk.so!0x9c34,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50ac560 libart.so!nterp_helper+0xb0,0xe50b13d7 libart.so!art_quick_invoke_stub_internal+0x46,0xe54c476f libart.so!art_quick_invoke_stub+0x11e,0xe51065a5 libart.so!_ZN3art9ArtMethod6InvokeEPNS_6ThreadEPjjPNS_6JValueEPKc+0x8c,0xe53c17bd libart.so!_ZN3art12InvokeMethodILNS_11PointerSizeE4EEEP8_jobjectRKNS_33ScopedObjectAccessAlreadyRunnableES3_S3_S3_j+0x358,0xe53562c3 libart.so!_ZN3artL13Method_invokeEP7_JNIEnvP8_jobjectS3_P13_jobjectArray+0x22,0x70e69249 boot.oat!0xab249

[JNIEnv] 调用: NewStringUTF
  参数: UTF-8
调用栈:
0xb53a7bd4 libsecsdk.so!0x64bd4,0xb53a830c libsecsdk.so!0x6530c,0xb53aa204 libsecsdk.so!0x67204,0xb539c834 libsecsdk.so!0x59834,0xb53553d8 libsecsdk.so!0x123d8,0xb534cc34 libsecsdk.so!0x9c34,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50ac560 libart.so!nterp_helper+0xb0,0xe50b13d7 libart.so!art_quick_invoke_stub_internal+0x46,0xe54c476f libart.so!art_quick_invoke_stub+0x11e,0xe51065a5 libart.so!_ZN3art9ArtMethod6InvokeEPNS_6ThreadEPjjPNS_6JValueEPKc+0x8c,0xe53c17bd libart.so!_ZN3art12InvokeMethodILNS_11PointerSizeE4EEEP8_jobjectRKNS_33ScopedObjectAccessAlreadyRunnableES3_S3_S3_j+0x358,0xe53562c3 libart.so!_ZN3artL13Method_invokeEP7_JNIEnvP8_jobjectS3_P13_jobjectArray+0x22,0x70e69249 boot.oat!0xab249

[JNIEnv] 调用: NewStringUTF
  参数:  MANUFACTURER：---->
调用栈:
0xb539c8dc libsecsdk.so!0x598dc,0xb53553d8 libsecsdk.so!0x123d8,0xb534cc34 libsecsdk.so!0x9c34,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50ac560 libart.so!nterp_helper+0xb0,0xe50b13d7 libart.so!art_quick_invoke_stub_internal+0x46,0xe54c476f libart.so!art_quick_invoke_stub+0x11e,0xe51065a5 libart.so!_ZN3art9ArtMethod6InvokeEPNS_6ThreadEPjjPNS_6JValueEPKc+0x8c,0xe53c17bd libart.so!_ZN3art12InvokeMethodILNS_11PointerSizeE4EEEP8_jobjectRKNS_33ScopedObjectAccessAlreadyRunnableES3_S3_S3_j+0x358,0xe53562c3 libart.so!_ZN3artL13Method_invokeEP7_JNIEnvP8_jobjectS3_P13_jobjectArray+0x22,0x70e69249 boot.oat!0xab249

[JNIEnv] 调用: NewStringUTF
  参数:  PRODUCT：---->
调用栈:
0xb539c8dc libsecsdk.so!0x598dc,0xb53553d8 libsecsdk.so!0x123d8,0xb534cc34 libsecsdk.so!0x9c34,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50ac560 libart.so!nterp_helper+0xb0,0xe50b13d7 libart.so!art_quick_invoke_stub_internal+0x46,0xe54c476f libart.so!art_quick_invoke_stub+0x11e,0xe51065a5 libart.so!_ZN3art9ArtMethod6InvokeEPNS_6ThreadEPjjPNS_6JValueEPKc+0x8c,0xe53c17bd libart.so!_ZN3art12InvokeMethodILNS_11PointerSizeE4EEEP8_jobjectRKNS_33ScopedObjectAccessAlreadyRunnableES3_S3_S3_j+0x358,0xe53562c3 libart.so!_ZN3artL13Method_invokeEP7_JNIEnvP8_jobjectS3_P13_jobjectArray+0x22,0x70e69249 boot.oat!0xab249

[JNIEnv] 调用: NewStringUTF
  参数: UTF-8
调用栈:
0xb53a7a14 libsecsdk.so!0x64a14,0xb53a82b0 libsecsdk.so!0x652b0,0xb53aa204 libsecsdk.so!0x67204,0xb539c834 libsecsdk.so!0x59834,0xb53553d8 libsecsdk.so!0x123d8,0xb534cc34 libsecsdk.so!0x9c34,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50ac560 libart.so!nterp_helper+0xb0,0xe50b13d7 libart.so!art_quick_invoke_stub_internal+0x46,0xe54c476f libart.so!art_quick_invoke_stub+0x11e,0xe51065a5 libart.so!_ZN3art9ArtMethod6InvokeEPNS_6ThreadEPjjPNS_6JValueEPKc+0x8c,0xe53c17bd libart.so!_ZN3art12InvokeMethodILNS_11PointerSizeE4EEEP8_jobjectRKNS_33ScopedObjectAccessAlreadyRunnableES3_S3_S3_j+0x358,0xe53562c3 libart.so!_ZN3artL13Method_invokeEP7_JNIEnvP8_jobjectS3_P13_jobjectArray+0x22,0x70e69249 boot.oat!0xab249

[JNIEnv] 调用: NewStringUTF
  参数: UTF-8
调用栈:
0xb53a7a14 libsecsdk.so!0x64a14,0xb53a82d0 libsecsdk.so!0x652d0,0xb53aa204 libsecsdk.so!0x67204,0xb539c834 libsecsdk.so!0x59834,0xb53553d8 libsecsdk.so!0x123d8,0xb534cc34 libsecsdk.so!0x9c34,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50ac560 libart.so!nterp_helper+0xb0,0xe50b13d7 libart.so!art_quick_invoke_stub_internal+0x46,0xe54c476f libart.so!art_quick_invoke_stub+0x11e,0xe51065a5 libart.so!_ZN3art9ArtMethod6InvokeEPNS_6ThreadEPjjPNS_6JValueEPKc+0x8c,0xe53c17bd libart.so!_ZN3art12InvokeMethodILNS_11PointerSizeE4EEEP8_jobjectRKNS_33ScopedObjectAccessAlreadyRunnableES3_S3_S3_j+0x358,0xe53562c3 libart.so!_ZN3artL13Method_invokeEP7_JNIEnvP8_jobjectS3_P13_jobjectArray+0x22,0x70e69249 boot.oat!0xab249

[JNIEnv] 调用: NewStringUTF
  参数: UTF-8
调用栈:
0xb53a7bd4 libsecsdk.so!0x64bd4,0xb53a830c libsecsdk.so!0x6530c,0xb53aa204 libsecsdk.so!0x67204,0xb539c834 libsecsdk.so!0x59834,0xb53553d8 libsecsdk.so!0x123d8,0xb534cc34 libsecsdk.so!0x9c34,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50ac560 libart.so!nterp_helper+0xb0,0xe50b13d7 libart.so!art_quick_invoke_stub_internal+0x46,0xe54c476f libart.so!art_quick_invoke_stub+0x11e,0xe51065a5 libart.so!_ZN3art9ArtMethod6InvokeEPNS_6ThreadEPjjPNS_6JValueEPKc+0x8c,0xe53c17bd libart.so!_ZN3art12InvokeMethodILNS_11PointerSizeE4EEEP8_jobjectRKNS_33ScopedObjectAccessAlreadyRunnableES3_S3_S3_j+0x358,0xe53562c3 libart.so!_ZN3artL13Method_invokeEP7_JNIEnvP8_jobjectS3_P13_jobjectArray+0x22,0x70e69249 boot.oat!0xab249

[JNIEnv] 调用: NewStringUTF
  参数: supplierconfig.json
调用栈:
0xb539c8dc libsecsdk.so!0x598dc,0xb53553d8 libsecsdk.so!0x123d8,0xb534cc34 libsecsdk.so!0x9c34,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50ac560 libart.so!nterp_helper+0xb0,0xe50b13d7 libart.so!art_quick_invoke_stub_internal+0x46,0xe54c48a9 libart.so!art_quick_invoke_static_stub+0x120,0xe51065b7 libart.so!_ZN3art9ArtMethod6InvokeEPNS_6ThreadEPjjPNS_6JValueEPKc+0x9e,0xe53c315f libart.so!_ZN3art17InvokeWithJValuesIPNS_9ArtMethodEEENS_6JValueERKNS_33ScopedObjectAccessAlreadyRunnableEP8_jobjectT_PK6jvalue+0x162,0xe53c3333 libart.so!_ZN3art17InvokeWithJValuesIP10_jmethodIDEENS_6JValueERKNS_33ScopedObjectAccessAlreadyRunnableEP8_jobjectT_PK6jvalue+0x2e,0xe528f487 libart.so!_ZN3art3JNIILb0EE23CallStaticObjectMethodAEP7_JNIEnvP7_jclassP10_jmethodIDPK6jvalue+0x1d2,0xb53b0d54 libsecsdk.so!0x6dd54,0xb539cd94 libsecsdk.so!0x59d94,0xb53553d8 libsecsdk.so!0x123d8,0xb534cc34 libsecsdk.so!0x9c34,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e

[JNIEnv] 调用: GetStringUTFChars
  参数: `��
调用栈:
0xe72b4f7d libandroid_runtime.so!0xf0f7d,0x71fbac03 boot-framework.oat!0x186c03
[JNIEnv] GetStringUTFChars 返回: supplierconfig.json

[JNIEnv] 调用: NewStringUTF
  参数: java.lang.Object
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: ���
调用栈:
0xe534c0fd libart.so!_ZN3artL29VMClassLoader_findLoadedClassEP7_JNIEnvP7_jclassP8_jobjectP8_jstring+0x40,0x711656bb boot-core-libart.oat!0xf6bb
[JNIEnv] GetStringUTFChars 返回: java.lang.Object

[JNIEnv] 调用: GetStringUTFChars
[JNIEnv] GetStringUTFChars 返回: identityHashCode
Error: access violation accessing 0x171
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x179
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: identityHashCodeNative

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x175
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: internalClone

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x171
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: clone

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x179
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: equals

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x175
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: finalize

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x171
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: getClass

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x179
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: hashCode

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x175
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: notify

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x171
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: notifyAll

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x179
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: toString

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x175
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: wait

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x171
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: wait

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x179
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: wait

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x175
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: shadow$_klass_

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x171
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: shadow$_monitor_

[JNIEnv] 调用: NewStringUTF
  参数: java.lang.Exception
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: ���
调用栈:
0xe534c0fd libart.so!_ZN3artL29VMClassLoader_findLoadedClassEP7_JNIEnvP7_jclassP8_jobjectP8_jstring+0x40,0x711656bb boot-core-libart.oat!0xf6bb
[JNIEnv] GetStringUTFChars 返回: java.lang.Exception

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x185
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: getOurStackTrace

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x181
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: nativeFillInStackTrace

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x189
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: nativeGetStackTrace

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x185
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: printEnclosedStackTrace

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x181
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: printStackTrace

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x189
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: readObject

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x185
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: writeObject

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x181
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: addSuppressed

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x189
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: fillInStackTrace

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x185
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: getCause

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x181
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: getLocalizedMessage

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x189
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: getMessage

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x185
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: getStackTrace

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x181
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: getSuppressed

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x189
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: initCause

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x185
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: printStackTrace

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x181
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: printStackTrace

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x189
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: printStackTrace

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x185
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: setStackTrace

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x181
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: toString

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x189
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: backtrace

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x185
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: cause

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x181
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: detailMessage

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x189
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: stackTrace

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x185
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: suppressedExceptions

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x181
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: CAUSE_CAPTION

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x189
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: EMPTY_THROWABLE_ARRAY

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x185
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: NULL_CAUSE_MESSAGE

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x181
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: SELF_SUPPRESSION_MESSAGE

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x189
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: SUPPRESSED_CAPTION

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x185
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: serialVersionUID

[JNIEnv] 调用: NewStringUTF
  参数: java.lang.StackTraceElement
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: ���
调用栈:
0xe534c0fd libart.so!_ZN3artL29VMClassLoader_findLoadedClassEP7_JNIEnvP7_jclassP8_jobjectP8_jstring+0x40,0x711656bb boot-core-libart.oat!0xf6bb
[JNIEnv] GetStringUTFChars 返回: java.lang.StackTraceElement

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x195
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: equals

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x191
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: getClassName

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x199
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: getFileName

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x195
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: getLineNumber

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x191
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: getMethodName

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x199
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: hashCode

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x195
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: isNativeMethod

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x191
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: toString

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x199
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: declaringClass

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x195
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: fileName

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x191
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: lineNumber

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x199
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: methodName

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x195
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: serialVersionUID

[JNIEnv] 调用: NewStringUTF
  参数: [Ljava/lang/StackTraceElement;
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: ���@�������X��� ����
调用栈:
0xe534c0fd libart.so!_ZN3artL29VMClassLoader_findLoadedClassEP7_JNIEnvP7_jclassP8_jobjectP8_jstring+0x40,0x711656bb boot-core-libart.oat!0xf6bb
[JNIEnv] GetStringUTFChars 返回: [Ljava/lang/StackTraceElement;

[JNIEnv] 调用: GetStringUTFChars
  参数: ���
调用栈:
0xe534c0fd libart.so!_ZN3artL29VMClassLoader_findLoadedClassEP7_JNIEnvP7_jclassP8_jobjectP8_jstring+0x40,0x711656bb boot-core-libart.oat!0xf6bb
[JNIEnv] GetStringUTFChars 返回: [Ljava/lang/StackTraceElement;
[*] JSONObject.put called with key: appid, value: 100215079

[JNIEnv] 调用: NewStringUTF
  参数: appid
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: NewStringUTF
  参数: org.json.JSONObject
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: ���
调用栈:
0xe534c0fd libart.so!_ZN3artL29VMClassLoader_findLoadedClassEP7_JNIEnvP7_jclassP8_jobjectP8_jstring+0x40,0x711656bb boot-core-libart.oat!0xf6bb
[JNIEnv] GetStringUTFChars 返回: org.json.JSONObject

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq���������Ur�g�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: ���������Ur�g�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: appid, value: 100215079
[*] JSONObject.put called with key: vivo, value: {"appid":"100215079"}

[JNIEnv] 调用: NewStringUTF
  参数: vivo
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�������Ur�g�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �������Ur�g�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: vivo, value: {"appid":"100215079"}
[*] JSONObject.put called with key: xiaomi, value: {}

[JNIEnv] 调用: NewStringUTF
  参数: xiaomi
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq(-�(-����Ur�g�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: (-�(-����Ur�g�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: xiaomi, value: {}
[*] JSONObject.put called with key: huawei, value: {}

[JNIEnv] 调用: NewStringUTF
  参数: huawei
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq0C�0C����Ur�g�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: 0C�0C����Ur�g�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: huawei, value: {}
[*] JSONObject.put called with key: oppo, value: {}

[JNIEnv] 调用: NewStringUTF
  参数: oppo
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq8Y�8Y����Ur�g�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: 8Y�8Y����Ur�g�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: oppo, value: {}
[*] JSONObject.put called with key: supplier, value: {"vivo":{"appid":"100215079"},"xiaomi":{},"huawei":{},"oppo":{}}

[JNIEnv] 调用: NewStringUTF
  参数: supplier
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�q��q����Ur�g�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �q��q����Ur�g�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: supplier, value: {"vivo":{"appid":"100215079"},"xiaomi":{},"huawei":{},"oppo":{}}

[JNIEnv] 调用: NewStringUTF
  参数: supplier
调用栈:
0xb539c8dc libsecsdk.so!0x598dc,0xb53553d8 libsecsdk.so!0x123d8,0xb534cc34 libsecsdk.so!0x9c34,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50ac560 libart.so!nterp_helper+0xb0,0xe50b13d7 libart.so!art_quick_invoke_stub_internal+0x46,0xe54c48a9 libart.so!art_quick_invoke_static_stub+0x120,0xe51065b7 libart.so!_ZN3art9ArtMethod6InvokeEPNS_6ThreadEPjjPNS_6JValueEPKc+0x9e,0xe53c315f libart.so!_ZN3art17InvokeWithJValuesIPNS_9ArtMethodEEENS_6JValueERKNS_33ScopedObjectAccessAlreadyRunnableEP8_jobjectT_PK6jvalue+0x162,0xe53c3333 libart.so!_ZN3art17InvokeWithJValuesIP10_jmethodIDEENS_6JValueERKNS_33ScopedObjectAccessAlreadyRunnableEP8_jobjectT_PK6jvalue+0x2e,0xe528f487 libart.so!_ZN3art3JNIILb0EE23CallStaticObjectMethodAEP7_JNIEnvP7_jclassP10_jmethodIDPK6jvalue+0x1d2,0xb53b0d54 libsecsdk.so!0x6dd54,0xb539cd94 libsecsdk.so!0x59d94,0xb53553d8 libsecsdk.so!0x123d8,0xb534cc34 libsecsdk.so!0x9c34,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e

[JNIEnv] 调用: NewStringUTF
  参数: vivo
调用栈:
0xb539c8dc libsecsdk.so!0x598dc,0xb53553d8 libsecsdk.so!0x123d8,0xb534cc34 libsecsdk.so!0x9c34,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50ac560 libart.so!nterp_helper+0xb0,0xe50b13d7 libart.so!art_quick_invoke_stub_internal+0x46,0xe54c48a9 libart.so!art_quick_invoke_static_stub+0x120,0xe51065b7 libart.so!_ZN3art9ArtMethod6InvokeEPNS_6ThreadEPjjPNS_6JValueEPKc+0x9e,0xe53c315f libart.so!_ZN3art17InvokeWithJValuesIPNS_9ArtMethodEEENS_6JValueERKNS_33ScopedObjectAccessAlreadyRunnableEP8_jobjectT_PK6jvalue+0x162,0xe53c3333 libart.so!_ZN3art17InvokeWithJValuesIP10_jmethodIDEENS_6JValueERKNS_33ScopedObjectAccessAlreadyRunnableEP8_jobjectT_PK6jvalue+0x2e,0xe5290491 libart.so!_ZN3art3JNIILb0EE24CallStaticBooleanMethodAEP7_JNIEnvP7_jclassP10_jmethodIDPK6jvalue+0x1cc,0xb53b0ddc libsecsdk.so!0x6dddc,0xb539cd94 libsecsdk.so!0x59d94,0xb53553d8 libsecsdk.so!0x123d8,0xb534cc34 libsecsdk.so!0x9c34,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e

[JNIEnv] 调用: NewStringUTF
  参数: appid
调用栈:
0xb539c8dc libsecsdk.so!0x598dc,0xb53553d8 libsecsdk.so!0x123d8,0xb534cc34 libsecsdk.so!0x9c34,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50ac560 libart.so!nterp_helper+0xb0,0xe50b13d7 libart.so!art_quick_invoke_stub_internal+0x46,0xe54c48a9 libart.so!art_quick_invoke_static_stub+0x120,0xe51065b7 libart.so!_ZN3art9ArtMethod6InvokeEPNS_6ThreadEPjjPNS_6JValueEPKc+0x9e,0xe53c315f libart.so!_ZN3art17InvokeWithJValuesIPNS_9ArtMethodEEENS_6JValueERKNS_33ScopedObjectAccessAlreadyRunnableEP8_jobjectT_PK6jvalue+0x162,0xe53c3333 libart.so!_ZN3art17InvokeWithJValuesIP10_jmethodIDEENS_6JValueERKNS_33ScopedObjectAccessAlreadyRunnableEP8_jobjectT_PK6jvalue+0x2e,0xe5290491 libart.so!_ZN3art3JNIILb0EE24CallStaticBooleanMethodAEP7_JNIEnvP7_jclassP10_jmethodIDPK6jvalue+0x1cc,0xb53b0ddc libsecsdk.so!0x6dddc,0xb539cd94 libsecsdk.so!0x59d94,0xb53553d8 libsecsdk.so!0x123d8,0xb534cc34 libsecsdk.so!0x9c34,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e

[JNIEnv] 调用: NewStringUTF
  参数: UTF-8
调用栈:
0xb53a7a14 libsecsdk.so!0x64a14,0xb53a82b0 libsecsdk.so!0x652b0,0xb53aa204 libsecsdk.so!0x67204,0xb539c834 libsecsdk.so!0x59834,0xb53553d8 libsecsdk.so!0x123d8,0xb534cc34 libsecsdk.so!0x9c34,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50ac560 libart.so!nterp_helper+0xb0,0xe50b13d7 libart.so!art_quick_invoke_stub_internal+0x46,0xe54c48a9 libart.so!art_quick_invoke_static_stub+0x120,0xe51065b7 libart.so!_ZN3art9ArtMethod6InvokeEPNS_6ThreadEPjjPNS_6JValueEPKc+0x9e,0xe53c315f libart.so!_ZN3art17InvokeWithJValuesIPNS_9ArtMethodEEENS_6JValueERKNS_33ScopedObjectAccessAlreadyRunnableEP8_jobjectT_PK6jvalue+0x162,0xe53c3333 libart.so!_ZN3art17InvokeWithJValuesIP10_jmethodIDEENS_6JValueERKNS_33ScopedObjectAccessAlreadyRunnableEP8_jobjectT_PK6jvalue+0x2e,0xe529844d libart.so!_ZN3art3JNIILb0EE21CallStaticVoidMethodAEP7_JNIEnvP7_jclassP10_jmethodIDPK6jvalue+0x1cc,0xb53b0dc0 libsecsdk.so!0x6ddc0,0xb539cd94 libsecsdk.so!0x59d94

[JNIEnv] 调用: NewStringUTF
  参数: UTF-8
调用栈:
0xb53a7a14 libsecsdk.so!0x64a14,0xb53a82d0 libsecsdk.so!0x652d0,0xb53aa204 libsecsdk.so!0x67204,0xb539c834 libsecsdk.so!0x59834,0xb53553d8 libsecsdk.so!0x123d8,0xb534cc34 libsecsdk.so!0x9c34,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50ac560 libart.so!nterp_helper+0xb0,0xe50b13d7 libart.so!art_quick_invoke_stub_internal+0x46,0xe54c48a9 libart.so!art_quick_invoke_static_stub+0x120,0xe51065b7 libart.so!_ZN3art9ArtMethod6InvokeEPNS_6ThreadEPjjPNS_6JValueEPKc+0x9e,0xe53c315f libart.so!_ZN3art17InvokeWithJValuesIPNS_9ArtMethodEEENS_6JValueERKNS_33ScopedObjectAccessAlreadyRunnableEP8_jobjectT_PK6jvalue+0x162,0xe53c3333 libart.so!_ZN3art17InvokeWithJValuesIP10_jmethodIDEENS_6JValueERKNS_33ScopedObjectAccessAlreadyRunnableEP8_jobjectT_PK6jvalue+0x2e,0xe529844d libart.so!_ZN3art3JNIILb0EE21CallStaticVoidMethodAEP7_JNIEnvP7_jclassP10_jmethodIDPK6jvalue+0x1cc,0xb53b0dc0 libsecsdk.so!0x6ddc0,0xb539cd94 libsecsdk.so!0x59d94

[JNIEnv] 调用: NewStringUTF
  参数: UTF-8
调用栈:
0xb53a7bd4 libsecsdk.so!0x64bd4,0xb53a830c libsecsdk.so!0x6530c,0xb53aa204 libsecsdk.so!0x67204,0xb539c834 libsecsdk.so!0x59834,0xb53553d8 libsecsdk.so!0x123d8,0xb534cc34 libsecsdk.so!0x9c34,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50ac560 libart.so!nterp_helper+0xb0,0xe50b13d7 libart.so!art_quick_invoke_stub_internal+0x46,0xe54c48a9 libart.so!art_quick_invoke_static_stub+0x120,0xe51065b7 libart.so!_ZN3art9ArtMethod6InvokeEPNS_6ThreadEPjjPNS_6JValueEPKc+0x9e,0xe53c315f libart.so!_ZN3art17InvokeWithJValuesIPNS_9ArtMethodEEENS_6JValueERKNS_33ScopedObjectAccessAlreadyRunnableEP8_jobjectT_PK6jvalue+0x162,0xe53c3333 libart.so!_ZN3art17InvokeWithJValuesIP10_jmethodIDEENS_6JValueERKNS_33ScopedObjectAccessAlreadyRunnableEP8_jobjectT_PK6jvalue+0x2e,0xe529844d libart.so!_ZN3art3JNIILb0EE21CallStaticVoidMethodAEP7_JNIEnvP7_jclassP10_jmethodIDPK6jvalue+0x1cc,0xb53b0dc0 libsecsdk.so!0x6ddc0,0xb539cd94 libsecsdk.so!0x59d94

[JNIEnv] 调用: NewStringUTF
  参数: call and retvalue:

[JNIEnv] 调用: GetStringUTFChars
  参数: ��
调用栈:
0xb539c8dc libsecsdk.so!0x598dc,0xb53553d8 libsecsdk.so!0x123d8,0xb534cc34 libsecsdk.so!0x9c34,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50b13d7 libart.so!art_quick_invoke_stub_internal+0x46,0xe54c48a9 libart.so!art_quick_invoke_static_stub+0x120,0xe51065b7 libart.so!_ZN3art9ArtMethod6InvokeEPNS_6ThreadEPjjPNS_6JValueEPKc+0x9e,0xe520ce2f libart.so!_ZN3art11interpreter34ArtInterpreterToCompiledCodeBridgeEPNS_6ThreadEPNS_9ArtMethodEPNS_11ShadowFrameEtPNS_6JValueE+0x116,0xe520837d libart.so!_ZN3art11interpreter6DoCallILb0ELb0EEEbPNS_9ArtMethodEPNS_6ThreadERNS_11ShadowFrameEPKNS_11InstructionEtPNS_6JValueE+0x29c,0xe54b1f25 libart.so!MterpInvokeStatic+0x3bc,0xe509eb98 libart.so!mterp_op_invoke_static+0x18,0xe5201e05 libart.so!_ZN3art11interpreterL7ExecuteEPNS_6ThreadERKNS_20CodeItemDataAccessorERNS_11ShadowFrameENS_6JValueEbb+0xc8,0xe5207aa9 libart.so!_ZN3art11interpreter30EnterInterpreterFromEntryPointEPNS_6ThreadERKNS_20CodeItemDataAccessorEPNS_11ShadowFrameE+0x8c,0xe5499c25 libart.so!artQuickToInterpreterBridge+0x2a4,0xe50b5f25 libart.so!art_quick_to_interpreter_bridge+0x24,0xe50ac560 libart.so!nterp_helper+0xb0

[JNIEnv] 调用: GetStringUTFChars
  参数: �������^���^��`�
��W��$��H������^�����Ȑ����8�������Ȑ����8����
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.android.id.impl.IdProviderImpl

[JNIEnv] 调用: NewStringUTF
  参数: UTF-8
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: MiitHelper

[JNIEnv] 调用: GetStringUTFChars
  参数: ����^���^��`�
��W��$��H������^�����Ȑ����8�������Ȑ����8����
调用栈:
0xb53a7a14 libsecsdk.so!0x64a14,0xb53a82b0 libsecsdk.so!0x652b0,0xb53aa204 libsecsdk.so!0x67204,0xb539c834 libsecsdk.so!0x59834,0xb53553d8 libsecsdk.so!0x123d8,0xb534cc34 libsecsdk.so!0x9c34,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50ac560 libart.so!nterp_helper+0xb0,0xe50b13d7 libart.so!art_quick_invoke_stub_internal+0x46,0xe54c48a9 libart.so!art_quick_invoke_static_stub+0x120,0xe51065b7 libart.so!_ZN3art9ArtMethod6InvokeEPNS_6ThreadEPjjPNS_6JValueEPKc+0x9e,0xe53c315f libart.so!_ZN3art17InvokeWithJValuesIPNS_9ArtMethodEEENS_6JValueERKNS_33ScopedObjectAccessAlreadyRunnableEP8_jobjectT_PK6jvalue+0x162,0xe53c3333 libart.so!_ZN3art17InvokeWithJValuesIP10_jmethodIDEENS_6JValueERKNS_33ScopedObjectAccessAlreadyRunnableEP8_jobjectT_PK6jvalue+0x2e,0xe5290491 libart.so!_ZN3art3JNIILb0EE24CallStaticBooleanMethodAEP7_JNIEnvP7_jclassP10_jmethodIDPK6jvalue+0x1cc,0xb53b0ddc libsecsdk.so!0x6dddc,0xb539cd94 libsecsdk.so!0x59d94

[JNIEnv] 调用: NewStringUTF
  参数: UTF-8
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: return value: 1008614

[JNIEnv] 调用: GetStringUTFChars
  参数: ؚ�
调用栈:
0xb53a7a14 libsecsdk.so!0x64a14,0xb53a82d0 libsecsdk.so!0x652d0,0xb53aa204 libsecsdk.so!0x67204,0xb539c834 libsecsdk.so!0x59834,0xb53553d8 libsecsdk.so!0x123d8,0xb534cc34 libsecsdk.so!0x9c34,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50ac560 libart.so!nterp_helper+0xb0,0xe50b13d7 libart.so!art_quick_invoke_stub_internal+0x46,0xe54c48a9 libart.so!art_quick_invoke_static_stub+0x120,0xe51065b7 libart.so!_ZN3art9ArtMethod6InvokeEPNS_6ThreadEPjjPNS_6JValueEPKc+0x9e,0xe53c315f libart.so!_ZN3art17InvokeWithJValuesIPNS_9ArtMethodEEENS_6JValueERKNS_33ScopedObjectAccessAlreadyRunnableEP8_jobjectT_PK6jvalue+0x162,0xe53c3333 libart.so!_ZN3art17InvokeWithJValuesIP10_jmethodIDEENS_6JValueERKNS_33ScopedObjectAccessAlreadyRunnableEP8_jobjectT_PK6jvalue+0x2e,0xe5290491 libart.so!_ZN3art3JNIILb0EE24CallStaticBooleanMethodAEP7_JNIEnvP7_jclassP10_jmethodIDPK6jvalue+0x1cc,0xb53b0ddc libsecsdk.so!0x6dddc,0xb539cd94 libsecsdk.so!0x59d94

[JNIEnv] 调用: NewStringUTF
  参数: UTF-8
调用栈:
0xda7e2b8f libjavacore.so!0x1bb8f,0x71166d05 boot-core-libart.oat!0x10d05
[JNIEnv] GetStringUTFChars 返回: /proc/self/cmdline

[JNIEnv] 调用: GetStringUTFChars
  参数: 8U�r
调用栈:
0xdc22e867 libicu_jni.so!0x8867,0x72677869 boot-core-icu4j.oat!0x2e869
[JNIEnv] GetStringUTFChars 返回: UTF-8

[JNIEnv] 调用: NewStringUTF
  参数: emulated;0
调用栈:
0xb53a7bd4 libsecsdk.so!0x64bd4,0xb53a830c libsecsdk.so!0x6530c,0xb53aa204 libsecsdk.so!0x67204,0xb539c834 libsecsdk.so!0x59834,0xb53553d8 libsecsdk.so!0x123d8,0xb534cc34 libsecsdk.so!0x9c34,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50ac560 libart.so!nterp_helper+0xb0,0xe50b13d7 libart.so!art_quick_invoke_stub_internal+0x46,0xe54c48a9 libart.so!art_quick_invoke_static_stub+0x120,0xe51065b7 libart.so!_ZN3art9ArtMethod6InvokeEPNS_6ThreadEPjjPNS_6JValueEPKc+0x9e,0xe53c315f libart.so!_ZN3art17InvokeWithJValuesIPNS_9ArtMethodEEENS_6JValueERKNS_33ScopedObjectAccessAlreadyRunnableEP8_jobjectT_PK6jvalue+0x162,0xe53c3333 libart.so!_ZN3art17InvokeWithJValuesIP10_jmethodIDEENS_6JValueERKNS_33ScopedObjectAccessAlreadyRunnableEP8_jobjectT_PK6jvalue+0x2e,0xe5290491 libart.so!_ZN3art3JNIILb0EE24CallStaticBooleanMethodAEP7_JNIEnvP7_jclassP10_jmethodIDPK6jvalue+0x1cc,0xb53b0ddc libsecsdk.so!0x6dddc,0xb539cd94 libsecsdk.so!0x59d94

[JNIEnv] 调用: NewStringUTF
  参数: UTF-8
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /storage/emulated/0
调用栈:
0xb53a7a14 libsecsdk.so!0x64a14,0xb53a82b0 libsecsdk.so!0x652b0,0xb53aa204 libsecsdk.so!0x67204,0xb539c834 libsecsdk.so!0x59834,0xb53553d8 libsecsdk.so!0x123d8,0xb534cc34 libsecsdk.so!0x9c34,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50ac560 libart.so!nterp_helper+0xb0,0xe50b13d7 libart.so!art_quick_invoke_stub_internal+0x46,0xe54c48a9 libart.so!art_quick_invoke_static_stub+0x120,0xe51065b7 libart.so!_ZN3art9ArtMethod6InvokeEPNS_6ThreadEPjjPNS_6JValueEPKc+0x9e,0xe53c315f libart.so!_ZN3art17InvokeWithJValuesIPNS_9ArtMethodEEENS_6JValueERKNS_33ScopedObjectAccessAlreadyRunnableEP8_jobjectT_PK6jvalue+0x162,0xe53c3333 libart.so!_ZN3art17InvokeWithJValuesIP10_jmethodIDEENS_6JValueERKNS_33ScopedObjectAccessAlreadyRunnableEP8_jobjectT_PK6jvalue+0x2e,0xe5290491 libart.so!_ZN3art3JNIILb0EE24CallStaticBooleanMethodAEP7_JNIEnvP7_jclassP10_jmethodIDPK6jvalue+0x1cc,0xb53b0ddc libsecsdk.so!0x6dddc,0xb539cd94 libsecsdk.so!0x59d94

[JNIEnv] 调用: NewStringUTF
  参数: UTF-8
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /storage/emulated/0
调用栈:
0xb53a7a14 libsecsdk.so!0x64a14,0xb53a82d0 libsecsdk.so!0x652d0,0xb53aa204 libsecsdk.so!0x67204,0xb539c834 libsecsdk.so!0x59834,0xb53553d8 libsecsdk.so!0x123d8,0xb534cc34 libsecsdk.so!0x9c34,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50ac560 libart.so!nterp_helper+0xb0,0xe50b13d7 libart.so!art_quick_invoke_stub_internal+0x46,0xe54c48a9 libart.so!art_quick_invoke_static_stub+0x120,0xe51065b7 libart.so!_ZN3art9ArtMethod6InvokeEPNS_6ThreadEPjjPNS_6JValueEPKc+0x9e,0xe53c315f libart.so!_ZN3art17InvokeWithJValuesIPNS_9ArtMethodEEENS_6JValueERKNS_33ScopedObjectAccessAlreadyRunnableEP8_jobjectT_PK6jvalue+0x162,0xe53c3333 libart.so!_ZN3art17InvokeWithJValuesIP10_jmethodIDEENS_6JValueERKNS_33ScopedObjectAccessAlreadyRunnableEP8_jobjectT_PK6jvalue+0x2e,0xe5290491 libart.so!_ZN3art3JNIILb0EE24CallStaticBooleanMethodAEP7_JNIEnvP7_jclassP10_jmethodIDPK6jvalue+0x1cc,0xb53b0ddc libsecsdk.so!0x6dddc,0xb539cd94 libsecsdk.so!0x59d94

[JNIEnv] 调用: NewStringUTF
  参数: UTF-8
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: 内部共享存储空间
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: GetStringUTFChars
  参数: P��
调用栈:
0xb53a7bd4 libsecsdk.so!0x64bd4,0xb53a830c libsecsdk.so!0x6530c,0xb53aa204 libsecsdk.so!0x67204,0xb539c834 libsecsdk.so!0x59834,0xb53553d8 libsecsdk.so!0x123d8,0xb534cc34 libsecsdk.so!0x9c34,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50ac560 libart.so!nterp_helper+0xb0,0xe50b13d7 libart.so!art_quick_invoke_stub_internal+0x46,0xe54c48a9 libart.so!art_quick_invoke_static_stub+0x120,0xe51065b7 libart.so!_ZN3art9ArtMethod6InvokeEPNS_6ThreadEPjjPNS_6JValueEPKc+0x9e,0xe53c315f libart.so!_ZN3art17InvokeWithJValuesIPNS_9ArtMethodEEENS_6JValueERKNS_33ScopedObjectAccessAlreadyRunnableEP8_jobjectT_PK6jvalue+0x162,0xe53c3333 libart.so!_ZN3art17InvokeWithJValuesIP10_jmethodIDEENS_6JValueERKNS_33ScopedObjectAccessAlreadyRunnableEP8_jobjectT_PK6jvalue+0x2e,0xe5290491 libart.so!_ZN3art3JNIILb0EE24CallStaticBooleanMethodAEP7_JNIEnvP7_jclassP10_jmethodIDPK6jvalue+0x1cc,0xb53b0ddc libsecsdk.so!0x6dddc,0xb539cd94 libsecsdk.so!0x59d94

[JNIEnv] 调用: NewStringUTF
  参数: UTF-8
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: android.os.UserHandle

[JNIEnv] 调用: NewStringUTF
  参数: mounted
调用栈:
0xb53a7a14 libsecsdk.so!0x64a14,0xb53a82b0 libsecsdk.so!0x652b0,0xb53aa204 libsecsdk.so!0x67204,0xb539c834 libsecsdk.so!0x59834,0xb53553d8 libsecsdk.so!0x123d8,0xb534cc34 libsecsdk.so!0x9c34,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50ac560 libart.so!nterp_helper+0xb0,0xe50b13d7 libart.so!art_quick_invoke_stub_internal+0x46,0xe54c48a9 libart.so!art_quick_invoke_static_stub+0x120,0xe51065b7 libart.so!_ZN3art9ArtMethod6InvokeEPNS_6ThreadEPjjPNS_6JValueEPKc+0x9e,0xe53c315f libart.so!_ZN3art17InvokeWithJValuesIPNS_9ArtMethodEEENS_6JValueERKNS_33ScopedObjectAccessAlreadyRunnableEP8_jobjectT_PK6jvalue+0x162,0xe53c3333 libart.so!_ZN3art17InvokeWithJValuesIP10_jmethodIDEENS_6JValueERKNS_33ScopedObjectAccessAlreadyRunnableEP8_jobjectT_PK6jvalue+0x2e,0xe528f487 libart.so!_ZN3art3JNIILb0EE23CallStaticObjectMethodAEP7_JNIEnvP7_jclassP10_jmethodIDPK6jvalue+0x1d2,0xb53b0d54 libsecsdk.so!0x6dd54,0xb539cd94 libsecsdk.so!0x59d94

[JNIEnv] 调用: NewStringUTF
  参数: UTF-8
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: GetStringUTFChars
  参数: @�Nqb��8q9����
调用栈:
0xb53a7a14 libsecsdk.so!0x64a14,0xb53a82d0 libsecsdk.so!0x652d0,0xb53aa204 libsecsdk.so!0x67204,0xb539c834 libsecsdk.so!0x59834,0xb53553d8 libsecsdk.so!0x123d8,0xb534cc34 libsecsdk.so!0x9c34,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50ac560 libart.so!nterp_helper+0xb0,0xe50b13d7 libart.so!art_quick_invoke_stub_internal+0x46,0xe54c48a9 libart.so!art_quick_invoke_static_stub+0x120,0xe51065b7 libart.so!_ZN3art9ArtMethod6InvokeEPNS_6ThreadEPjjPNS_6JValueEPKc+0x9e,0xe53c315f libart.so!_ZN3art17InvokeWithJValuesIPNS_9ArtMethodEEENS_6JValueERKNS_33ScopedObjectAccessAlreadyRunnableEP8_jobjectT_PK6jvalue+0x162,0xe53c3333 libart.so!_ZN3art17InvokeWithJValuesIP10_jmethodIDEENS_6JValueERKNS_33ScopedObjectAccessAlreadyRunnableEP8_jobjectT_PK6jvalue+0x2e,0xe528f487 libart.so!_ZN3art3JNIILb0EE23CallStaticObjectMethodAEP7_JNIEnvP7_jclassP10_jmethodIDPK6jvalue+0x1d2,0xb53b0d54 libsecsdk.so!0x6dd54,0xb539cd94 libsecsdk.so!0x59d94

[JNIEnv] 调用: NewStringUTF
  参数: UTF-8
调用栈:
0xe723e147 libandroid_runtime.so!0x7a147,0x71fcdc41 boot-framework.oat!0x199c41
[JNIEnv] GetStringUTFChars 返回: cache_key.package_info

[JNIEnv] 调用: GetStringUTFChars
  参数:  ��
调用栈:
0xb53a7bd4 libsecsdk.so!0x64bd4,0xb53a830c libsecsdk.so!0x6530c,0xb53aa204 libsecsdk.so!0x67204,0xb539c834 libsecsdk.so!0x59834,0xb53553d8 libsecsdk.so!0x123d8,0xb534cc34 libsecsdk.so!0x9c34,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50ac560 libart.so!nterp_helper+0xb0,0xe50b13d7 libart.so!art_quick_invoke_stub_internal+0x46,0xe54c48a9 libart.so!art_quick_invoke_static_stub+0x120,0xe51065b7 libart.so!_ZN3art9ArtMethod6InvokeEPNS_6ThreadEPjjPNS_6JValueEPKc+0x9e,0xe53c315f libart.so!_ZN3art17InvokeWithJValuesIPNS_9ArtMethodEEENS_6JValueERKNS_33ScopedObjectAccessAlreadyRunnableEP8_jobjectT_PK6jvalue+0x162,0xe53c3333 libart.so!_ZN3art17InvokeWithJValuesIP10_jmethodIDEENS_6JValueERKNS_33ScopedObjectAccessAlreadyRunnableEP8_jobjectT_PK6jvalue+0x2e,0xe528f487 libart.so!_ZN3art3JNIILb0EE23CallStaticObjectMethodAEP7_JNIEnvP7_jclassP10_jmethodIDPK6jvalue+0x1d2,0xb53b0d54 libsecsdk.so!0x6dd54,0xb539cd94 libsecsdk.so!0x59d94

[JNIEnv] 调用: NewStringUTF
  参数: UTF-8
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /storage/emulated/0/Android/data/com.sytt.tzy/files/neCrash

[JNIEnv] 调用: GetStringUTFChars
  参数:  ��
调用栈:
0xb53a7a14 libsecsdk.so!0x64a14,0xb53a82b0 libsecsdk.so!0x652b0,0xb53aa204 libsecsdk.so!0x67204,0xb539c834 libsecsdk.so!0x59834,0xb53553d8 libsecsdk.so!0x123d8,0xb534cc34 libsecsdk.so!0x9c34,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50ac560 libart.so!nterp_helper+0xb0,0xe50b13d7 libart.so!art_quick_invoke_stub_internal+0x46,0xe54c48a9 libart.so!art_quick_invoke_static_stub+0x120,0xe51065b7 libart.so!_ZN3art9ArtMethod6InvokeEPNS_6ThreadEPjjPNS_6JValueEPKc+0x9e,0xe53c315f libart.so!_ZN3art17InvokeWithJValuesIPNS_9ArtMethodEEENS_6JValueERKNS_33ScopedObjectAccessAlreadyRunnableEP8_jobjectT_PK6jvalue+0x162,0xe53c3333 libart.so!_ZN3art17InvokeWithJValuesIP10_jmethodIDEENS_6JValueERKNS_33ScopedObjectAccessAlreadyRunnableEP8_jobjectT_PK6jvalue+0x2e,0xe528f487 libart.so!_ZN3art3JNIILb0EE23CallStaticObjectMethodAEP7_JNIEnvP7_jclassP10_jmethodIDPK6jvalue+0x1d2,0xb53b0d54 libsecsdk.so!0x6dd54,0xb539cd94 libsecsdk.so!0x59d94

[JNIEnv] 调用: NewStringUTF
  参数: UTF-8
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /storage/emulated/0/Android/data/com.sytt.tzy/files/neCrash

[JNIEnv] 调用: GetStringUTFChars
  参数:  ��
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /storage/emulated/0/Android/data/com.sytt.tzy/files/neCrash

[JNIEnv] 调用: GetStringUTFChars
  参数:  ��
调用栈:
0xb53a7a14 libsecsdk.so!0x64a14,0xb53a82d0 libsecsdk.so!0x652d0,0xb53aa204 libsecsdk.so!0x67204,0xb539c834 libsecsdk.so!0x59834,0xb53553d8 libsecsdk.so!0x123d8,0xb534cc34 libsecsdk.so!0x9c34,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50ac560 libart.so!nterp_helper+0xb0,0xe50b13d7 libart.so!art_quick_invoke_stub_internal+0x46,0xe54c48a9 libart.so!art_quick_invoke_static_stub+0x120,0xe51065b7 libart.so!_ZN3art9ArtMethod6InvokeEPNS_6ThreadEPjjPNS_6JValueEPKc+0x9e,0xe53c315f libart.so!_ZN3art17InvokeWithJValuesIPNS_9ArtMethodEEENS_6JValueERKNS_33ScopedObjectAccessAlreadyRunnableEP8_jobjectT_PK6jvalue+0x162,0xe53c3333 libart.so!_ZN3art17InvokeWithJValuesIP10_jmethodIDEENS_6JValueERKNS_33ScopedObjectAccessAlreadyRunnableEP8_jobjectT_PK6jvalue+0x2e,0xe528f487 libart.so!_ZN3art3JNIILb0EE23CallStaticObjectMethodAEP7_JNIEnvP7_jclassP10_jmethodIDPK6jvalue+0x1d2,0xb53b0d54 libsecsdk.so!0x6dd54,0xb539cd94 libsecsdk.so!0x59d94

[JNIEnv] 调用: NewStringUTF
  参数: UTF-8
调用栈:
0xb53a7bd4 libsecsdk.so!0x64bd4,0xb53a830c libsecsdk.so!0x6530c,0xb53aa204 libsecsdk.so!0x67204,0xb539c834 libsecsdk.so!0x59834,0xb53553d8 libsecsdk.so!0x123d8,0xb534cc34 libsecsdk.so!0x9c34,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50ac560 libart.so!nterp_helper+0xb0,0xe50b13d7 libart.so!art_quick_invoke_stub_internal+0x46,0xe54c48a9 libart.so!art_quick_invoke_static_stub+0x120,0xe51065b7 libart.so!_ZN3art9ArtMethod6InvokeEPNS_6ThreadEPjjPNS_6JValueEPKc+0x9e,0xe53c315f libart.so!_ZN3art17InvokeWithJValuesIPNS_9ArtMethodEEENS_6JValueERKNS_33ScopedObjectAccessAlreadyRunnableEP8_jobjectT_PK6jvalue+0x162,0xe53c3333 libart.so!_ZN3art17InvokeWithJValuesIP10_jmethodIDEENS_6JValueERKNS_33ScopedObjectAccessAlreadyRunnableEP8_jobjectT_PK6jvalue+0x2e,0xe528f487 libart.so!_ZN3art3JNIILb0EE23CallStaticObjectMethodAEP7_JNIEnvP7_jclassP10_jmethodIDPK6jvalue+0x1d2,0xb53b0d54 libsecsdk.so!0x6dd54,0xb539cd94 libsecsdk.so!0x59d94

[JNIEnv] 调用: GetStringUTFChars
  参数: �)�
调用栈:
0xda7a2c27 libopenjdk.so!Java_java_io_UnixFileSystem_getBooleanAttributes0+0x22,0x70e65c27 boot.oat!0xa7c27
[JNIEnv] GetStringUTFChars 返回: /storage/emulated/0/Android/data/com.sytt.tzy/files/neCrash

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x75
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: /storage/emulated/0/Android/data/com.sytt.tzy/files/neCrash

[JNIEnv] 调用: GetStringUTFChars
  参数: ���
调用栈:
0xda7a9105 libopenjdk.so!Mock_getProperty+0x2c,0x70e653e3 boot.oat!0xa73e3
[JNIEnv] GetStringUTFChars 返回: lsp.Identifier.OAID

[JNIEnv] 调用: NewStringUTF
  参数: 739f0aa330ad82f9
调用栈:
0xda7e2b8f libjavacore.so!0x1bb8f,0x71166d05 boot-core-libart.oat!0x10d05
[JNIEnv] GetStringUTFChars 返回: /data/app/~~hYKtoZqlctb0dKGf8OSOKQ==/com.sytt.tzy-YAzL_LiSSbrdnOTT58XTsA==/lib/arm/libhtpcrash.so

[JNIEnv] 调用: GetStringUTFChars
  参数: ��� �
调用栈:
0xda745fcd libopenjdkjvm.so!JVM_NativeLoad+0x2c,0x70e65741 boot.oat!0xa7741
[JNIEnv] GetStringUTFChars 返回: /data/app/~~hYKtoZqlctb0dKGf8OSOKQ==/com.sytt.tzy-YAzL_LiSSbrdnOTT58XTsA==/lib/arm/libhtpcrash.so

[JNIEnv] 调用: GetStringUTFChars
  参数: (��
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: android.os.SystemProperties

[JNIEnv] 调用: GetStringUTFChars
  参数: 
调用栈:
0xda7a9141 libopenjdk.so!Mock_getProperty+0x68,0x70e653e3 boot.oat!0xa73e3

[JNIEnv] 调用: NewStringUTF
  参数: UTF-8
调用栈:
0xe723de83 libandroid_runtime.so!0x79e83,0x71fcdccb boot-framework.oat!0x199ccb
[JNIEnv] GetStringUTFChars 返回: ro.miui.ui.version.name

[JNIEnv] 调用: NewStringUTF
  参数: V130
调用栈:
0xb53a7a14 libsecsdk.so!0x64a14,0xb53a82b0 libsecsdk.so!0x652b0,0xb53aa204 libsecsdk.so!0x67204,0xb539c834 libsecsdk.so!0x59834,0xb53553d8 libsecsdk.so!0x123d8,0xb534cc34 libsecsdk.so!0x9c34,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50ac560 libart.so!nterp_helper+0xb0,0xe50b13d7 libart.so!art_quick_invoke_stub_internal+0x46,0xe54c48a9 libart.so!art_quick_invoke_static_stub+0x120,0xe51065b7 libart.so!_ZN3art9ArtMethod6InvokeEPNS_6ThreadEPjjPNS_6JValueEPKc+0x9e,0xe53c315f libart.so!_ZN3art17InvokeWithJValuesIPNS_9ArtMethodEEENS_6JValueERKNS_33ScopedObjectAccessAlreadyRunnableEP8_jobjectT_PK6jvalue+0x162,0xe53c3333 libart.so!_ZN3art17InvokeWithJValuesIP10_jmethodIDEENS_6JValueERKNS_33ScopedObjectAccessAlreadyRunnableEP8_jobjectT_PK6jvalue+0x2e,0xe528f487 libart.so!_ZN3art3JNIILb0EE23CallStaticObjectMethodAEP7_JNIEnvP7_jclassP10_jmethodIDPK6jvalue+0x1d2,0xb53b0d54 libsecsdk.so!0x6dd54,0xb539cd94 libsecsdk.so!0x59d94

[JNIEnv] 调用: NewStringUTF
  参数: UTF-8
调用栈:
0xe723e443 libandroid_runtime.so!0x7a443,0xe723de97 libandroid_runtime.so!0x79e97,0x71fcdccb boot-framework.oat!0x199ccb

[JNIEnv] 调用: GetStringUTFChars
  参数: (��
调用栈:
0xb53a7a14 libsecsdk.so!0x64a14,0xb53a82d0 libsecsdk.so!0x652d0,0xb53aa204 libsecsdk.so!0x67204,0xb539c834 libsecsdk.so!0x59834,0xb53553d8 libsecsdk.so!0x123d8,0xb534cc34 libsecsdk.so!0x9c34,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50ac560 libart.so!nterp_helper+0xb0,0xe50b13d7 libart.so!art_quick_invoke_stub_internal+0x46,0xe54c48a9 libart.so!art_quick_invoke_static_stub+0x120,0xe51065b7 libart.so!_ZN3art9ArtMethod6InvokeEPNS_6ThreadEPjjPNS_6JValueEPKc+0x9e,0xe53c315f libart.so!_ZN3art17InvokeWithJValuesIPNS_9ArtMethodEEENS_6JValueERKNS_33ScopedObjectAccessAlreadyRunnableEP8_jobjectT_PK6jvalue+0x162,0xe53c3333 libart.so!_ZN3art17InvokeWithJValuesIP10_jmethodIDEENS_6JValueERKNS_33ScopedObjectAccessAlreadyRunnableEP8_jobjectT_PK6jvalue+0x2e,0xe528f487 libart.so!_ZN3art3JNIILb0EE23CallStaticObjectMethodAEP7_JNIEnvP7_jclassP10_jmethodIDPK6jvalue+0x1d2,0xb53b0d54 libsecsdk.so!0x6dd54,0xb539cd94 libsecsdk.so!0x59d94

[JNIEnv] 调用: NewStringUTF
  参数: UTF-8
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: android.os.SystemProperties

[JNIEnv] 调用: GetStringUTFChars
  参数: ������p
调用栈:
0xb53a7bd4 libsecsdk.so!0x64bd4,0xb53a830c libsecsdk.so!0x6530c,0xb53aa204 libsecsdk.so!0x67204,0xb539c834 libsecsdk.so!0x59834,0xb53553d8 libsecsdk.so!0x123d8,0xb534cc34 libsecsdk.so!0x9c34,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50ac560 libart.so!nterp_helper+0xb0,0xe50b13d7 libart.so!art_quick_invoke_stub_internal+0x46,0xe54c48a9 libart.so!art_quick_invoke_static_stub+0x120,0xe51065b7 libart.so!_ZN3art9ArtMethod6InvokeEPNS_6ThreadEPjjPNS_6JValueEPKc+0x9e,0xe53c315f libart.so!_ZN3art17InvokeWithJValuesIPNS_9ArtMethodEEENS_6JValueERKNS_33ScopedObjectAccessAlreadyRunnableEP8_jobjectT_PK6jvalue+0x162,0xe53c3333 libart.so!_ZN3art17InvokeWithJValuesIP10_jmethodIDEENS_6JValueERKNS_33ScopedObjectAccessAlreadyRunnableEP8_jobjectT_PK6jvalue+0x2e,0xe528f487 libart.so!_ZN3art3JNIILb0EE23CallStaticObjectMethodAEP7_JNIEnvP7_jclassP10_jmethodIDPK6jvalue+0x1d2,0xb53b0d54 libsecsdk.so!0x6dd54,0xb539cd94 libsecsdk.so!0x59d94

[JNIEnv] 调用: NewStringUTF
  参数: UTF-8
调用栈:
0xe723de83 libandroid_runtime.so!0x79e83,0x71fcdccb boot-framework.oat!0x199ccb
[JNIEnv] GetStringUTFChars 返回: ro.product.marketname

[JNIEnv] 调用: NewStringUTF
  参数: Redmi K40
调用栈:
0xb53a7a14 libsecsdk.so!0x64a14,0xb53a82b0 libsecsdk.so!0x652b0,0xb53aa204 libsecsdk.so!0x67204,0xb539c834 libsecsdk.so!0x59834,0xb53553d8 libsecsdk.so!0x123d8,0xb534cc34 libsecsdk.so!0x9c34,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50ac560 libart.so!nterp_helper+0xb0,0xe50b13d7 libart.so!art_quick_invoke_stub_internal+0x46,0xe54c48a9 libart.so!art_quick_invoke_static_stub+0x120,0xe51065b7 libart.so!_ZN3art9ArtMethod6InvokeEPNS_6ThreadEPjjPNS_6JValueEPKc+0x9e,0xe53c315f libart.so!_ZN3art17InvokeWithJValuesIPNS_9ArtMethodEEENS_6JValueERKNS_33ScopedObjectAccessAlreadyRunnableEP8_jobjectT_PK6jvalue+0x162,0xe53c3333 libart.so!_ZN3art17InvokeWithJValuesIP10_jmethodIDEENS_6JValueERKNS_33ScopedObjectAccessAlreadyRunnableEP8_jobjectT_PK6jvalue+0x2e,0xe528f487 libart.so!_ZN3art3JNIILb0EE23CallStaticObjectMethodAEP7_JNIEnvP7_jclassP10_jmethodIDPK6jvalue+0x1d2,0xb53b0d54 libsecsdk.so!0x6dd54,0xb539cd94 libsecsdk.so!0x59d94

[JNIEnv] 调用: NewStringUTF
  参数: UTF-8
调用栈:
0xe723e443 libandroid_runtime.so!0x7a443,0xe723de97 libandroid_runtime.so!0x79e97,0x71fcdccb boot-framework.oat!0x199ccb

[JNIEnv] 调用: GetStringUTFChars
  参数: ���������(�����������p���p��� ��
调用栈:
0xb53a7a14 libsecsdk.so!0x64a14,0xb53a82d0 libsecsdk.so!0x652d0,0xb53aa204 libsecsdk.so!0x67204,0xb539c834 libsecsdk.so!0x59834,0xb53553d8 libsecsdk.so!0x123d8,0xb534cc34 libsecsdk.so!0x9c34,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50ac560 libart.so!nterp_helper+0xb0,0xe50b13d7 libart.so!art_quick_invoke_stub_internal+0x46,0xe54c48a9 libart.so!art_quick_invoke_static_stub+0x120,0xe51065b7 libart.so!_ZN3art9ArtMethod6InvokeEPNS_6ThreadEPjjPNS_6JValueEPKc+0x9e,0xe53c315f libart.so!_ZN3art17InvokeWithJValuesIPNS_9ArtMethodEEENS_6JValueERKNS_33ScopedObjectAccessAlreadyRunnableEP8_jobjectT_PK6jvalue+0x162,0xe53c3333 libart.so!_ZN3art17InvokeWithJValuesIP10_jmethodIDEENS_6JValueERKNS_33ScopedObjectAccessAlreadyRunnableEP8_jobjectT_PK6jvalue+0x2e,0xe528f487 libart.so!_ZN3art3JNIILb0EE23CallStaticObjectMethodAEP7_JNIEnvP7_jclassP10_jmethodIDPK6jvalue+0x1d2,0xb53b0d54 libsecsdk.so!0x6dd54,0xb539cd94 libsecsdk.so!0x59d94

[JNIEnv] 调用: NewStringUTF
  参数: UTF-8
调用栈:
0xb51087bf libhtpcrash.so!0x57bf,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50acd00 libart.so!nterp_helper+0x850,0xe50acfa4 libart.so!nterp_helper+0xaf4,0xe50acfa4 libart.so!nterp_helper+0xaf4,0xe50b13d7 libart.so!art_quick_invoke_stub_internal+0x46,0xe54c476f libart.so!art_quick_invoke_stub+0x11e,0xe51065a5 libart.so!_ZN3art9ArtMethod6InvokeEPNS_6ThreadEPjjPNS_6JValueEPKc+0x8c,0xe520ce2f libart.so!_ZN3art11interpreter34ArtInterpreterToCompiledCodeBridgeEPNS_6ThreadEPNS_9ArtMethodEPNS_11ShadowFrameEtPNS_6JValueE+0x116,0xe520914f libart.so!_ZN3art11interpreter6DoCallILb1ELb0EEEbPNS_9ArtMethodEPNS_6ThreadERNS_11ShadowFrameEPKNS_11InstructionEtPNS_6JValueE+0x232,0xe54a931b libart.so!MterpInvokeVirtualRange+0x38a,0xe509ed18 libart.so!mterp_op_invoke_virtual_range+0x18,0xe5201e05 libart.so!_ZN3art11interpreterL7ExecuteEPNS_6ThreadERKNS_20CodeItemDataAccessorERNS_11ShadowFrameENS_6JValueEbb+0xc8,0xe5207b75 libart.so!_ZN3art11interpreter33ArtInterpreterToInterpreterBridgeEPNS_6ThreadERKNS_20CodeItemDataAccessorEPNS_11ShadowFrameEPNS_6JValueE+0x94,0xe5208369 libart.so!_ZN3art11interpreter6DoCallILb0ELb0EEEbPNS_9ArtMethodEPNS_6ThreadERNS_11ShadowFrameEPKNS_11InstructionEtPNS_6JValueE+0x288,0xe54b1f25 libart.so!MterpInvokeStatic+0x3bc
[JNIEnv] GetStringUTFChars 返回: 12

[JNIEnv] 调用: GetStringUTFChars
  参数: ������(�����������p���p��� ��
调用栈:
0xb51087d7 libhtpcrash.so!0x57d7,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50acd00 libart.so!nterp_helper+0x850,0xe50acfa4 libart.so!nterp_helper+0xaf4,0xe50acfa4 libart.so!nterp_helper+0xaf4,0xe50b13d7 libart.so!art_quick_invoke_stub_internal+0x46,0xe54c476f libart.so!art_quick_invoke_stub+0x11e,0xe51065a5 libart.so!_ZN3art9ArtMethod6InvokeEPNS_6ThreadEPjjPNS_6JValueEPKc+0x8c,0xe520ce2f libart.so!_ZN3art11interpreter34ArtInterpreterToCompiledCodeBridgeEPNS_6ThreadEPNS_9ArtMethodEPNS_11ShadowFrameEtPNS_6JValueE+0x116,0xe520914f libart.so!_ZN3art11interpreter6DoCallILb1ELb0EEEbPNS_9ArtMethodEPNS_6ThreadERNS_11ShadowFrameEPKNS_11InstructionEtPNS_6JValueE+0x232,0xe54a931b libart.so!MterpInvokeVirtualRange+0x38a,0xe509ed18 libart.so!mterp_op_invoke_virtual_range+0x18,0xe5201e05 libart.so!_ZN3art11interpreterL7ExecuteEPNS_6ThreadERKNS_20CodeItemDataAccessorERNS_11ShadowFrameENS_6JValueEbb+0xc8,0xe5207b75 libart.so!_ZN3art11interpreter33ArtInterpreterToInterpreterBridgeEPNS_6ThreadERKNS_20CodeItemDataAccessorEPNS_11ShadowFrameEPNS_6JValueE+0x94,0xe5208369 libart.so!_ZN3art11interpreter6DoCallILb0ELb0EEEbPNS_9ArtMethodEPNS_6ThreadERNS_11ShadowFrameEPKNS_11InstructionEtPNS_6JValueE+0x288,0xe54b1f25 libart.so!MterpInvokeStatic+0x3bc
[JNIEnv] GetStringUTFChars 返回: arm64-v8a,armeabi-v7a,armeabi

[JNIEnv] 调用: GetStringUTFChars
  参数: ���(�����������p���p��� ��
调用栈:
0xb53a7bd4 libsecsdk.so!0x64bd4,0xb53a830c libsecsdk.so!0x6530c,0xb53aa204 libsecsdk.so!0x67204,0xb539c834 libsecsdk.so!0x59834,0xb53553d8 libsecsdk.so!0x123d8,0xb534cc34 libsecsdk.so!0x9c34,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50ac560 libart.so!nterp_helper+0xb0,0xe50b13d7 libart.so!art_quick_invoke_stub_internal+0x46,0xe54c48a9 libart.so!art_quick_invoke_static_stub+0x120,0xe51065b7 libart.so!_ZN3art9ArtMethod6InvokeEPNS_6ThreadEPjjPNS_6JValueEPKc+0x9e,0xe53c315f libart.so!_ZN3art17InvokeWithJValuesIPNS_9ArtMethodEEENS_6JValueERKNS_33ScopedObjectAccessAlreadyRunnableEP8_jobjectT_PK6jvalue+0x162,0xe53c3333 libart.so!_ZN3art17InvokeWithJValuesIP10_jmethodIDEENS_6JValueERKNS_33ScopedObjectAccessAlreadyRunnableEP8_jobjectT_PK6jvalue+0x2e,0xe528f487 libart.so!_ZN3art3JNIILb0EE23CallStaticObjectMethodAEP7_JNIEnvP7_jclassP10_jmethodIDPK6jvalue+0x1d2,0xb53b0d54 libsecsdk.so!0x6dd54,0xb539cd94 libsecsdk.so!0x59d94

[JNIEnv] 调用: GetStringUTFChars
  参数: �?�
调用栈:
0xb51087ef libhtpcrash.so!0x57ef,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50acd00 libart.so!nterp_helper+0x850,0xe50acfa4 libart.so!nterp_helper+0xaf4,0xe50acfa4 libart.so!nterp_helper+0xaf4,0xe50b13d7 libart.so!art_quick_invoke_stub_internal+0x46,0xe54c476f libart.so!art_quick_invoke_stub+0x11e,0xe51065a5 libart.so!_ZN3art9ArtMethod6InvokeEPNS_6ThreadEPjjPNS_6JValueEPKc+0x8c,0xe520ce2f libart.so!_ZN3art11interpreter34ArtInterpreterToCompiledCodeBridgeEPNS_6ThreadEPNS_9ArtMethodEPNS_11ShadowFrameEtPNS_6JValueE+0x116,0xe520914f libart.so!_ZN3art11interpreter6DoCallILb1ELb0EEEbPNS_9ArtMethodEPNS_6ThreadERNS_11ShadowFrameEPKNS_11InstructionEtPNS_6JValueE+0x232,0xe54a931b libart.so!MterpInvokeVirtualRange+0x38a,0xe509ed18 libart.so!mterp_op_invoke_virtual_range+0x18,0xe5201e05 libart.so!_ZN3art11interpreterL7ExecuteEPNS_6ThreadERKNS_20CodeItemDataAccessorERNS_11ShadowFrameENS_6JValueEbb+0xc8,0xe5207b75 libart.so!_ZN3art11interpreter33ArtInterpreterToInterpreterBridgeEPNS_6ThreadERKNS_20CodeItemDataAccessorEPNS_11ShadowFrameEPNS_6JValueE+0x94,0xe5208369 libart.so!_ZN3art11interpreter6DoCallILb0ELb0EEEbPNS_9ArtMethodEPNS_6ThreadERNS_11ShadowFrameEPKNS_11InstructionEtPNS_6JValueE+0x288,0xe54b1f25 libart.so!MterpInvokeStatic+0x3bc
[JNIEnv] GetStringUTFChars 返回: Xiaomi

[JNIEnv] 调用: GetStringUTFChars
  参数: (�����������p���p��� ��
调用栈:
0xda7a9105 libopenjdk.so!Mock_getProperty+0x2c,0x70e653e3 boot.oat!0xa73e3
[JNIEnv] GetStringUTFChars 返回: lsp.Identifier.VAID

[JNIEnv] 调用: NewStringUTF
  参数: 
调用栈:
0xb5108807 libhtpcrash.so!0x5807,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50acd00 libart.so!nterp_helper+0x850,0xe50acfa4 libart.so!nterp_helper+0xaf4,0xe50acfa4 libart.so!nterp_helper+0xaf4,0xe50b13d7 libart.so!art_quick_invoke_stub_internal+0x46,0xe54c476f libart.so!art_quick_invoke_stub+0x11e,0xe51065a5 libart.so!_ZN3art9ArtMethod6InvokeEPNS_6ThreadEPjjPNS_6JValueEPKc+0x8c,0xe520ce2f libart.so!_ZN3art11interpreter34ArtInterpreterToCompiledCodeBridgeEPNS_6ThreadEPNS_9ArtMethodEPNS_11ShadowFrameEtPNS_6JValueE+0x116,0xe520914f libart.so!_ZN3art11interpreter6DoCallILb1ELb0EEEbPNS_9ArtMethodEPNS_6ThreadERNS_11ShadowFrameEPKNS_11InstructionEtPNS_6JValueE+0x232,0xe54a931b libart.so!MterpInvokeVirtualRange+0x38a,0xe509ed18 libart.so!mterp_op_invoke_virtual_range+0x18,0xe5201e05 libart.so!_ZN3art11interpreterL7ExecuteEPNS_6ThreadERKNS_20CodeItemDataAccessorERNS_11ShadowFrameENS_6JValueEbb+0xc8,0xe5207b75 libart.so!_ZN3art11interpreter33ArtInterpreterToInterpreterBridgeEPNS_6ThreadERKNS_20CodeItemDataAccessorEPNS_11ShadowFrameEPNS_6JValueE+0x94,0xe5208369 libart.so!_ZN3art11interpreter6DoCallILb0ELb0EEEbPNS_9ArtMethodEPNS_6ThreadERNS_11ShadowFrameEPKNS_11InstructionEtPNS_6JValueE+0x288,0xe54b1f25 libart.so!MterpInvokeStatic+0x3bc
[JNIEnv] GetStringUTFChars 返回: Redmi

[JNIEnv] 调用: GetStringUTFChars
  参数: ���������p���p��� ��
调用栈:
0xb510881f libhtpcrash.so!0x581f,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50acd00 libart.so!nterp_helper+0x850,0xe50acfa4 libart.so!nterp_helper+0xaf4,0xe50acfa4 libart.so!nterp_helper+0xaf4,0xe50b13d7 libart.so!art_quick_invoke_stub_internal+0x46,0xe54c476f libart.so!art_quick_invoke_stub+0x11e,0xe51065a5 libart.so!_ZN3art9ArtMethod6InvokeEPNS_6ThreadEPjjPNS_6JValueEPKc+0x8c,0xe520ce2f libart.so!_ZN3art11interpreter34ArtInterpreterToCompiledCodeBridgeEPNS_6ThreadEPNS_9ArtMethodEPNS_11ShadowFrameEtPNS_6JValueE+0x116,0xe520914f libart.so!_ZN3art11interpreter6DoCallILb1ELb0EEEbPNS_9ArtMethodEPNS_6ThreadERNS_11ShadowFrameEPKNS_11InstructionEtPNS_6JValueE+0x232,0xe54a931b libart.so!MterpInvokeVirtualRange+0x38a,0xe509ed18 libart.so!mterp_op_invoke_virtual_range+0x18,0xe5201e05 libart.so!_ZN3art11interpreterL7ExecuteEPNS_6ThreadERKNS_20CodeItemDataAccessorERNS_11ShadowFrameENS_6JValueEbb+0xc8,0xe5207b75 libart.so!_ZN3art11interpreter33ArtInterpreterToInterpreterBridgeEPNS_6ThreadERKNS_20CodeItemDataAccessorEPNS_11ShadowFrameEPNS_6JValueE+0x94,0xe5208369 libart.so!_ZN3art11interpreter6DoCallILb0ELb0EEEbPNS_9ArtMethodEPNS_6ThreadERNS_11ShadowFrameEPKNS_11InstructionEtPNS_6JValueE+0x288,0xe54b1f25 libart.so!MterpInvokeStatic+0x3bc
[JNIEnv] GetStringUTFChars 返回: Redmi K40

[JNIEnv] 调用: GetStringUTFChars
  参数: ������p���p��� ��
调用栈:
0xda7a9141 libopenjdk.so!Mock_getProperty+0x68,0x70e653e3 boot.oat!0xa73e3

[JNIEnv] 调用: NewStringUTF
  参数: UTF-8
调用栈:
0xb5108837 libhtpcrash.so!0x5837,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50acd00 libart.so!nterp_helper+0x850,0xe50acfa4 libart.so!nterp_helper+0xaf4,0xe50acfa4 libart.so!nterp_helper+0xaf4,0xe50b13d7 libart.so!art_quick_invoke_stub_internal+0x46,0xe54c476f libart.so!art_quick_invoke_stub+0x11e,0xe51065a5 libart.so!_ZN3art9ArtMethod6InvokeEPNS_6ThreadEPjjPNS_6JValueEPKc+0x8c,0xe520ce2f libart.so!_ZN3art11interpreter34ArtInterpreterToCompiledCodeBridgeEPNS_6ThreadEPNS_9ArtMethodEPNS_11ShadowFrameEtPNS_6JValueE+0x116,0xe520914f libart.so!_ZN3art11interpreter6DoCallILb1ELb0EEEbPNS_9ArtMethodEPNS_6ThreadERNS_11ShadowFrameEPKNS_11InstructionEtPNS_6JValueE+0x232,0xe54a931b libart.so!MterpInvokeVirtualRange+0x38a,0xe509ed18 libart.so!mterp_op_invoke_virtual_range+0x18,0xe5201e05 libart.so!_ZN3art11interpreterL7ExecuteEPNS_6ThreadERKNS_20CodeItemDataAccessorERNS_11ShadowFrameENS_6JValueEbb+0xc8,0xe5207b75 libart.so!_ZN3art11interpreter33ArtInterpreterToInterpreterBridgeEPNS_6ThreadERKNS_20CodeItemDataAccessorEPNS_11ShadowFrameEPNS_6JValueE+0x94,0xe5208369 libart.so!_ZN3art11interpreter6DoCallILb0ELb0EEEbPNS_9ArtMethodEPNS_6ThreadERNS_11ShadowFrameEPKNS_11InstructionEtPNS_6JValueE+0x288,0xe54b1f25 libart.so!MterpInvokeStatic+0x3bc
[JNIEnv] GetStringUTFChars 返回: Redmi/alioth/alioth:12/SKQ1.211006.001/V13.0.7.0.SKHCNXM:user/release-keys

[JNIEnv] 调用: GetStringUTFChars
  参数: ���p���p��� ��
调用栈:
0xb53a7a14 libsecsdk.so!0x64a14,0xb53a82b0 libsecsdk.so!0x652b0,0xb53aa204 libsecsdk.so!0x67204,0xb539c834 libsecsdk.so!0x59834,0xb53553d8 libsecsdk.so!0x123d8,0xb534cc34 libsecsdk.so!0x9c34,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50ac560 libart.so!nterp_helper+0xb0,0xe50b13d7 libart.so!art_quick_invoke_stub_internal+0x46,0xe54c48a9 libart.so!art_quick_invoke_static_stub+0x120,0xe51065b7 libart.so!_ZN3art9ArtMethod6InvokeEPNS_6ThreadEPjjPNS_6JValueEPKc+0x9e,0xe53c315f libart.so!_ZN3art17InvokeWithJValuesIPNS_9ArtMethodEEENS_6JValueERKNS_33ScopedObjectAccessAlreadyRunnableEP8_jobjectT_PK6jvalue+0x162,0xe53c3333 libart.so!_ZN3art17InvokeWithJValuesIP10_jmethodIDEENS_6JValueERKNS_33ScopedObjectAccessAlreadyRunnableEP8_jobjectT_PK6jvalue+0x2e,0xe528f487 libart.so!_ZN3art3JNIILb0EE23CallStaticObjectMethodAEP7_JNIEnvP7_jclassP10_jmethodIDPK6jvalue+0x1d2,0xb53b0d54 libsecsdk.so!0x6dd54,0xb539cd94 libsecsdk.so!0x59d94

[JNIEnv] 调用: NewStringUTF
  参数: UTF-8
调用栈:
0xb53a7a14 libsecsdk.so!0x64a14,0xb53a82d0 libsecsdk.so!0x652d0,0xb53aa204 libsecsdk.so!0x67204,0xb539c834 libsecsdk.so!0x59834,0xb53553d8 libsecsdk.so!0x123d8,0xb534cc34 libsecsdk.so!0x9c34,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50ac560 libart.so!nterp_helper+0xb0,0xe50b13d7 libart.so!art_quick_invoke_stub_internal+0x46,0xe54c48a9 libart.so!art_quick_invoke_static_stub+0x120,0xe51065b7 libart.so!_ZN3art9ArtMethod6InvokeEPNS_6ThreadEPjjPNS_6JValueEPKc+0x9e,0xe53c315f libart.so!_ZN3art17InvokeWithJValuesIPNS_9ArtMethodEEENS_6JValueERKNS_33ScopedObjectAccessAlreadyRunnableEP8_jobjectT_PK6jvalue+0x162,0xe53c3333 libart.so!_ZN3art17InvokeWithJValuesIP10_jmethodIDEENS_6JValueERKNS_33ScopedObjectAccessAlreadyRunnableEP8_jobjectT_PK6jvalue+0x2e,0xe528f487 libart.so!_ZN3art3JNIILb0EE23CallStaticObjectMethodAEP7_JNIEnvP7_jclassP10_jmethodIDPK6jvalue+0x1d2,0xb53b0d54 libsecsdk.so!0x6dd54,0xb539cd94 libsecsdk.so!0x59d94

[JNIEnv] 调用: NewStringUTF
  参数: UTF-8
调用栈:
0xb510884f libhtpcrash.so!0x584f,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50acd00 libart.so!nterp_helper+0x850,0xe50acfa4 libart.so!nterp_helper+0xaf4,0xe50acfa4 libart.so!nterp_helper+0xaf4,0xe50b13d7 libart.so!art_quick_invoke_stub_internal+0x46,0xe54c476f libart.so!art_quick_invoke_stub+0x11e,0xe51065a5 libart.so!_ZN3art9ArtMethod6InvokeEPNS_6ThreadEPjjPNS_6JValueEPKc+0x8c,0xe520ce2f libart.so!_ZN3art11interpreter34ArtInterpreterToCompiledCodeBridgeEPNS_6ThreadEPNS_9ArtMethodEPNS_11ShadowFrameEtPNS_6JValueE+0x116,0xe520914f libart.so!_ZN3art11interpreter6DoCallILb1ELb0EEEbPNS_9ArtMethodEPNS_6ThreadERNS_11ShadowFrameEPKNS_11InstructionEtPNS_6JValueE+0x232,0xe54a931b libart.so!MterpInvokeVirtualRange+0x38a,0xe509ed18 libart.so!mterp_op_invoke_virtual_range+0x18,0xe5201e05 libart.so!_ZN3art11interpreterL7ExecuteEPNS_6ThreadERKNS_20CodeItemDataAccessorERNS_11ShadowFrameENS_6JValueEbb+0xc8,0xe5207b75 libart.so!_ZN3art11interpreter33ArtInterpreterToInterpreterBridgeEPNS_6ThreadERKNS_20CodeItemDataAccessorEPNS_11ShadowFrameEPNS_6JValueE+0x94,0xe5208369 libart.so!_ZN3art11interpreter6DoCallILb0ELb0EEEbPNS_9ArtMethodEPNS_6ThreadERNS_11ShadowFrameEPKNS_11InstructionEtPNS_6JValueE+0x288,0xe54b1f25 libart.so!MterpInvokeStatic+0x3bc
[JNIEnv] GetStringUTFChars 返回: 

[JNIEnv] 调用: GetStringUTFChars
  参数: ���p��� ��
调用栈:
0xb53a7bd4 libsecsdk.so!0x64bd4,0xb53a830c libsecsdk.so!0x6530c,0xb53aa204 libsecsdk.so!0x67204,0xb539c834 libsecsdk.so!0x59834,0xb53553d8 libsecsdk.so!0x123d8,0xb534cc34 libsecsdk.so!0x9c34,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50ac560 libart.so!nterp_helper+0xb0,0xe50b13d7 libart.so!art_quick_invoke_stub_internal+0x46,0xe54c48a9 libart.so!art_quick_invoke_static_stub+0x120,0xe51065b7 libart.so!_ZN3art9ArtMethod6InvokeEPNS_6ThreadEPjjPNS_6JValueEPKc+0x9e,0xe53c315f libart.so!_ZN3art17InvokeWithJValuesIPNS_9ArtMethodEEENS_6JValueERKNS_33ScopedObjectAccessAlreadyRunnableEP8_jobjectT_PK6jvalue+0x162,0xe53c3333 libart.so!_ZN3art17InvokeWithJValuesIP10_jmethodIDEENS_6JValueERKNS_33ScopedObjectAccessAlreadyRunnableEP8_jobjectT_PK6jvalue+0x2e,0xe528f487 libart.so!_ZN3art3JNIILb0EE23CallStaticObjectMethodAEP7_JNIEnvP7_jclassP10_jmethodIDPK6jvalue+0x1d2,0xb53b0d54 libsecsdk.so!0x6dd54,0xb539cd94 libsecsdk.so!0x59d94

[JNIEnv] 调用: NewStringUTF
  参数: UTF-8
调用栈:
0xb5108867 libhtpcrash.so!0x5867,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50acd00 libart.so!nterp_helper+0x850,0xe50acfa4 libart.so!nterp_helper+0xaf4,0xe50acfa4 libart.so!nterp_helper+0xaf4,0xe50b13d7 libart.so!art_quick_invoke_stub_internal+0x46,0xe54c476f libart.so!art_quick_invoke_stub+0x11e,0xe51065a5 libart.so!_ZN3art9ArtMethod6InvokeEPNS_6ThreadEPjjPNS_6JValueEPKc+0x8c,0xe520ce2f libart.so!_ZN3art11interpreter34ArtInterpreterToCompiledCodeBridgeEPNS_6ThreadEPNS_9ArtMethodEPNS_11ShadowFrameEtPNS_6JValueE+0x116,0xe520914f libart.so!_ZN3art11interpreter6DoCallILb1ELb0EEEbPNS_9ArtMethodEPNS_6ThreadERNS_11ShadowFrameEPKNS_11InstructionEtPNS_6JValueE+0x232,0xe54a931b libart.so!MterpInvokeVirtualRange+0x38a,0xe509ed18 libart.so!mterp_op_invoke_virtual_range+0x18,0xe5201e05 libart.so!_ZN3art11interpreterL7ExecuteEPNS_6ThreadERKNS_20CodeItemDataAccessorERNS_11ShadowFrameENS_6JValueEbb+0xc8,0xe5207b75 libart.so!_ZN3art11interpreter33ArtInterpreterToInterpreterBridgeEPNS_6ThreadERKNS_20CodeItemDataAccessorEPNS_11ShadowFrameEPNS_6JValueE+0x94,0xe5208369 libart.so!_ZN3art11interpreter6DoCallILb0ELb0EEEbPNS_9ArtMethodEPNS_6ThreadERNS_11ShadowFrameEPKNS_11InstructionEtPNS_6JValueE+0x288,0xe54b1f25 libart.so!MterpInvokeStatic+0x3bc
[JNIEnv] GetStringUTFChars 返回: 

[JNIEnv] 调用: GetStringUTFChars
  参数: ��� ��
调用栈:
0xb53a7a14 libsecsdk.so!0x64a14,0xb53a82b0 libsecsdk.so!0x652b0,0xb53aa204 libsecsdk.so!0x67204,0xb539c834 libsecsdk.so!0x59834,0xb53553d8 libsecsdk.so!0x123d8,0xb534cc34 libsecsdk.so!0x9c34,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50ac560 libart.so!nterp_helper+0xb0,0xe50b13d7 libart.so!art_quick_invoke_stub_internal+0x46,0xe54c48a9 libart.so!art_quick_invoke_static_stub+0x120,0xe51065b7 libart.so!_ZN3art9ArtMethod6InvokeEPNS_6ThreadEPjjPNS_6JValueEPKc+0x9e,0xe53c315f libart.so!_ZN3art17InvokeWithJValuesIPNS_9ArtMethodEEENS_6JValueERKNS_33ScopedObjectAccessAlreadyRunnableEP8_jobjectT_PK6jvalue+0x162,0xe53c3333 libart.so!_ZN3art17InvokeWithJValuesIP10_jmethodIDEENS_6JValueERKNS_33ScopedObjectAccessAlreadyRunnableEP8_jobjectT_PK6jvalue+0x2e,0xe528f487 libart.so!_ZN3art3JNIILb0EE23CallStaticObjectMethodAEP7_JNIEnvP7_jclassP10_jmethodIDPK6jvalue+0x1d2,0xb53b0d54 libsecsdk.so!0x6dd54,0xb539cd94 libsecsdk.so!0x59d94

[JNIEnv] 调用: NewStringUTF
  参数: UTF-8
调用栈:
0xb510887f libhtpcrash.so!0x587f,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50acd00 libart.so!nterp_helper+0x850,0xe50acfa4 libart.so!nterp_helper+0xaf4,0xe50acfa4 libart.so!nterp_helper+0xaf4,0xe50b13d7 libart.so!art_quick_invoke_stub_internal+0x46,0xe54c476f libart.so!art_quick_invoke_stub+0x11e,0xe51065a5 libart.so!_ZN3art9ArtMethod6InvokeEPNS_6ThreadEPjjPNS_6JValueEPKc+0x8c,0xe520ce2f libart.so!_ZN3art11interpreter34ArtInterpreterToCompiledCodeBridgeEPNS_6ThreadEPNS_9ArtMethodEPNS_11ShadowFrameEtPNS_6JValueE+0x116,0xe520914f libart.so!_ZN3art11interpreter6DoCallILb1ELb0EEEbPNS_9ArtMethodEPNS_6ThreadERNS_11ShadowFrameEPKNS_11InstructionEtPNS_6JValueE+0x232,0xe54a931b libart.so!MterpInvokeVirtualRange+0x38a,0xe509ed18 libart.so!mterp_op_invoke_virtual_range+0x18,0xe5201e05 libart.so!_ZN3art11interpreterL7ExecuteEPNS_6ThreadERKNS_20CodeItemDataAccessorERNS_11ShadowFrameENS_6JValueEbb+0xc8,0xe5207b75 libart.so!_ZN3art11interpreter33ArtInterpreterToInterpreterBridgeEPNS_6ThreadERKNS_20CodeItemDataAccessorEPNS_11ShadowFrameEPNS_6JValueE+0x94,0xe5208369 libart.so!_ZN3art11interpreter6DoCallILb0ELb0EEEbPNS_9ArtMethodEPNS_6ThreadERNS_11ShadowFrameEPKNS_11InstructionEtPNS_6JValueE+0x288,0xe54b1f25 libart.so!MterpInvokeStatic+0x3bc
[JNIEnv] GetStringUTFChars 返回: /data/app/~~hYKtoZqlctb0dKGf8OSOKQ==/com.sytt.tzy-YAzL_LiSSbrdnOTT58XTsA==/lib/arm

[JNIEnv] 调用: GetStringUTFChars
  参数:  ��
调用栈:
0xb53a7a14 libsecsdk.so!0x64a14,0xb53a82d0 libsecsdk.so!0x652d0,0xb53aa204 libsecsdk.so!0x67204,0xb539c834 libsecsdk.so!0x59834,0xb53553d8 libsecsdk.so!0x123d8,0xb534cc34 libsecsdk.so!0x9c34,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50ac560 libart.so!nterp_helper+0xb0,0xe50b13d7 libart.so!art_quick_invoke_stub_internal+0x46,0xe54c48a9 libart.so!art_quick_invoke_static_stub+0x120,0xe51065b7 libart.so!_ZN3art9ArtMethod6InvokeEPNS_6ThreadEPjjPNS_6JValueEPKc+0x9e,0xe53c315f libart.so!_ZN3art17InvokeWithJValuesIPNS_9ArtMethodEEENS_6JValueERKNS_33ScopedObjectAccessAlreadyRunnableEP8_jobjectT_PK6jvalue+0x162,0xe53c3333 libart.so!_ZN3art17InvokeWithJValuesIP10_jmethodIDEENS_6JValueERKNS_33ScopedObjectAccessAlreadyRunnableEP8_jobjectT_PK6jvalue+0x2e,0xe528f487 libart.so!_ZN3art3JNIILb0EE23CallStaticObjectMethodAEP7_JNIEnvP7_jclassP10_jmethodIDPK6jvalue+0x1d2,0xb53b0d54 libsecsdk.so!0x6dd54,0xb539cd94 libsecsdk.so!0x59d94

[JNIEnv] 调用: NewStringUTF
  参数: UTF-8
调用栈:
0xb5108897 libhtpcrash.so!0x5897,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50acd00 libart.so!nterp_helper+0x850,0xe50acfa4 libart.so!nterp_helper+0xaf4,0xe50acfa4 libart.so!nterp_helper+0xaf4,0xe50b13d7 libart.so!art_quick_invoke_stub_internal+0x46,0xe54c476f libart.so!art_quick_invoke_stub+0x11e,0xe51065a5 libart.so!_ZN3art9ArtMethod6InvokeEPNS_6ThreadEPjjPNS_6JValueEPKc+0x8c,0xe520ce2f libart.so!_ZN3art11interpreter34ArtInterpreterToCompiledCodeBridgeEPNS_6ThreadEPNS_9ArtMethodEPNS_11ShadowFrameEtPNS_6JValueE+0x116,0xe520914f libart.so!_ZN3art11interpreter6DoCallILb1ELb0EEEbPNS_9ArtMethodEPNS_6ThreadERNS_11ShadowFrameEPKNS_11InstructionEtPNS_6JValueE+0x232,0xe54a931b libart.so!MterpInvokeVirtualRange+0x38a,0xe509ed18 libart.so!mterp_op_invoke_virtual_range+0x18,0xe5201e05 libart.so!_ZN3art11interpreterL7ExecuteEPNS_6ThreadERKNS_20CodeItemDataAccessorERNS_11ShadowFrameENS_6JValueEbb+0xc8,0xe5207b75 libart.so!_ZN3art11interpreter33ArtInterpreterToInterpreterBridgeEPNS_6ThreadERKNS_20CodeItemDataAccessorEPNS_11ShadowFrameEPNS_6JValueE+0x94,0xe5208369 libart.so!_ZN3art11interpreter6DoCallILb0ELb0EEEbPNS_9ArtMethodEPNS_6ThreadERNS_11ShadowFrameEPKNS_11InstructionEtPNS_6JValueE+0x288,0xe54b1f25 libart.so!MterpInvokeStatic+0x3bc
[JNIEnv] GetStringUTFChars 返回: /storage/emulated/0/Android/data/com.sytt.tzy/files/neCrash

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x71
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: ^com\.netease.\necrash.\demo$

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x89
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: ^Signal Catcher$

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x99
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: ^Jit thread pool$

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0xa5
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: .*(R|r)ender.*

[JNIEnv] 调用: GetStringUTFChars
[JNIEnv] GetStringUTFChars 返回: .*Chrome.*
Error: access violation accessing 0xb5
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)

[JNIEnv] 调用: GetStringUTFChars
  参数:  ��
调用栈:
0xb53a7bd4 libsecsdk.so!0x64bd4,0xb53a830c libsecsdk.so!0x6530c,0xb53aa204 libsecsdk.so!0x67204,0xb539c834 libsecsdk.so!0x59834,0xb53553d8 libsecsdk.so!0x123d8,0xb534cc34 libsecsdk.so!0x9c34,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50ac560 libart.so!nterp_helper+0xb0,0xe50b13d7 libart.so!art_quick_invoke_stub_internal+0x46,0xe54c48a9 libart.so!art_quick_invoke_static_stub+0x120,0xe51065b7 libart.so!_ZN3art9ArtMethod6InvokeEPNS_6ThreadEPjjPNS_6JValueEPKc+0x9e,0xe53c315f libart.so!_ZN3art17InvokeWithJValuesIPNS_9ArtMethodEEENS_6JValueERKNS_33ScopedObjectAccessAlreadyRunnableEP8_jobjectT_PK6jvalue+0x162,0xe53c3333 libart.so!_ZN3art17InvokeWithJValuesIP10_jmethodIDEENS_6JValueERKNS_33ScopedObjectAccessAlreadyRunnableEP8_jobjectT_PK6jvalue+0x2e,0xe528f487 libart.so!_ZN3art3JNIILb0EE23CallStaticObjectMethodAEP7_JNIEnvP7_jclassP10_jmethodIDPK6jvalue+0x1d2,0xb53b0d54 libsecsdk.so!0x6dd54,0xb539cd94 libsecsdk.so!0x59d94

[JNIEnv] 调用: GetStringUTFChars
  参数: �R�
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /storage/emulated/0/Android/data/com.sytt.tzy/files/neCrash

[JNIEnv] 调用: GetStringUTFChars
  参数:  ��
调用栈:
0xda7a2c27 libopenjdk.so!Java_java_io_UnixFileSystem_getBooleanAttributes0+0x22,0x70e65c27 boot.oat!0xa7c27
[JNIEnv] GetStringUTFChars 返回: /storage/emulated/0/Android/data/com.sytt.tzy/files/neCrash

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x75
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: /storage/emulated/0/Android/data/com.sytt.tzy/files/neCrash

[JNIEnv] 调用: GetStringUTFChars
  参数: (�
调用栈:
0xda7a9105 libopenjdk.so!Mock_getProperty+0x2c,0x70e653e3 boot.oat!0xa73e3
[JNIEnv] GetStringUTFChars 返回: lsp.Identifier.AAID

[JNIEnv] 调用: NewStringUTF
  参数: 
调用栈:
0xda7e2b8f libjavacore.so!0x1bb8f,0x71166d05 boot-core-libart.oat!0x10d05
[JNIEnv] GetStringUTFChars 返回: /data/app/~~hYKtoZqlctb0dKGf8OSOKQ==/com.sytt.tzy-YAzL_LiSSbrdnOTT58XTsA==/lib/arm/libNetHTProtect.so

[JNIEnv] 调用: GetStringUTFChars
  参数: (� �
调用栈:
0xda745fcd libopenjdkjvm.so!JVM_NativeLoad+0x2c,0x70e65741 boot.oat!0xa7741
[JNIEnv] GetStringUTFChars 返回: /data/app/~~hYKtoZqlctb0dKGf8OSOKQ==/com.sytt.tzy-YAzL_LiSSbrdnOTT58XTsA==/lib/arm/libNetHTProtect.so

[JNIEnv] 调用: GetStringUTFChars
  参数: `��P���X�H��,X�����И�XT�`��P���X����И�XT�`��P���X����!!L�
调用栈:
0xda7a9141 libopenjdk.so!Mock_getProperty+0x68,0x70e653e3 boot.oat!0xa73e3

[JNIEnv] 调用: GetStringUTFChars
  参数: ;�@X�4K-�$K-�`�
��X��tW��
调用栈:
0xb4f99e3d libNetHTProtect.so!0x159e3d,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50ad010 libart.so!nterp_helper+0xb60,0xe50acfa4 libart.so!nterp_helper+0xaf4,0xe50b13d7 libart.so!art_quick_invoke_stub_internal+0x46,0xe54c48a9 libart.so!art_quick_invoke_static_stub+0x120,0xe51065b7 libart.so!_ZN3art9ArtMethod6InvokeEPNS_6ThreadEPjjPNS_6JValueEPKc+0x9e,0xe520ce2f libart.so!_ZN3art11interpreter34ArtInterpreterToCompiledCodeBridgeEPNS_6ThreadEPNS_9ArtMethodEPNS_11ShadowFrameEtPNS_6JValueE+0x116,0xe520837d libart.so!_ZN3art11interpreter6DoCallILb0ELb0EEEbPNS_9ArtMethodEPNS_6ThreadERNS_11ShadowFrameEPKNS_11InstructionEtPNS_6JValueE+0x29c,0xe54b1f25 libart.so!MterpInvokeStatic+0x3bc,0xe509eb98 libart.so!mterp_op_invoke_static+0x18,0xe5201e05 libart.so!_ZN3art11interpreterL7ExecuteEPNS_6ThreadERKNS_20CodeItemDataAccessorERNS_11ShadowFrameENS_6JValueEbb+0xc8,0xe5207aa9 libart.so!_ZN3art11interpreter30EnterInterpreterFromEntryPointEPNS_6ThreadERKNS_20CodeItemDataAccessorEPNS_11ShadowFrameE+0x8c,0xe5499c25 libart.so!artQuickToInterpreterBridge+0x2a4,0xe50b5f25 libart.so!art_quick_to_interpreter_bridge+0x24,0xe50ac560 libart.so!nterp_helper+0xb0
[JNIEnv] GetStringUTFChars 返回: YD00426203900572

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x71
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: com.yhxxl.tzy

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x75
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: {}

[JNIEnv] 调用: GetStringUTFChars
  参数: p�
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: json

[JNIEnv] 调用: GetStringUTFChars
  参数: @X�4K-�$K-�`�
��X��tW��
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy

[JNIEnv] 调用: GetStringUTFChars
  参数: ��
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: oaid = 739f0aa330ad82f9
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/files

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x79
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/files

[JNIEnv] 调用: GetStringUTFChars
  参数: x�

[JNIEnv] 调用: NewStringUTF
  参数: null
调用栈:
0xda7e2b8f libjavacore.so!0x1bb8f,0x71166d05 boot-core-libart.oat!0x10d05
[JNIEnv] GetStringUTFChars 返回: /proc/self/maps

[JNIEnv] 调用: GetStringUTFChars
  参数: 8U�r8h�p�5�
调用栈:
0xe5407303 libart.so!_ZN3art6Thread10CreatePeerEPKcbP8_jobject+0x4a,0xe5404f2b libart.so!_ZN3art6Thread6AttachEPKcbP8_jobjectb+0x16a,0xe53c7d4b libart.so!_ZN3art7Runtime19AttachCurrentThreadEPKcbP8_jobjectb+0x32,0xe52655e3 libart.so!_ZN3art3JII27AttachCurrentThreadInternalEP7_JavaVMPP7_JNIEnvPvb+0xea,0xb4f36e69 libNetHTProtect.so!0xf6e69,0xb4f36f15 libNetHTProtect.so!0xf6f15,0xb4f37007 libNetHTProtect.so!0xf7007,0xb4fbc939 libNetHTProtect.so!0x17c939,0xb4fc9bd5 libNetHTProtect.so!0x189bd5,0xb4fc9afd libNetHTProtect.so!0x189afd,0xb4fc9a5b libNetHTProtect.so!0x189a5b,0xb4e85e69 libNetHTProtect.so!0x45e69,0xb4ff500f libNetHTProtect.so!0x1b500f,0xb4ff4c3d libNetHTProtect.so!0x1b4c3d,0xb4f9d63f libNetHTProtect.so!0x15d63f,0xe6387139 libc.so!_ZL15__pthread_startPv+0x2a

[JNIEnv] 调用: NewStringUTF
  参数: com.netease.htprotect.poly.a
调用栈:
0xdc22e867 libicu_jni.so!0x8867,0x72677869 boot-core-icu4j.oat!0x2e869
[JNIEnv] GetStringUTFChars 返回: UTF-8

[JNIEnv] 调用: GetStringUTFChars
  参数: �d�
调用栈:
0xb4f38341 libNetHTProtect.so!0xf8341,0xb4edce8f libNetHTProtect.so!0x9ce8f,0xb4edc187 libNetHTProtect.so!0x9c187,0xb4fd006b libNetHTProtect.so!0x19006b,0xb4fd8b43 libNetHTProtect.so!0x198b43,0xb4fda039 libNetHTProtect.so!0x19a039,0xb4ff4ce9 libNetHTProtect.so!0x1b4ce9,0xb4f9d63f libNetHTProtect.so!0x15d63f,0xe6387139 libc.so!_ZL15__pthread_startPv+0x2a,0xe633fd57 libc.so!__start_thread+0x20

[JNIEnv] 调用: GetStringUTFChars
  参数: �
调用栈:
0xda7e2b8f libjavacore.so!0x1bb8f,0x71166d05 boot-core-libart.oat!0x10d05
[JNIEnv] GetStringUTFChars 返回: /system/build.prop

[JNIEnv] 调用: NewStringUTF
  参数: open
调用栈:
0xe534c0fd libart.so!_ZN3artL29VMClassLoader_findLoadedClassEP7_JNIEnvP7_jclassP8_jobjectP8_jstring+0x40,0x711656bb boot-core-libart.oat!0xf6bb
[JNIEnv] GetStringUTFChars 返回: com.netease.htprotect.poly.a

[JNIEnv] 调用: GetStringUTFChars
  参数: �
调用栈:
0xda7e2bc3 libjavacore.so!0x1bbc3,0x71166d05 boot-core-libart.oat!0x10d05

[JNIEnv] 调用: NewStringUTF
  参数: Permission denied
调用栈:
0xe534c0fd libart.so!_ZN3artL29VMClassLoader_findLoadedClassEP7_JNIEnvP7_jclassP8_jobjectP8_jstring+0x40,0x711656bb boot-core-libart.oat!0xf6bb
[JNIEnv] GetStringUTFChars 返回: com.netease.htprotect.poly.a

[JNIEnv] 调用: GetStringUTFChars
  参数: �
调用栈:
0xda7e6703 libjavacore.so!0x1f703,0x71166c91 boot-core-libart.oat!0x10c91

[JNIEnv] 调用: GetStringUTFChars
  参数: p�
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.netease.htprotect.poly.a

[JNIEnv] 调用: GetStringUTFChars
  参数: �
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy

[JNIEnv] 调用: GetStringUTFChars
  参数: 
调用栈:
0xe533390b libart.so!_ZN3artL25DexFile_defineClassNativeEP7_JNIEnvP7_jclassP8_jstringP8_jobjectS7_S7_+0x52,0x711641b3 boot-core-libart.oat!0xe1b3
[JNIEnv] GetStringUTFChars 返回: com.netease.htprotect.poly.a

[JNIEnv] 调用: GetStringUTFChars
  参数: �
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/files

[JNIEnv] 调用: GetStringUTFChars
  参数: �p�
调用栈:
0xe533390b libart.so!_ZN3artL25DexFile_defineClassNativeEP7_JNIEnvP7_jclassP8_jstringP8_jobjectS7_S7_+0x52,0x711641b3 boot-core-libart.oat!0xe1b3
[JNIEnv] GetStringUTFChars 返回: com.netease.htprotect.poly.a

[JNIEnv] 调用: NewStringUTF
  参数: Content-Type
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/files/.motion/libxt_a.so

[JNIEnv] 调用: GetStringUTFChars
  参数: �p�h_�p0Z�p(h�ph�Kq8h�ph�Kqh�Kq
调用栈:
0xb4f38341 libNetHTProtect.so!0xf8341,0xb4fd8957 libNetHTProtect.so!0x198957,0xb4fd8fa7 libNetHTProtect.so!0x198fa7,0xb4fda039 libNetHTProtect.so!0x19a039,0xb4ff4ce9 libNetHTProtect.so!0x1b4ce9,0xb4f9d63f libNetHTProtect.so!0x15d63f,0xe6387139 libc.so!_ZL15__pthread_startPv+0x2a,0xe633fd57 libc.so!__start_thread+0x20

[JNIEnv] 调用: NewStringUTF
  参数: application/octet-stream;charset=utf-8
调用栈:
0xda7e4143 libjavacore.so!0x1d143,0x71164e9f boot-core-libart.oat!0xee9f
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/files/.motion/libxt_a.so

[JNIEnv] 调用: GetStringUTFChars
  参数: �q�
调用栈:
0xb4f38341 libNetHTProtect.so!0xf8341,0xb4fd8961 libNetHTProtect.so!0x198961,0xb4fd8fa7 libNetHTProtect.so!0x198fa7,0xb4fda039 libNetHTProtect.so!0x19a039,0xb4ff4ce9 libNetHTProtect.so!0x1b4ce9,0xb4f9d63f libNetHTProtect.so!0x15d63f,0xe6387139 libc.so!_ZL15__pthread_startPv+0x2a,0xe633fd57 libc.so!__start_thread+0x20

[JNIEnv] 调用: NewStringUTF
  参数: https://ir-sdk.dun.163.com/v4/c
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/files/.motion

[JNIEnv] 调用: GetStringUTFChars
  参数: �l�
调用栈:
0xb4f38341 libNetHTProtect.so!0xf8341,0xb4fda9df libNetHTProtect.so!0x19a9df,0xb4fd935f libNetHTProtect.so!0x19935f,0xb4fd9043 libNetHTProtect.so!0x199043,0xb4fda039 libNetHTProtect.so!0x19a039,0xb4ff4ce9 libNetHTProtect.so!0x1b4ce9,0xb4f9d63f libNetHTProtect.so!0x15d63f,0xe6387139 libc.so!_ZL15__pthread_startPv+0x2a,0xe633fd57 libc.so!__start_thread+0x20

[JNIEnv] 调用: GetStringUTFChars
  参数: �Q�p
调用栈:
0xe72b4f7d libandroid_runtime.so!0xf0f7d,0x71fbac03 boot-framework.oat!0x186c03
[JNIEnv] GetStringUTFChars 返回: motion/libxt3.0_a.so

[JNIEnv] 调用: GetStringUTFChars
  参数: �p�A
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.android.okhttp.HttpsHandler

[JNIEnv] 调用: GetStringUTFChars
  参数: �Q�p
调用栈:
0xda7e2b8f libjavacore.so!0x1bb8f,0x71166d05 boot-core-libart.oat!0x10d05
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/files/.motion/libxt_a.so

[JNIEnv] 调用: GetStringUTFChars
  参数: (��
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.android.okhttp.internal.tls.OkHostnameVerifier

[JNIEnv] 调用: GetStringUTFChars
  参数: `��p
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: android.os.SystemProperties

[JNIEnv] 调用: GetStringUTFChars
  参数: ������piR�$�����q
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.android.org.conscrypt.OpenSSLSocketFactoryImpl

[JNIEnv] 调用: GetStringUTFChars
  参数: ���r
调用栈:
0xe723de83 libandroid_runtime.so!0x79e83,0x71fcdccb boot-framework.oat!0x199ccb
[JNIEnv] GetStringUTFChars 返回: debug.umeng.rtlog

[JNIEnv] 调用: GetStringUTFChars
  参数: ��
调用栈:
0xe534c0fd libart.so!_ZN3artL29VMClassLoader_findLoadedClassEP7_JNIEnvP7_jclassP8_jobjectP8_jstring+0x40,0x711656bb boot-core-libart.oat!0xf6bb
[JNIEnv] GetStringUTFChars 返回: com.android.org.conscrypt.DefaultSSLContextImpl$TLSv13

[JNIEnv] 调用: GetStringUTFChars
  参数: �s�r
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/files

[JNIEnv] 调用: GetStringUTFChars
  参数: p��
调用栈:
0xe534c0fd libart.so!_ZN3artL29VMClassLoader_findLoadedClassEP7_JNIEnvP7_jclassP8_jobjectP8_jstring+0x40,0x711656bb boot-core-libart.oat!0xf6bb
[JNIEnv] GetStringUTFChars 返回: com.android.org.conscrypt.KeyManagerFactoryImpl

[JNIEnv] 调用: GetStringUTFChars
  参数:  '�
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/files/umeng_zcfg_flag

[JNIEnv] 调用: GetStringUTFChars
  参数: ��
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: java.security.KeyStoreSpi

[JNIEnv] 调用: GetStringUTFChars
  参数: (�tr
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/files

[JNIEnv] 调用: GetStringUTFChars
  参数: ���
调用栈:
0xe534c0fd libart.so!_ZN3artL29VMClassLoader_findLoadedClassEP7_JNIEnvP7_jclassP8_jobjectP8_jstring+0x40,0x711656bb boot-core-libart.oat!0xf6bb
[JNIEnv] GetStringUTFChars 返回: com.android.org.bouncycastle.jcajce.provider.keystore.bc.BcKeyStoreSpi$Std

[JNIEnv] 调用: GetStringUTFChars
  参数: He�
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/files/.imprint

[JNIEnv] 调用: GetStringUTFChars
  参数: ���B
调用栈:
0xe534c0fd libart.so!_ZN3artL29VMClassLoader_findLoadedClassEP7_JNIEnvP7_jclassP8_jobjectP8_jstring+0x40,0x711656bb boot-core-libart.oat!0xf6bb
[JNIEnv] GetStringUTFChars 返回: android.security.net.config.RootTrustManagerFactorySpi

[JNIEnv] 调用: GetStringUTFChars
  参数: ���r
调用栈:
0xda7e2b8f libjavacore.so!0x1bb8f,0x71166d05 boot-core-libart.oat!0x10d05
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/files/.imprint

[JNIEnv] 调用: GetStringUTFChars
  参数: ��
调用栈:
0xe534c0fd libart.so!_ZN3artL29VMClassLoader_findLoadedClassEP7_JNIEnvP7_jclassP8_jobjectP8_jstring+0x40,0x711656bb boot-core-libart.oat!0xf6bb
[JNIEnv] GetStringUTFChars 返回: com.android.org.conscrypt.OpenSSLContextImpl$TLSv13

[JNIEnv] 调用: GetStringUTFChars
  参数:  I�(M�
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/files

[JNIEnv] 调用: GetStringUTFChars
  参数: @��
调用栈:
0xda7de4d5 libjavacore.so!0x174d5,0x711667f3 boot-core-libart.oat!0x107f3
[JNIEnv] GetStringUTFChars 返回: ir-sdk.dun.163.com

[JNIEnv] 调用: NewStringUTF
  参数: android_getaddrinfo
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/files/.imprint

[JNIEnv] 调用: GetStringUTFChars
  参数: ��
调用栈:
0xda7e783d libjavacore.so!0x2083d,0xda7de5ad libjavacore.so!0x175ad,0x711667f3 boot-core-libart.oat!0x107f3

[JNIEnv] 调用: GetStringUTFChars
  参数:  I�pO�
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/files

[JNIEnv] 调用: GetStringUTFChars
  参数: ���
调用栈:
0xda7de4d5 libjavacore.so!0x174d5,0x711667f3 boot-core-libart.oat!0x107f3
[JNIEnv] GetStringUTFChars 返回: ir-sdk.dun.163.com
调用栈:
0xda7e2b8f libjavacore.so!0x1bb8f,0x71166d05 boot-core-libart.oat!0x10d05
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/files/.imprint

[JNIEnv] 调用: GetStringUTFChars
  参数: `��

[JNIEnv] 调用: NewStringUTF
  参数: connect
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.message.PushAgent

[JNIEnv] 调用: GetStringUTFChars
  参数: ���
调用栈:
0xda7df827 libjavacore.so!0x18827,0x71166873 boot-core-libart.oat!0x10873

[JNIEnv] 调用: GetStringUTFChars
[JNIEnv] GetStringUTFChars 返回: TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
Error: access violation accessing 0x25
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)

[JNIEnv] 调用: GetStringUTFChars
[JNIEnv] GetStringUTFChars 返回: TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
Error: access violation accessing 0x29
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x21
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x25
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x29
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x21
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x25
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x29
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x21
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x25
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x29
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: TLS_RSA_WITH_AES_128_GCM_SHA256

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x21
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: TLS_RSA_WITH_AES_256_GCM_SHA384

[JNIEnv] 调用: GetStringUTFChars
[JNIEnv] GetStringUTFChars 返回: TLS_RSA_WITH_AES_128_CBC_SHA

[JNIEnv] 调用: GetStringUTFChars
[JNIEnv] GetStringUTFChars 返回: TLS_RSA_WITH_AES_256_CBC_SHA
Error: access violation accessing 0x25
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
Error: access violation accessing 0x29
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x21
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x25
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x29
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x21
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x25
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x29
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x21
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x25
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x29
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x21
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x25
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: TLS_RSA_WITH_AES_128_GCM_SHA256

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x29
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: TLS_RSA_WITH_AES_256_GCM_SHA384

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x21
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: TLS_RSA_WITH_AES_128_CBC_SHA

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x25
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: TLS_RSA_WITH_AES_256_CBC_SHA

[JNIEnv] 调用: GetStringUTFChars
  参数: Ш�
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.socialize.Config

[JNIEnv] 调用: GetStringUTFChars
  参数: ���
调用栈:
0xd04307ed libjavacrypto.so!0x287ed,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50acc50 libart.so!nterp_helper+0x7a0,0xe50acfa4 libart.so!nterp_helper+0xaf4,0xe50acfa4 libart.so!nterp_helper+0xaf4,0xe50acfa4 libart.so!nterp_helper+0xaf4,0x711d6317 boot-okhttp.oat!0x33317
[JNIEnv] GetStringUTFChars 返回: ir-sdk.dun.163.com
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.umcrash.UMCrash

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x75
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: com.sytt.tzy.UnityPlayerActivity

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x79
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: performCreate

[JNIEnv] 调用: GetStringUTFChars
  参数: ��

[JNIEnv] 调用: NewStringUTF
  参数: ECDHE_RSA
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/files

[JNIEnv] 调用: GetStringUTFChars
  参数: ��
调用栈:
0xd0437f4f libjavacrypto.so!0x2ff4f,0xd02d8cf5 libssl.so!0x12cf5,0xd02da027 libssl.so!0x14027,0xd02d940f libssl.so!0x1340f,0xd02e6c87 libssl.so!SSL_do_handshake+0x42,0xd02e70ef libssl.so!0x210ef,0xd02e6f89 libssl.so!SSL_read+0x30,0xd043360b libjavacrypto.so!0x2b60b,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50acf5c libart.so!nterp_helper+0xaac,0xe50acfa4 libart.so!nterp_helper+0xaf4,0xe50acfa4 libart.so!nterp_helper+0xaf4,0xe50acfa4 libart.so!nterp_helper+0xaf4,0xe50ad6ac libart.so!nterp_helper+0x11fc,0xe50acfa4 libart.so!nterp_helper+0xaf4,0xe50acfa4 libart.so!nterp_helper+0xaf4

[JNIEnv] 调用: GetStringUTFChars
  参数: (�tr,���@*�pX��r
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/files

[JNIEnv] 调用: GetStringUTFChars
  参数: p�
调用栈:
0xe534c0fd libart.so!_ZN3artL29VMClassLoader_findLoadedClassEP7_JNIEnvP7_jclassP8_jobjectP8_jstring+0x40,0x711656bb boot-core-libart.oat!0xf6bb
[JNIEnv] GetStringUTFChars 返回: sun.security.provider.certpath.PKIXCertPathValidator

[JNIEnv] 调用: GetStringUTFChars
  参数: ��Oq
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy

[JNIEnv] 调用: GetStringUTFChars
  参数: 0Q�
调用栈:
0xda7e0719 libjavacore.so!0x19719,0x7116694f boot-core-libart.oat!0x1094f
[JNIEnv] GetStringUTFChars 返回: ANDROID_DATA

[JNIEnv] 调用: NewStringUTF
  参数: /data
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs

[JNIEnv] 调用: GetStringUTFChars
  参数: ��Qq
调用栈:
0xda7e072d libjavacore.so!0x1972d,0x7116694f boot-core-libart.oat!0x1094f

[JNIEnv] 调用: GetStringUTFChars
  参数: @��
调用栈:
0xe723e147 libandroid_runtime.so!0x7a147,0x71fcdc41 boot-framework.oat!0x199c41
[JNIEnv] GetStringUTFChars 返回: cache_key.is_user_unlocked

[JNIEnv] 调用: GetStringUTFChars
  参数: (Y�
调用栈:
0xda7e2b8f libjavacore.so!0x1bb8f,0x71166d05 boot-core-libart.oat!0x10d05
[JNIEnv] GetStringUTFChars 返回: /data/misc/keychain/pubkey_blacklist.txt

[JNIEnv] 调用: NewStringUTF
  参数: open
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/umeng_general_config.xml.bak

[JNIEnv] 调用: NewStringUTF
  参数: access
调用栈:
0xda7e2bc3 libjavacore.so!0x1bbc3,0x71166d05 boot-core-libart.oat!0x10d05

[JNIEnv] 调用: NewStringUTF
  参数: No such file or directory
调用栈:
0xda7de385 libjavacore.so!0x17385,0x7116659b boot-core-libart.oat!0x1059b

[JNIEnv] 调用: GetStringUTFChars
  参数: xR�
调用栈:
0xda7e6703 libjavacore.so!0x1f703,0x71166c91 boot-core-libart.oat!0x10c91

[JNIEnv] 调用: GetStringUTFChars
  参数: ���
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/umeng_general_config.xml

[JNIEnv] 调用: GetStringUTFChars
  参数: xR�
调用栈:
0xda7e2b8f libjavacore.so!0x1bb8f,0x71166d05 boot-core-libart.oat!0x10d05
[JNIEnv] GetStringUTFChars 返回: /data/misc/keychain/serial_blacklist.txt

[JNIEnv] 调用: NewStringUTF
  参数: open
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/umeng_general_config.xml

[JNIEnv] 调用: GetStringUTFChars
  参数: xR�h_�p0Z�p(h�ph�Kq8h�ph�Kqh�Kq��c�wu�pZ�p�5��5�xR�h�Kq��c�t�c����q�Mtq�5���r R�0W���c�t�c��A�pxR��5�0W���qP��p�5� V�0W��U��U�xR��,r�xq
调用栈:
0xda7e2bc3 libjavacore.so!0x1bbc3,0x71166d05 boot-core-libart.oat!0x10d05

[JNIEnv] 调用: NewStringUTF
  参数: No such file or directory
调用栈:
0xda7e8c87 libjavacore.so!0x21c87,0x7116694f boot-core-libart.oat!0x1094f
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/umeng_general_config.xml

[JNIEnv] 调用: GetStringUTFChars
  参数: xR�
调用栈:
0xda7e6703 libjavacore.so!0x1f703,0x71166c91 boot-core-libart.oat!0x10c91

[JNIEnv] 调用: GetStringUTFChars
  参数: ��Oq
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/umeng_general_config.xml

[JNIEnv] 调用: GetStringUTFChars
  参数: xR�
调用栈:
0xda7e0719 libjavacore.so!0x19719,0x7116694f boot-core-libart.oat!0x1094f
[JNIEnv] GetStringUTFChars 返回: ANDROID_DATA

[JNIEnv] 调用: NewStringUTF
  参数: /data
调用栈:
0xda7e2b8f libjavacore.so!0x1bb8f,0x71166d05 boot-core-libart.oat!0x10d05
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/umeng_general_config.xml

[JNIEnv] 调用: GetStringUTFChars
  参数: 8U�r�A9
调用栈:
0xda7e072d libjavacore.so!0x1972d,0x7116694f boot-core-libart.oat!0x1094f

[JNIEnv] 调用: GetStringUTFChars
  参数: ШOq��pD��4��ШOq�5�
调用栈:
0xdc22e867 libicu_jni.so!0x8867,0x72677869 boot-core-icu4j.oat!0x2e869
[JNIEnv] GetStringUTFChars 返回: UTF-8

[JNIEnv] 调用: GetStringUTFChars
  参数: ���a�[��[��`�
�,M��
调用栈:
0xda7e0719 libjavacore.so!0x19719,0x7116694f boot-core-libart.oat!0x1094f
[JNIEnv] GetStringUTFChars 返回: ANDROID_ROOT

[JNIEnv] 调用: NewStringUTF
  参数: /system
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: UMLog

[JNIEnv] 调用: GetStringUTFChars
  参数: a�[��[��`�
�,M��
调用栈:
0xda7e072d libjavacore.so!0x1972d,0x7116694f boot-core-libart.oat!0x1094f

[JNIEnv] 调用: GetStringUTFChars
  参数: ���r���@*�px��rX��r���p���r0��r���p��pP��p
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 统计SDK常见问题索引贴 详见链接 http://developer.umeng.com/docs/66650/cate/66650
[*] JSONObject.put called with key: id, value: $$_onUMengEnterForeground

[JNIEnv] 调用: NewStringUTF
  参数: id
调用栈:
0xe534c0fd libart.so!_ZN3artL29VMClassLoader_findLoadedClassEP7_JNIEnvP7_jclassP8_jobjectP8_jstring+0x40,0x711656bb boot-core-libart.oat!0xf6bb
[JNIEnv] GetStringUTFChars 返回: com.android.org.conscrypt.OpenSSLMessageDigestJDK$SHA256

[JNIEnv] 调用: GetStringUTFChars
  参数: @1��k�øX�����@1�
调用栈:
0xd04247bf libjavacrypto.so!0x1c7bf,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50ac560 libart.so!nterp_helper+0xb0,0xe50b13d7 libart.so!art_quick_invoke_stub_internal+0x46,0xe54c48a9 libart.so!art_quick_invoke_static_stub+0x120,0xe51065b7 libart.so!_ZN3art9ArtMethod6InvokeEPNS_6ThreadEPjjPNS_6JValueEPKc+0x9e,0xe512d9cd libart.so!_ZN3art11ClassLinker15InitializeClassEPNS_6ThreadENS_6HandleINS_6mirror5ClassEEEbb+0x870,0xe5112ba9 libart.so!_ZN3art11ClassLinker17EnsureInitializedEPNS_6ThreadENS_6HandleINS_6mirror5ClassEEEbb+0x58,0xe54c21d5 libart.so!NterpGetStaticField+0x110,0xe50b0785 libart.so!nterp_get_static_field+0x24,0xe50ac248 libart.so!nterp_op_sget_wide_helper+0x18,0xe50b13d7 libart.so!art_quick_invoke_stub_internal+0x46,0xe54c476f libart.so!art_quick_invoke_stub+0x11e,0xe51065a5 libart.so!_ZN3art9ArtMethod6InvokeEPNS_6ThreadEPjjPNS_6JValueEPKc+0x8c,0xe53c39eb libart.so!_ZN3art17InvokeConstructorERKNS_33ScopedObjectAccessAlreadyRunnableEPNS_9ArtMethodENS_6ObjPtrINS_6mirror6ObjectEEEP8_jobject+0x196,0xe534d5c3 libart.so!_ZN3artL24Constructor_newInstance0EP7_JNIEnvP8_jobjectP13_jobjectArray+0x14a
[JNIEnv] GetStringUTFChars 返回: sha256
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�������Ur�g�q

[JNIEnv] 调用: GetStringUTFChars
  参数: ��p��p���pq�p
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �������Ur�g�q
调用栈:
0xdc22dcd7 libicu_jni.so!0x7cd7,0x72677401 boot-core-icu4j.oat!0x2e401
[JNIEnv] GetStringUTFChars 返回: UTF8

[JNIEnv] 调用: NewStringUTF
  参数: UTF-8
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: id, value: $$_onUMengEnterForeground

[JNIEnv] 调用: GetStringUTFChars
  参数: �XqX��X�����Ur�g�q�|Wq��
调用栈:
0xdc22ec53 libicu_jni.so!0x8c53,0xdc22dd29 libicu_jni.so!0x7d29,0x72677401 boot-core-icu4j.oat!0x2e401

[JNIEnv] 调用: NewStringUTF
  参数: UTF-8
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: X��X�����Ur�g�q�|Wq��
调用栈:
0xdc22de65 libicu_jni.so!0x7e65,0x72677401 boot-core-icu4j.oat!0x2e401

[JNIEnv] 调用: NewStringUTF
  参数: UTF-8
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: ts, value: 1753607840582

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq؀�؀����Ur�g�q���
调用栈:
0xdc22de65 libicu_jni.so!0x7e65,0x72677401 boot-core-icu4j.oat!0x2e401

[JNIEnv] 调用: NewStringUTF
  参数: UTF-8
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: ؀�؀����Ur�g�q���
调用栈:
0xdc22de65 libicu_jni.so!0x7e65,0x72677401 boot-core-icu4j.oat!0x2e401

[JNIEnv] 调用: NewStringUTF
  参数: windows-65001
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: __t, value: 2049
[*] JSONObject.put called with key: activityName, value: com.sytt.tzy.UnityPlayerActivity@2b0757d

[JNIEnv] 调用: NewStringUTF
  参数: activityName
调用栈:
0xdc22de65 libicu_jni.so!0x7e65,0x72677401 boot-core-icu4j.oat!0x2e401

[JNIEnv] 调用: NewStringUTF
  参数: UTF-8
调用栈:
0xdc22de65 libicu_jni.so!0x7e65,0x72677401 boot-core-icu4j.oat!0x2e401

[JNIEnv] 调用: NewStringUTF
  参数: UTF-8
调用栈:
0xdc22df09 libicu_jni.so!0x7f09,0x72677401 boot-core-icu4j.oat!0x2e401

[JNIEnv] 调用: GetStringUTFChars
  参数: ���
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /system/etc/security/cacerts/e9ad52b9.0

[JNIEnv] 调用: NewStringUTF
  参数: access
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq���������Ur�g�q
调用栈:
0xda7de385 libjavacore.so!0x17385,0x7116659b boot-core-libart.oat!0x1059b

[JNIEnv] 调用: GetStringUTFChars
  参数: ���r
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: ���������Ur�g�q
调用栈:
0xe534c0fd libart.so!_ZN3artL29VMClassLoader_findLoadedClassEP7_JNIEnvP7_jclassP8_jobjectP8_jstring+0x40,0x711656bb boot-core-libart.oat!0xf6bb
[JNIEnv] GetStringUTFChars 返回: com.android.org.conscrypt.OpenSSLMessageDigestJDK$SHA1

[JNIEnv] 调用: GetStringUTFChars
  参数: 
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: activityName, value: com.sytt.tzy.UnityPlayerActivity@2b0757d
[*] JSONObject.put called with key: pid, value: 5547

[JNIEnv] 调用: NewStringUTF
  参数: pid
调用栈:
0xd04247bf libjavacrypto.so!0x1c7bf,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50ac560 libart.so!nterp_helper+0xb0,0xe50b13d7 libart.so!art_quick_invoke_stub_internal+0x46,0xe54c48a9 libart.so!art_quick_invoke_static_stub+0x120,0xe51065b7 libart.so!_ZN3art9ArtMethod6InvokeEPNS_6ThreadEPjjPNS_6JValueEPKc+0x9e,0xe512d9cd libart.so!_ZN3art11ClassLinker15InitializeClassEPNS_6ThreadENS_6HandleINS_6mirror5ClassEEEbb+0x870,0xe5112ba9 libart.so!_ZN3art11ClassLinker17EnsureInitializedEPNS_6ThreadENS_6HandleINS_6mirror5ClassEEEbb+0x58,0xe54c21d5 libart.so!NterpGetStaticField+0x110,0xe50b0785 libart.so!nterp_get_static_field+0x24,0xe50ac248 libart.so!nterp_op_sget_wide_helper+0x18,0xe50b13d7 libart.so!art_quick_invoke_stub_internal+0x46,0xe54c476f libart.so!art_quick_invoke_stub+0x11e,0xe51065a5 libart.so!_ZN3art9ArtMethod6InvokeEPNS_6ThreadEPjjPNS_6JValueEPKc+0x8c,0xe53c39eb libart.so!_ZN3art17InvokeConstructorERKNS_33ScopedObjectAccessAlreadyRunnableEPNS_9ArtMethodENS_6ObjPtrINS_6mirror6ObjectEEEP8_jobject+0x196,0xe534d5c3 libart.so!_ZN3artL24Constructor_newInstance0EP7_JNIEnvP8_jobjectP13_jobjectArray+0x14a
[JNIEnv] GetStringUTFChars 返回: sha1

[JNIEnv] 调用: GetStringUTFChars
  参数: ���
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /system/etc/security/cacerts/10711881.0

[JNIEnv] 调用: NewStringUTF
  参数: access
调用栈:
0xda7de385 libjavacore.so!0x17385,0x7116659b boot-core-libart.oat!0x1059b

[JNIEnv] 调用: NewStringUTF
  参数: 1.2.840.113549.1.1.11
调用栈:
0xd0428f17 libjavacrypto.so!0x20f17,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50acc50 libart.so!nterp_helper+0x7a0,0xe50acfa4 libart.so!nterp_helper+0xaf4,0xe50ac560 libart.so!nterp_helper+0xb0,0xe50ac560 libart.so!nterp_helper+0xb0,0xe50ad6ac libart.so!nterp_helper+0x11fc,0xe50ad6ac libart.so!nterp_helper+0x11fc,0xe50ad6ac libart.so!nterp_helper+0x11fc,0x722d5e3d boot-framework.oat!0x4a1e3d

[JNIEnv] 调用: GetStringUTFChars
  参数: P<�
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq@��@�����Ur�g�q
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /system/etc/security/cacerts/399e7759.0

[JNIEnv] 调用: GetStringUTFChars
  参数: �<�
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: @��@�����Ur�g�q
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/misc/user/0/cacerts-removed/399e7759.0

[JNIEnv] 调用: NewStringUTF
  参数: access
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: pid, value: 5547
[*] JSONObject.put called with key: isMainProcess, value: 1

[JNIEnv] 调用: NewStringUTF
  参数: isMainProcess
调用栈:
0xda7de385 libjavacore.so!0x17385,0x7116659b boot-core-libart.oat!0x1059b

[JNIEnv] 调用: GetStringUTFChars
  参数: p@�
调用栈:
0xda7e2b8f libjavacore.so!0x1bb8f,0x71166d05 boot-core-libart.oat!0x10d05
[JNIEnv] GetStringUTFChars 返回: /system/etc/security/cacerts/399e7759.0

[JNIEnv] 调用: GetStringUTFChars
  参数: ��
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /system/etc/security/cacerts/399e7759.1

[JNIEnv] 调用: NewStringUTF
  参数: access
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�������Ur�g�q 
调用栈:
0xda7de385 libjavacore.so!0x17385,0x7116659b boot-core-libart.oat!0x1059b

[JNIEnv] 调用: NewStringUTF
  参数: 1.2.840.113549.1.1.11
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �������Ur�g�q 
调用栈:
0xd0428f17 libjavacrypto.so!0x20f17,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50acc50 libart.so!nterp_helper+0x7a0,0xe50acfa4 libart.so!nterp_helper+0xaf4,0xe50ac560 libart.so!nterp_helper+0xb0,0xe50ac560 libart.so!nterp_helper+0xb0,0xe50ac560 libart.so!nterp_helper+0xb0,0xe50ad6ac libart.so!nterp_helper+0x11fc,0xe50ad6ac libart.so!nterp_helper+0x11fc,0xe50ad6ac libart.so!nterp_helper+0x11fc,0xe50ad6ac libart.so!nterp_helper+0x11fc,0xe50ad6ac libart.so!nterp_helper+0x11fc,0xe50ad6ac libart.so!nterp_helper+0x11fc,0x722d5e3d boot-framework.oat!0x4a1e3d

[JNIEnv] 调用: NewStringUTF
  参数: 1.2.840.113549.1.1.11
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: isMainProcess, value: 1
[*] JSONObject.put called with key: pairUUID, value: c4d960cc-e19d-4838-a9bd-46cde53bbc6e

[JNIEnv] 调用: NewStringUTF
  参数: pairUUID
调用栈:
0xd0428f17 libjavacrypto.so!0x20f17,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50acc50 libart.so!nterp_helper+0x7a0,0xe50acfa4 libart.so!nterp_helper+0xaf4,0xe50ac560 libart.so!nterp_helper+0xb0,0xe50ac560 libart.so!nterp_helper+0xb0,0xe50ac560 libart.so!nterp_helper+0xb0,0xe50ad6ac libart.so!nterp_helper+0x11fc,0xe50ad6ac libart.so!nterp_helper+0x11fc,0xe50ad6ac libart.so!nterp_helper+0x11fc,0xe50ad6ac libart.so!nterp_helper+0x11fc,0xe50ad6ac libart.so!nterp_helper+0x11fc,0xe50ad6ac libart.so!nterp_helper+0x11fc,0x722d5e3d boot-framework.oat!0x4a1e3d

[JNIEnv] 调用: GetStringUTFChars
  参数: ���r
调用栈:
0xe534c0fd libart.so!_ZN3artL29VMClassLoader_findLoadedClassEP7_JNIEnvP7_jclassP8_jobjectP8_jstring+0x40,0x711656bb boot-core-libart.oat!0xf6bb
[JNIEnv] GetStringUTFChars 返回: com.android.org.conscrypt.OpenSSLRSAKeyFactory

[JNIEnv] 调用: GetStringUTFChars
  参数: 8��pt��܌��
调用栈:
0xd042969f libjavacrypto.so!0x2169f,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50acc50 libart.so!nterp_helper+0x7a0,0x710e00c3 boot.oat!0x3220c3
[JNIEnv] GetStringUTFChars 返回: 2.5.29.14

[JNIEnv] 调用: NewStringUTF
  参数: 2.5.29.15
调用栈:
0xd042a6bb libjavacrypto.so!0x226bb,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50acc50 libart.so!nterp_helper+0x7a0,0x70f036a3 boot.oat!0x1456a3

[JNIEnv] 调用: NewStringUTF
  参数: 2.5.29.19
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xqx��x�����Ur�g�q
调用栈:
0xd042a6bb libjavacrypto.so!0x226bb,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50acc50 libart.so!nterp_helper+0x7a0,0x70f036a3 boot.oat!0x1456a3

[JNIEnv] 调用: NewStringUTF
  参数: 1.2.840.113549.1.1.11
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: x��x�����Ur�g�q
调用栈:
0xd0428f17 libjavacrypto.so!0x20f17,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50acc50 libart.so!nterp_helper+0x7a0,0xe50acfa4 libart.so!nterp_helper+0xaf4,0x71074701 boot.oat!0x2b6701

[JNIEnv] 调用: NewStringUTF
  参数: 1.2.840.113549.1.1.11
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: pairUUID, value: c4d960cc-e19d-4838-a9bd-46cde53bbc6e
[*] JSONObject.put called with key: __i, value: 267A00E061645180845BBD7794F3239E

[JNIEnv] 调用: NewStringUTF
  参数: __i
调用栈:
0xd0428f17 libjavacrypto.so!0x20f17,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50acc50 libart.so!nterp_helper+0x7a0,0xe50acfa4 libart.so!nterp_helper+0xaf4,0x70f0c7c9 boot.oat!0x14e7c9

[JNIEnv] 调用: NewStringUTF
  参数: 2.5.29.15
调用栈:
0xd042a6bb libjavacrypto.so!0x226bb,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50acc50 libart.so!nterp_helper+0x7a0,0x70f036a3 boot.oat!0x1456a3

[JNIEnv] 调用: NewStringUTF
  参数: 2.5.29.19
调用栈:
0xd042a6bb libjavacrypto.so!0x226bb,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50acc50 libart.so!nterp_helper+0x7a0,0x70f036a3 boot.oat!0x1456a3

[JNIEnv] 调用: NewStringUTF
  参数: 1.2.840.113549.1.1.11
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq
调用栈:
0xd0428f17 libjavacrypto.so!0x20f17,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50acc50 libart.so!nterp_helper+0x7a0,0xe50acfa4 libart.so!nterp_helper+0xaf4,0x71074701 boot.oat!0x2b6701

[JNIEnv] 调用: NewStringUTF
  参数: 1.2.840.113549.1.1.11
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: 
调用栈:
0xd0428f17 libjavacrypto.so!0x20f17,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50acc50 libart.so!nterp_helper+0x7a0,0xe50acfa4 libart.so!nterp_helper+0xaf4,0x70f0c7c9 boot.oat!0x14e7c9

[JNIEnv] 调用: NewStringUTF
  参数: 1.3.6.1.5.5.7.3.1
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: __i, value: 267A00E061645180845BBD7794F3239E

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq���������Ur�g�q��
调用栈:
0xd04293ed libjavacrypto.so!0x213ed,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50acc50 libart.so!nterp_helper+0x7a0,0xe50acfa4 libart.so!nterp_helper+0xaf4,0x70f03da3 boot.oat!0x145da3

[JNIEnv] 调用: NewStringUTF
  参数: 1.3.6.1.5.5.7.3.2
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: ���������Ur�g�q��
调用栈:
0xd04293ed libjavacrypto.so!0x213ed,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50acc50 libart.so!nterp_helper+0x7a0,0xe50acfa4 libart.so!nterp_helper+0xaf4,0x70f03da3 boot.oat!0x145da3
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: ds, value: 0
[*] JSONObject.put called with key: pn, value: com.sytt.tzy

[JNIEnv] 调用: NewStringUTF
  参数: pn
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq���������Ur�g�q

[JNIEnv] 调用: NewStringUTF
  参数: TLSv1.2
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: ���������Ur�g�q
调用栈:
0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50acc50 libart.so!nterp_helper+0x7a0,0xe50ad6ac libart.so!nterp_helper+0x11fc,0xe50ad6ac libart.so!nterp_helper+0x11fc,0xe50ac560 libart.so!nterp_helper+0xb0,0xe50b13d7 libart.so!art_quick_invoke_stub_internal+0x46,0xe54c476f libart.so!art_quick_invoke_stub+0x11e,0xe51065a5 libart.so!_ZN3art9ArtMethod6InvokeEPNS_6ThreadEPjjPNS_6JValueEPKc+0x8c,0xe53c373d libart.so!_ZN3art35InvokeVirtualOrInterfaceWithVarArgsIPNS_9ArtMethodEEENS_6JValueERKNS_33ScopedObjectAccessAlreadyRunnableEP8_jobjectT_St9__va_list+0x174,0xe53c384b libart.so!_ZN3art35InvokeVirtualOrInterfaceWithVarArgsIP10_jmethodIDEENS_6JValueERKNS_33ScopedObjectAccessAlreadyRunnableEP8_jobjectT_St9__va_list+0x2e,0xe527c5bf libart.so!_ZN3art3JNIILb0EE15CallVoidMethodVEP7_JNIEnvP8_jobjectP10_jmethodIDSt9__va_list+0x1ea,0xd04368ef libjavacrypto.so!0x2e8ef,0xd0437adb libjavacrypto.so!0x2fadb,0xd02e5daf libssl.so!0x1fdaf,0xd02da13b libssl.so!0x1413b,0xd02d940f libssl.so!0x1340f

[JNIEnv] 调用: NewStringUTF
  参数: TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: pn, value: com.sytt.tzy

[JNIEnv] 调用: GetStringUTFChars
  参数: ��

[JNIEnv] 调用: GetStringUTFChars
  参数: ��
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/files

[JNIEnv] 调用: GetStringUTFChars
  参数: ���
调用栈:
0xe723df49 libandroid_runtime.so!0x79f49,0x71fc0ddd boot-framework.oat!0x18cddd
[JNIEnv] GetStringUTFChars 返回: log.looper.10150.work_thread.slow
调用栈:
0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50acc50 libart.so!nterp_helper+0x7a0,0xe50ad6ac libart.so!nterp_helper+0x11fc,0xe50ad6ac libart.so!nterp_helper+0x11fc,0xe50ac560 libart.so!nterp_helper+0xb0,0xe50b13d7 libart.so!art_quick_invoke_stub_internal+0x46,0xe54c476f libart.so!art_quick_invoke_stub+0x11e,0xe51065a5 libart.so!_ZN3art9ArtMethod6InvokeEPNS_6ThreadEPjjPNS_6JValueEPKc+0x8c,0xe53c373d libart.so!_ZN3art35InvokeVirtualOrInterfaceWithVarArgsIPNS_9ArtMethodEEENS_6JValueERKNS_33ScopedObjectAccessAlreadyRunnableEP8_jobjectT_St9__va_list+0x174,0xe53c384b libart.so!_ZN3art35InvokeVirtualOrInterfaceWithVarArgsIP10_jmethodIDEENS_6JValueERKNS_33ScopedObjectAccessAlreadyRunnableEP8_jobjectT_St9__va_list+0x2e,0xe527c5bf libart.so!_ZN3art3JNIILb0EE15CallVoidMethodVEP7_JNIEnvP8_jobjectP10_jmethodIDSt9__va_list+0x1ea,0xd04368ef libjavacrypto.so!0x2e8ef,0xd0437adb libjavacrypto.so!0x2fadb,0xd02e5daf libssl.so!0x1fdaf,0xd02da13b libssl.so!0x1413b,0xd02d940f libssl.so!0x1340f

[JNIEnv] 调用: NewStringUTF
  参数: TLSv1.2
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/files/.com.sytt.tzy

[JNIEnv] 调用: NewStringUTF
  参数: access
调用栈:
0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50acc50 libart.so!nterp_helper+0x7a0,0xe50acfa4 libart.so!nterp_helper+0xaf4,0xe50ada0c libart.so!nterp_helper+0x155c,0xe50acfa4 libart.so!nterp_helper+0xaf4,0xe50ada0c libart.so!nterp_helper+0x155c,0xe50acfa4 libart.so!nterp_helper+0xaf4,0x711d6317 boot-okhttp.oat!0x33317

[JNIEnv] 调用: NewStringUTF
  参数: TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
调用栈:
0xda7de385 libjavacore.so!0x17385,0x7116659b boot-core-libart.oat!0x1059b

[JNIEnv] 调用: GetStringUTFChars
  参数: ��

[JNIEnv] 调用: GetStringUTFChars
  参数: H�
调用栈:
0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50acc50 libart.so!nterp_helper+0x7a0,0xe50acfa4 libart.so!nterp_helper+0xaf4,0xe50ad950 libart.so!nterp_helper+0x14a0,0xe50acfa4 libart.so!nterp_helper+0xaf4,0xe50ad950 libart.so!nterp_helper+0x14a0,0xe50acfa4 libart.so!nterp_helper+0xaf4,0x711d6317 boot-okhttp.oat!0x33317

[JNIEnv] 调用: GetStringUTFChars
  参数: (��
调用栈:
0xe723df49 libandroid_runtime.so!0x79f49,0x71fc0ddd boot-framework.oat!0x18cddd
[JNIEnv] GetStringUTFChars 返回: log.looper.10150.NetWorkSender.slow
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: android.util.StatsEvent

[JNIEnv] 调用: GetStringUTFChars
  参数: ���
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/files

[JNIEnv] 调用: GetStringUTFChars
  参数: (	�
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: android.util.StatsEvent$Builder

[JNIEnv] 调用: GetStringUTFChars
  参数: ���
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/files/.envelope

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x75
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/files/.envelope

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x71
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: com.sytt.tzy.UnityPlayerActivity

[JNIEnv] 调用: GetStringUTFChars

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x75
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
  参数: ��
[JNIEnv] GetStringUTFChars 返回: handleStartActivity

[JNIEnv] 调用: GetStringUTFChars
  参数: 8U�rC0�	|]���
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.umcrash.UMCrashUtils

[JNIEnv] 调用: GetStringUTFChars
  参数: 0Q�
调用栈:
0xdc22e867 libicu_jni.so!0x8867,0x72677869 boot-core-icu4j.oat!0x2e869
[JNIEnv] GetStringUTFChars 返回: UTF-8

[JNIEnv] 调用: GetStringUTFChars
[JNIEnv] GetStringUTFChars 返回: com.sytt.tzy.UnityPlayerActivity
Error: access violation accessing 0x75
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x79
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: RESUME_ACTIVITY

[JNIEnv] 调用: GetStringUTFChars
  参数: P�Vq���p�.�`I�XC��.�C�;r�B�q`I�p'����p�H��#q
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs

[JNIEnv] 调用: GetStringUTFChars
  参数: ��
调用栈:
0xe723de83 libandroid_runtime.so!0x79e83,0x71fcdccb boot-framework.oat!0x199ccb
[JNIEnv] GetStringUTFChars 返回: debug.layout

[JNIEnv] 调用: GetStringUTFChars
  参数: ��Vq
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/umeng_common_config.xml.bak

[JNIEnv] 调用: NewStringUTF
  参数: access
调用栈:
0xe723df49 libandroid_runtime.so!0x79f49,0x71fc0ddd boot-framework.oat!0x18cddd
[JNIEnv] GetStringUTFChars 返回: debug.hwui.fps_divisor

[JNIEnv] 调用: NewStringUTF
  参数: 
调用栈:
0xda7de385 libjavacore.so!0x17385,0x7116659b boot-core-libart.oat!0x1059b

[JNIEnv] 调用: GetStringUTFChars
  参数: ��
调用栈:
0xe7241659 libandroid_runtime.so!0x7d659,0x71fba861 boot-framework.oat!0x186861

[JNIEnv] 调用: GetStringUTFChars
[JNIEnv] GetStringUTFChars 返回: com.sytt.tzy.UnityPlayerActivity
Error: access violation accessing 0x79
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x71
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: topStateChangedWhenResumed

[JNIEnv] 调用: GetStringUTFChars
  参数: @�Wq
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/umeng_common_config.xml

[JNIEnv] 调用: GetStringUTFChars
  参数: ��
调用栈:
0xe723e09f libandroid_runtime.so!0x7a09f,0x71fc0ddd boot-framework.oat!0x18cddd
[JNIEnv] GetStringUTFChars 返回: viewroot.profile_rendering

[JNIEnv] 调用: GetStringUTFChars
  参数: P�Vq���p@�Wq0W�
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/umeng_common_config.xml

[JNIEnv] 调用: GetStringUTFChars
  参数: ��h_�p0Z�p(h�ph�Kq8h�ph�Kqh�Kq�,�wu�pZ�p�5��5���h�Kq�,�t,����q�Mtq�5���r�����,�t,��A�p���5�����qP��p�5�����H�H����,r�xq
调用栈:
0xe723de83 libandroid_runtime.so!0x79e83,0x71fcdccb boot-framework.oat!0x199ccb
[JNIEnv] GetStringUTFChars 返回: debug.layout

[JNIEnv] 调用: NewStringUTF
  参数: zh-CN

[JNIEnv] 调用: NewStringUTF
  参数: Surface(name=4c456cf StatusBar)/@0xa0c72a - animation-leash of insets_animation
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: android.util.StatsLog

[JNIEnv] 调用: GetStringUTFChars
  参数: (��
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: zh-CN
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27
调用栈:
0xda7e8c87 libjavacore.so!0x21c87,0x7116694f boot-core-libart.oat!0x1094f
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/umeng_common_config.xml

[JNIEnv] 调用: GetStringUTFChars
  参数: ��
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: zh-CN
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/umeng_common_config.xml

[JNIEnv] 调用: GetStringUTFChars
  参数: ��
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: com.sytt.tzy/com.sytt.tzy.UnityPlayerActivity
调用栈:
0xda7e2b8f libjavacore.so!0x1bb8f,0x71166d05 boot-core-libart.oat!0x10d05
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/umeng_common_config.xml

[JNIEnv] 调用: GetStringUTFChars
  参数: 8U�r��@
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: GetStringUTFChars
  参数: �Y�p��
调用栈:
0xdc22e867 libicu_jni.so!0x8867,0x72677869 boot-core-icu4j.oat!0x2e869
[JNIEnv] GetStringUTFChars 返回: UTF-8

[JNIEnv] 调用: GetStringUTFChars
  参数: .�r0+�@*�p���r���r���p.�r���r���p��pP��p
调用栈:
0xe7297417 libandroid_runtime.so!0xd3417,0x71fbc0b7 boot-framework.oat!0x1880b7
[JNIEnv] GetStringUTFChars 返回: ViewRootImpl[UnityPlayerActivity]

[JNIEnv] 调用: GetStringUTFChars
  参数: p��
调用栈:
0xe534c0fd libart.so!_ZN3artL29VMClassLoader_findLoadedClassEP7_JNIEnvP7_jclassP8_jobjectP8_jstring+0x40,0x711656bb boot-core-libart.oat!0xf6bb
[JNIEnv] GetStringUTFChars 返回: com.android.org.conscrypt.OpenSSLEvpCipherAES$AES$CBC$PKCS5Padding

[JNIEnv] 调用: GetStringUTFChars
  参数: x6�p��تc�
调用栈:
0xe7290775 libandroid_runtime.so!0xcc775,0x71fd3729 boot-framework.oat!0x19f729
[JNIEnv] GetStringUTFChars 返回: Bounds for - com.sytt.tzy/com.sytt.tzy.UnityPlayerActivity

[JNIEnv] 调用: GetStringUTFChars
  参数: ���
调用栈:
0xd04258cb libjavacrypto.so!0x1d8cb,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50ac560 libart.so!nterp_helper+0xb0,0xe50acfa4 libart.so!nterp_helper+0xaf4,0x70ede2cb boot.oat!0x1202cb
[JNIEnv] GetStringUTFChars 返回: aes-128-cbc

[JNIEnv] 调用: GetStringUTFChars
  参数: p�
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: android.util.StatsEvent

[JNIEnv] 调用: NewStringUTF
  参数: TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy

[JNIEnv] 调用: GetStringUTFChars
  参数: x?�
调用栈:
0xe7290775 libandroid_runtime.so!0xcc775,0x71fd3729 boot-framework.oat!0x19f729
[JNIEnv] GetStringUTFChars 返回: SurfaceView[com.sytt.tzy/com.sytt.tzy.UnityPlayerActivity]

[JNIEnv] 调用: GetStringUTFChars
  参数: ���
调用栈:
0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50acc50 libart.so!nterp_helper+0x7a0,0xe50acfa4 libart.so!nterp_helper+0xaf4,0xe50ad950 libart.so!nterp_helper+0x14a0,0xe50acfa4 libart.so!nterp_helper+0xaf4,0x711b322f boot-okhttp.oat!0x1022f

[JNIEnv] 调用: NewStringUTF
  参数: *.dun.163.com
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/databases

[JNIEnv] 调用: GetStringUTFChars
  参数: `O�
调用栈:
0xe7290775 libandroid_runtime.so!0xcc775,0x71fd3729 boot-framework.oat!0x19f729
[JNIEnv] GetStringUTFChars 返回: SurfaceView[com.sytt.tzy/com.sytt.tzy.UnityPlayerActivity](BLAST)

[JNIEnv] 调用: GetStringUTFChars
  参数: ���
调用栈:
0xd042b263 libjavacrypto.so!0x23263,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50acc50 libart.so!nterp_helper+0x7a0,0x711ccf71 boot-okhttp.oat!0x29f71

[JNIEnv] 调用: NewStringUTF
  参数: dun.163.com
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/databases

[JNIEnv] 调用: GetStringUTFChars
  参数: ��Lq
调用栈:
0xd042b263 libjavacrypto.so!0x23263,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50acc50 libart.so!nterp_helper+0x7a0,0x711ccf71 boot-okhttp.oat!0x29f71
调用栈:
0xe7240f31 libandroid_runtime.so!0x7cf31,0x71fc0ddd boot-framework.oat!0x18cddd
[JNIEnv] GetStringUTFChars 返回: SQLiteLog

[JNIEnv] 调用: GetStringUTFChars
  参数: �Lq

[JNIEnv] 调用: NewStringUTF
  参数: com.netease.htprotect.poly.a

[JNIEnv] 调用: NewStringUTF
  参数: null

[JNIEnv] 调用: NewStringUTF
  参数: null
调用栈:
0xe7290775 libandroid_runtime.so!0xcc775,0x71fd3729 boot-framework.oat!0x19f729
[JNIEnv] GetStringUTFChars 返回: Background for SurfaceView[com.sytt.tzy/com.sytt.tzy.UnityPlayerActivity]

[JNIEnv] 调用: GetStringUTFChars
  参数: ����Q��<^��
调用栈:
0xe7240f31 libandroid_runtime.so!0x7cf31,0x71fc0ddd boot-framework.oat!0x18cddd
[JNIEnv] GetStringUTFChars 返回: SQLiteStatements

[JNIEnv] 调用: GetStringUTFChars
  参数: 8�Lq
调用栈:
0xe5407303 libart.so!_ZN3art6Thread10CreatePeerEPKcbP8_jobject+0x4a,0xe5404f2b libart.so!_ZN3art6Thread6AttachEPKcbP8_jobjectb+0x16a,0xe53c7d4b libart.so!_ZN3art7Runtime19AttachCurrentThreadEPKcbP8_jobjectb+0x32,0xe52655e3 libart.so!_ZN3art3JII27AttachCurrentThreadInternalEP7_JavaVMPP7_JNIEnvPvb+0xea,0xb4f36e69 libNetHTProtect.so!0xf6e69,0xb4f36f15 libNetHTProtect.so!0xf6f15,0xb4f37075 libNetHTProtect.so!0xf7075,0xb4fcfe29 libNetHTProtect.so!0x18fe29,0xb4fa21e3 libNetHTProtect.so!0x1621e3,0xb4fa133d libNetHTProtect.so!0x16133d,0xb4fb876b libNetHTProtect.so!0x17876b,0xb4fb79bf libNetHTProtect.so!0x1779bf,0xb4fb7827 libNetHTProtect.so!0x177827,0xb4fb777d libNetHTProtect.so!0x17777d,0xe6387139 libc.so!_ZL15__pthread_startPv+0x2a,0xe633fd57 libc.so!__start_thread+0x20

[JNIEnv] 调用: NewStringUTF
  参数: com.netease.htprotect.poly.a
调用栈:
0xe7240f31 libandroid_runtime.so!0x7cf31,0x71fc0ddd boot-framework.oat!0x18cddd
[JNIEnv] GetStringUTFChars 返回: SQLiteTime

[JNIEnv] 调用: GetStringUTFChars
  参数: �N�
调用栈:
0xb4f38341 libNetHTProtect.so!0xf8341,0xb4edce8f libNetHTProtect.so!0x9ce8f,0xb4edc187 libNetHTProtect.so!0x9c187,0xb4fd006b libNetHTProtect.so!0x19006b,0xb4fd45b3 libNetHTProtect.so!0x1945b3,0xb4f9d6f3 libNetHTProtect.so!0x15d6f3,0xe6387139 libc.so!_ZL15__pthread_startPv+0x2a,0xe633fd57 libc.so!__start_thread+0x20

[JNIEnv] 调用: GetStringUTFChars
  参数: �K�=s�h8���Z�`8���рr�K����
调用栈:
0xe72972a1 libandroid_runtime.so!0xd32a1,0x71fb97d9 boot-framework.oat!0x1857d9
[JNIEnv] GetStringUTFChars 返回: SurfaceView[com.sytt.tzy/com.sytt.tzy.UnityPlayerActivity]

[JNIEnv] 调用: GetStringUTFChars
  参数: ��Uq`��Hb��
调用栈:
0xb4f38341 libNetHTProtect.so!0xf8341,0xb4edce8f libNetHTProtect.so!0x9ce8f,0xb4edc187 libNetHTProtect.so!0x9c187,0xb4fd006b libNetHTProtect.so!0x19006b,0xb4fa21e3 libNetHTProtect.so!0x1621e3,0xb4fa133d libNetHTProtect.so!0x16133d,0xb4fb876b libNetHTProtect.so!0x17876b,0xb4fb79bf libNetHTProtect.so!0x1779bf,0xb4fb7827 libNetHTProtect.so!0x177827,0xb4fb777d libNetHTProtect.so!0x17777d,0xe6387139 libc.so!_ZL15__pthread_startPv+0x2a,0xe633fd57 libc.so!__start_thread+0x20

[JNIEnv] 调用: GetStringUTFChars
  参数: �6��Z�(�Ӵ�q�(�Ӵ�рr�6����
调用栈:
0xe5407303 libart.so!_ZN3art6Thread10CreatePeerEPKcbP8_jobject+0x4a,0xe5404f2b libart.so!_ZN3art6Thread6AttachEPKcbP8_jobjectb+0x16a,0xe53c7d4b libart.so!_ZN3art7Runtime19AttachCurrentThreadEPKcbP8_jobjectb+0x32,0xe52655e3 libart.so!_ZN3art3JII27AttachCurrentThreadInternalEP7_JavaVMPP7_JNIEnvPvb+0xea,0xb4f36e69 libNetHTProtect.so!0xf6e69,0xb4f36f15 libNetHTProtect.so!0xf6f15,0xb4f37007 libNetHTProtect.so!0xf7007,0xb4f36fd5 libNetHTProtect.so!0xf6fd5,0xb4fb5e99 libNetHTProtect.so!0x175e99,0xb4fa0c0f libNetHTProtect.so!0x160c0f,0xb4fb876b libNetHTProtect.so!0x17876b,0xb4fb79bf libNetHTProtect.so!0x1779bf,0xb4fb7827 libNetHTProtect.so!0x177827,0xb4fb777d libNetHTProtect.so!0x17777d,0xe6387139 libc.so!_ZL15__pthread_startPv+0x2a,0xe633fd57 libc.so!__start_thread+0x20

[JNIEnv] 调用: NewStringUTF
  参数: com.netease.htprotect.poly.a
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: Choreographer

[JNIEnv] 调用: GetStringUTFChars
  参数: `��Hb��
调用栈:
0xe534c0fd libart.so!_ZN3artL29VMClassLoader_findLoadedClassEP7_JNIEnvP7_jclassP8_jobjectP8_jstring+0x40,0x711656bb boot-core-libart.oat!0xf6bb
[JNIEnv] GetStringUTFChars 返回: com.netease.htprotect.poly.a

[JNIEnv] 调用: GetStringUTFChars
  参数: �K�
调用栈:
0xe534c0fd libart.so!_ZN3artL29VMClassLoader_findLoadedClassEP7_JNIEnvP7_jclassP8_jobjectP8_jstring+0x40,0x711656bb boot-core-libart.oat!0xf6bb
[JNIEnv] GetStringUTFChars 返回: com.netease.htprotect.poly.a

[JNIEnv] 调用: GetStringUTFChars
  参数: �6�
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: Skipped 110 frames!  The application may be doing too much work on its main thread.

[JNIEnv] 调用: GetStringUTFChars
  参数: H

[JNIEnv] 调用: NewStringUTF
  参数: com.samsung.android.vr.application.mode

[JNIEnv] 调用: NewStringUTF
  参数: Surface(name=4c456cf StatusBar)/@0xa0c72a - animation-leash of insets_animation
调用栈:
0xe534c0fd libart.so!_ZN3artL29VMClassLoader_findLoadedClassEP7_JNIEnvP7_jclassP8_jobjectP8_jstring+0x40,0x711656bb boot-core-libart.oat!0xf6bb
[JNIEnv] GetStringUTFChars 返回: com.netease.htprotect.poly.a

[JNIEnv] 调用: GetStringUTFChars
  参数: �K�
调用栈:
0xe727e6bb libandroid_runtime.so!0xba6bb,0x71fc284b boot-framework.oat!0x18e84b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/databases/ua.db

[JNIEnv] 调用: GetStringUTFChars
  参数: �N�
调用栈:
0xb72d04f3 libunity.so!0xcbf4f3

[JNIEnv] 调用: GetStringUTFChars
  参数: H�
调用栈:
0xe534c0fd libart.so!_ZN3artL29VMClassLoader_findLoadedClassEP7_JNIEnvP7_jclassP8_jobjectP8_jstring+0x40,0x711656bb boot-core-libart.oat!0xf6bb
[JNIEnv] GetStringUTFChars 返回: com.netease.htprotect.poly.a

[JNIEnv] 调用: GetStringUTFChars
  参数: �6�
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.netease.htprotect.poly.a

[JNIEnv] 调用: GetStringUTFChars
  参数: �K��рr0��r
调用栈:
0xe723df49 libandroid_runtime.so!0x79f49,0x71fc0ddd boot-framework.oat!0x18cddd
[JNIEnv] GetStringUTFChars 返回: log.looper.10150.InsetsAnimations.slow

[JNIEnv] 调用: GetStringUTFChars
  参数: ��Vq
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: Surface(name=75cdafa InputMethod)/@0x88c92a1 - animation-leash of insets_animation
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.netease.htprotect.poly.a

[JNIEnv] 调用: GetStringUTFChars
  参数: �6��рr0��r
调用栈:
0xe533390b libart.so!_ZN3artL25DexFile_defineClassNativeEP7_JNIEnvP7_jclassP8_jstringP8_jobjectS7_S7_+0x52,0x711641b3 boot-core-libart.oat!0xe1b3
[JNIEnv] GetStringUTFChars 返回: com.netease.htprotect.poly.a

[JNIEnv] 调用: GetStringUTFChars
  参数: �K� �p��@���рr
调用栈:
0xe723df49 libandroid_runtime.so!0x79f49,0x71fc0ddd boot-framework.oat!0x18cddd
[JNIEnv] GetStringUTFChars 返回: debug.hwui.fps_divisor
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27
调用栈:
0xe533390b libart.so!_ZN3artL25DexFile_defineClassNativeEP7_JNIEnvP7_jclassP8_jstringP8_jobjectS7_S7_+0x52,0x711641b3 boot-core-libart.oat!0xe1b3
[JNIEnv] GetStringUTFChars 返回: com.netease.htprotect.poly.a

[JNIEnv] 调用: GetStringUTFChars
  参数: �6� �p��@���рr
调用栈:
0xe533390b libart.so!_ZN3artL25DexFile_defineClassNativeEP7_JNIEnvP7_jclassP8_jstringP8_jobjectS7_S7_+0x52,0x711641b3 boot-core-libart.oat!0xe1b3
[JNIEnv] GetStringUTFChars 返回: com.netease.htprotect.poly.a

[JNIEnv] 调用: GetStringUTFChars
  参数: �

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x5
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: window

[JNIEnv] 调用: NewStringUTF
  参数: window
调用栈:
0xe533390b libart.so!_ZN3artL25DexFile_defineClassNativeEP7_JNIEnvP7_jclassP8_jstringP8_jobjectS7_S7_+0x52,0x711641b3 boot-core-libart.oat!0xe1b3
[JNIEnv] GetStringUTFChars 返回: com.netease.htprotect.poly.a
调用栈:
0xb4f38341 libNetHTProtect.so!0xf8341,0xb4edce8f libNetHTProtect.so!0x9ce8f,0xb4ee19d3 libNetHTProtect.so!0xa19d3,0xb4ee3ee9 libNetHTProtect.so!0xa3ee9,0xb4fe2afd libNetHTProtect.so!0x1a2afd,0xb4fe2753 libNetHTProtect.so!0x1a2753,0xb4fe2617 libNetHTProtect.so!0x1a2617,0xb4f9d937 libNetHTProtect.so!0x15d937,0xe6387139 libc.so!_ZL15__pthread_startPv+0x2a,0xe633fd57 libc.so!__start_thread+0x20

[JNIEnv] 调用: NewStringUTF
  参数: com.android.launcher3/com.android.quickstep.RecentsActivity
调用栈:
0xb4f38341 libNetHTProtect.so!0xf8341,0xb4edce8f libNetHTProtect.so!0x9ce8f,0xb4edc187 libNetHTProtect.so!0x9c187,0xb4fd006b libNetHTProtect.so!0x19006b,0xb4fa0d25 libNetHTProtect.so!0x160d25,0xb4fb876b libNetHTProtect.so!0x17876b,0xb4fb79bf libNetHTProtect.so!0x1779bf,0xb4fb7827 libNetHTProtect.so!0x177827,0xb4fb777d libNetHTProtect.so!0x17777d,0xe6387139 libc.so!_ZL15__pthread_startPv+0x2a,0xe633fd57 libc.so!__start_thread+0x20

[JNIEnv] 调用: GetStringUTFChars
  参数: �
调用栈:
0xe723df49 libandroid_runtime.so!0x79f49,0x71fc0ddd boot-framework.oat!0x18cddd
[JNIEnv] GetStringUTFChars 返回: log.looper.10150.ht-display.slow
调用栈:
0xe727e6e5 libandroid_runtime.so!0xba6e5,0x71fc284b boot-framework.oat!0x18e84b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/databases/ua.db

[JNIEnv] 调用: GetStringUTFChars
  参数: p��ph_�p
调用栈:
0xe7241659 libandroid_runtime.so!0x7d659,0x71fba861 boot-framework.oat!0x186861

[JNIEnv] 调用: NewStringUTF
  参数: com.netease.htprotect.poly.a
调用栈:
0xe534c0fd libart.so!_ZN3artL29VMClassLoader_findLoadedClassEP7_JNIEnvP7_jclassP8_jobjectP8_jstring+0x40,0x711656bb boot-core-libart.oat!0xf6bb
[JNIEnv] GetStringUTFChars 返回: com.netease.htprotect.poly.a

[JNIEnv] 调用: GetStringUTFChars
  参数: �
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: android.content.ServiceConnection

[JNIEnv] 调用: GetStringUTFChars
  参数: p�
调用栈:
0xda7e65b7 libjavacore.so!0x1f5b7,0x7116694f boot-core-libart.oat!0x1094f
[JNIEnv] GetStringUTFChars 返回: /data

[JNIEnv] 调用: GetStringUTFChars
  参数: �c�
调用栈:
0xb4f38341 libNetHTProtect.so!0xf8341,0xb4edce8f libNetHTProtect.so!0x9ce8f,0xb4edc187 libNetHTProtect.so!0x9c187,0xb4fd006b libNetHTProtect.so!0x19006b,0xb4fe2d81 libNetHTProtect.so!0x1a2d81,0xb4fe2757 libNetHTProtect.so!0x1a2757,0xb4fe2617 libNetHTProtect.so!0x1a2617,0xb4f9d937 libNetHTProtect.so!0x15d937,0xe6387139 libc.so!_ZL15__pthread_startPv+0x2a,0xe633fd57 libc.so!__start_thread+0x20

[JNIEnv] 调用: GetStringUTFChars
  参数: �d��Z��7���q��7���рr�d����
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: android.media.AudioManager$OnAudioFocusChangeListener

[JNIEnv] 调用: GetStringUTFChars
  参数:  �
调用栈:
0xe534c0fd libart.so!_ZN3artL29VMClassLoader_findLoadedClassEP7_JNIEnvP7_jclassP8_jobjectP8_jstring+0x40,0x711656bb boot-core-libart.oat!0xf6bb
[JNIEnv] GetStringUTFChars 返回: com.netease.htprotect.poly.a

[JNIEnv] 调用: GetStringUTFChars
  参数: �d�
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: android.location.LocationListener

[JNIEnv] 调用: NewStringUTF
  参数: emulated;0
调用栈:
0xe534c0fd libart.so!_ZN3artL29VMClassLoader_findLoadedClassEP7_JNIEnvP7_jclassP8_jobjectP8_jstring+0x40,0x711656bb boot-core-libart.oat!0xf6bb
[JNIEnv] GetStringUTFChars 返回: com.netease.htprotect.poly.a

[JNIEnv] 调用: GetStringUTFChars
  参数: �
调用栈:
0xda7a9105 libopenjdk.so!Mock_getProperty+0x2c,0x70e653e3 boot.oat!0xa73e3
[JNIEnv] GetStringUTFChars 返回: lsp.statfs.data.blockCountLong

[JNIEnv] 调用: NewStringUTF
  参数: 27864567
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /storage/emulated/0
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.netease.htprotect.poly.a

[JNIEnv] 调用: GetStringUTFChars
  参数: �
调用栈:
0xe534c0fd libart.so!_ZN3artL29VMClassLoader_findLoadedClassEP7_JNIEnvP7_jclassP8_jobjectP8_jstring+0x40,0x711656bb boot-core-libart.oat!0xf6bb
[JNIEnv] GetStringUTFChars 返回: com.netease.htprotect.poly.a

[JNIEnv] 调用: GetStringUTFChars
  参数: �d�
调用栈:
0xe533390b libart.so!_ZN3artL25DexFile_defineClassNativeEP7_JNIEnvP7_jclassP8_jstringP8_jobjectS7_S7_+0x52,0x711641b3 boot-core-libart.oat!0xe1b3
[JNIEnv] GetStringUTFChars 返回: com.netease.htprotect.poly.a

[JNIEnv] 调用: GetStringUTFChars
  参数: �
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.netease.htprotect.poly.a

[JNIEnv] 调用: GetStringUTFChars
  参数: �d��рr0��r
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /storage/emulated/0
调用栈:
0xda7a9141 libopenjdk.so!Mock_getProperty+0x68,0x70e653e3 boot.oat!0xa73e3

[JNIEnv] 调用: GetStringUTFChars
  参数: xo�
调用栈:
0xe533390b libart.so!_ZN3artL25DexFile_defineClassNativeEP7_JNIEnvP7_jclassP8_jstringP8_jobjectS7_S7_+0x52,0x711641b3 boot-core-libart.oat!0xe1b3
[JNIEnv] GetStringUTFChars 返回: com.netease.htprotect.poly.a

[JNIEnv] 调用: GetStringUTFChars
  参数: �d� �p��@���рr
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: 内部共享存储空间
调用栈:
0xe533390b libart.so!_ZN3artL25DexFile_defineClassNativeEP7_JNIEnvP7_jclassP8_jstringP8_jobjectS7_S7_+0x52,0x711641b3 boot-core-libart.oat!0xe1b3
[JNIEnv] GetStringUTFChars 返回: com.netease.htprotect.poly.a

[JNIEnv] 调用: NewStringUTF
  参数: Success
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: mounted
调用栈:
0xb4fa117d libNetHTProtect.so!0x16117d,0xb4fb876b libNetHTProtect.so!0x17876b,0xb4fb79bf libNetHTProtect.so!0x1779bf,0xb4fb7827 libNetHTProtect.so!0x177827,0xb4fb777d libNetHTProtect.so!0x17777d,0xe6387139 libc.so!_ZL15__pthread_startPv+0x2a,0xe633fd57 libc.so!__start_thread+0x20

[JNIEnv] 调用: GetStringUTFChars
  参数: ������t���`�
��i��܏���B#��������P��
调用栈:
0xda7a9105 libopenjdk.so!Mock_getProperty+0x2c,0x70e653e3 boot.oat!0xa73e3
[JNIEnv] GetStringUTFChars 返回: lsp.statfs.data.blockSizeLong

[JNIEnv] 调用: NewStringUTF
  参数: 4096
调用栈:
0xe533390b libart.so!_ZN3artL25DexFile_defineClassNativeEP7_JNIEnvP7_jclassP8_jstringP8_jobjectS7_S7_+0x52,0x711641b3 boot-core-libart.oat!0xe1b3
[JNIEnv] GetStringUTFChars 返回: com.netease.htprotect.poly.a

[JNIEnv] 调用: GetStringUTFChars
  参数: �p� �
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: Test

[JNIEnv] 调用: GetStringUTFChars
  参数: �����t���`�
��i��܏���B#��������P��
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: GetStringUTFChars
  参数: p#�
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: code is:200 String is:Success

[JNIEnv] 调用: GetStringUTFChars
  参数: �����t���`�
��i��܏���v#������P�P���P�P���)�p
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /storage/emulated/0/Android/data/com.sytt.tzy/files

[JNIEnv] 调用: GetStringUTFChars
  参数: p#�
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 初始化成功

[JNIEnv] 调用: GetStringUTFChars
  参数: �����t���`�
��i��܏���v#������P�P���P�P���)�p
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /storage/emulated/0/Android/data/com.sytt.tzy/files

[JNIEnv] 调用: GetStringUTFChars
  参数: 
调用栈:
0xda7a9141 libopenjdk.so!Mock_getProperty+0x68,0x70e653e3 boot.oat!0xa73e3

[JNIEnv] 调用: GetStringUTFChars
  参数: H{�
调用栈:
0xda745fcd libopenjdkjvm.so!JVM_NativeLoad+0x2c,0x70e65741 boot.oat!0xa7741
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/files/.motion/libxt_a.so

[JNIEnv] 调用: NewStringUTF
  参数: android.hardware.strongbox_keystore
调用栈:
0xb4f38371 libNetHTProtect.so!0xf8371,0xb4ef6b8d libNetHTProtect.so!0xb6b8d,0xb4fc2d43 libNetHTProtect.so!0x182d43,0xb4f9d9b7 libNetHTProtect.so!0x15d9b7,0xe6387139 libc.so!_ZL15__pthread_startPv+0x2a,0xe633fd57 libc.so!__start_thread+0x20

[JNIEnv] 调用: NewStringUTF
  参数: com.netease.htprotect.poly.a
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/files

[JNIEnv] 调用: NewStringUTF
  参数: emulated;0
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 这是初始化成功后返回的code:Success
调用栈:
0xda7a9105 libopenjdk.so!Mock_getProperty+0x2c,0x70e653e3 boot.oat!0xa73e3
[JNIEnv] GetStringUTFChars 返回: lsp.statfs.data.freeBlocksLong

[JNIEnv] 调用: NewStringUTF
  参数: 13591666
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /storage/emulated/0
调用栈:
0xb4f38341 libNetHTProtect.so!0xf8341,0xb4edce8f libNetHTProtect.so!0x9ce8f,0xb4edc187 libNetHTProtect.so!0x9c187,0xb4fd006b libNetHTProtect.so!0x19006b,0xb4fc4adf libNetHTProtect.so!0x184adf,0xb4fc2d6b libNetHTProtect.so!0x182d6b,0xb4f9d9b7 libNetHTProtect.so!0x15d9b7,0xe6387139 libc.so!_ZL15__pthread_startPv+0x2a,0xe633fd57 libc.so!__start_thread+0x20

[JNIEnv] 调用: GetStringUTFChars
  参数: �}��ZØ1���qØ1���рr�}����
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /storage/emulated/0
调用栈:
0xe534c0fd libart.so!_ZN3artL29VMClassLoader_findLoadedClassEP7_JNIEnvP7_jclassP8_jobjectP8_jstring+0x40,0x711656bb boot-core-libart.oat!0xf6bb
[JNIEnv] GetStringUTFChars 返回: com.netease.htprotect.poly.a

[JNIEnv] 调用: GetStringUTFChars
  参数: �}�
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: 内部共享存储空间
调用栈:
0xe534c0fd libart.so!_ZN3artL29VMClassLoader_findLoadedClassEP7_JNIEnvP7_jclassP8_jobjectP8_jstring+0x40,0x711656bb boot-core-libart.oat!0xf6bb
[JNIEnv] GetStringUTFChars 返回: com.netease.htprotect.poly.a

[JNIEnv] 调用: GetStringUTFChars
  参数: �}�
调用栈:
0xda7a9141 libopenjdk.so!Mock_getProperty+0x68,0x70e653e3 boot.oat!0xa73e3

[JNIEnv] 调用: GetStringUTFChars
  参数: 0��
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.netease.htprotect.poly.a

[JNIEnv] 调用: GetStringUTFChars
  参数: �}��рr0��r
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: mounted
调用栈:
0xe533390b libart.so!_ZN3artL25DexFile_defineClassNativeEP7_JNIEnvP7_jclassP8_jstringP8_jobjectS7_S7_+0x52,0x711641b3 boot-core-libart.oat!0xe1b3
[JNIEnv] GetStringUTFChars 返回: com.netease.htprotect.poly.a

[JNIEnv] 调用: GetStringUTFChars
  参数: �}� �p��@���рr
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: emulated;0
调用栈:
0xe533390b libart.so!_ZN3artL25DexFile_defineClassNativeEP7_JNIEnvP7_jclassP8_jstringP8_jobjectS7_S7_+0x52,0x711641b3 boot-core-libart.oat!0xe1b3
[JNIEnv] GetStringUTFChars 返回: com.netease.htprotect.poly.a

[JNIEnv] 调用: NewStringUTF
  参数: htpradcet
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /storage/emulated/0
调用栈:
0xb4f38341 libNetHTProtect.so!0xf8341,0xb4fc557d libNetHTProtect.so!0x18557d,0xb4fc5433 libNetHTProtect.so!0x185433,0xb4fc4b4d libNetHTProtect.so!0x184b4d,0xb4fc2d6b libNetHTProtect.so!0x182d6b,0xb4f9d9b7 libNetHTProtect.so!0x15d9b7,0xe6387139 libc.so!_ZL15__pthread_startPv+0x2a,0xe633fd57 libc.so!__start_thread+0x20

[JNIEnv] 调用: NewStringUTF
  参数: AndroidKeyStore
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /storage/emulated/0
调用栈:
0xb4f38341 libNetHTProtect.so!0xf8341,0xb4fc5587 libNetHTProtect.so!0x185587,0xb4fc5433 libNetHTProtect.so!0x185433,0xb4fc4b4d libNetHTProtect.so!0x184b4d,0xb4fc2d6b libNetHTProtect.so!0x182d6b,0xb4f9d9b7 libNetHTProtect.so!0x15d9b7,0xe6387139 libc.so!_ZL15__pthread_startPv+0x2a,0xe633fd57 libc.so!__start_thread+0x20

[JNIEnv] 调用: NewStringUTF
  参数: secp256r1
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: 内部共享存储空间
调用栈:
0xb4f38341 libNetHTProtect.so!0xf8341,0xb4fc5591 libNetHTProtect.so!0x185591,0xb4fc5433 libNetHTProtect.so!0x185433,0xb4fc4b4d libNetHTProtect.so!0x184b4d,0xb4fc2d6b libNetHTProtect.so!0x182d6b,0xb4f9d9b7 libNetHTProtect.so!0x15d9b7,0xe6387139 libc.so!_ZL15__pthread_startPv+0x2a,0xe633fd57 libc.so!__start_thread+0x20

[JNIEnv] 调用: GetStringUTFChars
  参数: x{Qq���@*�p�m�r�i�r���px{Qq�d�r���p��pP��p
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: mounted
调用栈:
0xe534c0fd libart.so!_ZN3artL29VMClassLoader_findLoadedClassEP7_JNIEnvP7_jclassP8_jobjectP8_jstring+0x40,0x711656bb boot-core-libart.oat!0xf6bb
[JNIEnv] GetStringUTFChars 返回: android.security.keystore2.AndroidKeyStoreSpi

[JNIEnv] 调用: GetStringUTFChars
  参数: x{Qq
调用栈:
0xda7a9105 libopenjdk.so!Mock_getProperty+0x2c,0x70e653e3 boot.oat!0xa73e3
[JNIEnv] GetStringUTFChars 返回: lsp.statfs.data.freeBlocksLong.origin

[JNIEnv] 调用: NewStringUTF
  参数: 13539353
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: android.security.keystore2.AndroidKeyStoreSpi

[JNIEnv] 调用: NewStringUTF
  参数: null
调用栈:
0xda7a9141 libopenjdk.so!Mock_getProperty+0x68,0x70e653e3 boot.oat!0xa73e3

[JNIEnv] 调用: GetStringUTFChars
  参数: 0��
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: GetStringUTFChars
  参数: x$�
调用栈:
0xe5407303 libart.so!_ZN3art6Thread10CreatePeerEPKcbP8_jobject+0x4a,0xe5404f2b libart.so!_ZN3art6Thread6AttachEPKcbP8_jobjectb+0x16a,0xe53c7d4b libart.so!_ZN3art7Runtime19AttachCurrentThreadEPKcbP8_jobjectb+0x32,0xe52655e3 libart.so!_ZN3art3JII27AttachCurrentThreadInternalEP7_JavaVMPP7_JNIEnvPvb+0xea,0xb4f36e69 libNetHTProtect.so!0xf6e69,0xb4f36f15 libNetHTProtect.so!0xf6f15,0xb4f37007 libNetHTProtect.so!0xf7007,0xb4fc03a9 libNetHTProtect.so!0x1803a9,0xb4e4f01b libNetHTProtect.so!0xf01b,0xb4e4eb23 libNetHTProtect.so!0xeb23,0xb4fb876b libNetHTProtect.so!0x17876b,0xb4fb79bf libNetHTProtect.so!0x1779bf,0xb4fb7827 libNetHTProtect.so!0x177827,0xb4fb777d libNetHTProtect.so!0x17777d,0xe6387139 libc.so!_ZL15__pthread_startPv+0x2a,0xe633fd57 libc.so!__start_thread+0x20

[JNIEnv] 调用: GetStringUTFChars
[JNIEnv] GetStringUTFChars 返回: /data/app/~~hYKtoZqlctb0dKGf8OSOKQ==/com.sytt.tzy-YAzL_LiSSbrdnOTT58XTsA==/base.apk
Error: access violation accessing 0x1
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)

[JNIEnv] 调用: NewStringUTF
  参数: /data/app/~~hYKtoZqlctb0dKGf8OSOKQ==/com.sytt.tzy-YAzL_LiSSbrdnOTT58XTsA==/base.apk
调用栈:
0xb4f38341 libNetHTProtect.so!0xf8341,0xb4e50e4f libNetHTProtect.so!0x10e4f,0xb4e4f27f libNetHTProtect.so!0xf27f,0xb4e4eb23 libNetHTProtect.so!0xeb23,0xb4fb876b libNetHTProtect.so!0x17876b,0xb4fb79bf libNetHTProtect.so!0x1779bf,0xb4fb7827 libNetHTProtect.so!0x177827,0xb4fb777d libNetHTProtect.so!0x17777d,0xe6387139 libc.so!_ZL15__pthread_startPv+0x2a,0xe633fd57 libc.so!__start_thread+0x20

[JNIEnv] 调用: GetStringUTFChars
  参数: �
调用栈:
0xda7a9105 libopenjdk.so!Mock_getProperty+0x2c,0x70e653e3 boot.oat!0xa73e3
[JNIEnv] GetStringUTFChars 返回: lsp.statfs.data.availableBlocksLong.origin

[JNIEnv] 调用: NewStringUTF
  参数: 13396179
调用栈:
0xda7a2b8d libopenjdk.so!Java_java_io_UnixFileSystem_canonicalize0+0x30,0x70e65bbf boot.oat!0xa7bbf
[JNIEnv] GetStringUTFChars 返回: /storage/emulated/0

[JNIEnv] 调用: NewStringUTF
  参数: /storage/emulated/0
调用栈:
0xda7a2c27 libopenjdk.so!Java_java_io_UnixFileSystem_getBooleanAttributes0+0x22,0x70e65c27 boot.oat!0xa7c27
[JNIEnv] GetStringUTFChars 返回: /data/app/~~hYKtoZqlctb0dKGf8OSOKQ==/com.sytt.tzy-YAzL_LiSSbrdnOTT58XTsA==/base.apk

[JNIEnv] 调用: GetStringUTFChars
  参数: �
调用栈:
0xe72ec8eb libandroid_runtime.so!0x1288eb,0x71fba1ab boot-framework.oat!0x1861ab
[JNIEnv] GetStringUTFChars 返回: /data/app/~~hYKtoZqlctb0dKGf8OSOKQ==/com.sytt.tzy-YAzL_LiSSbrdnOTT58XTsA==/base.apk

[JNIEnv] 调用: GetStringUTFChars
  参数: .Lqz��
调用栈:
0xda7a2bb7 libopenjdk.so!Java_java_io_UnixFileSystem_canonicalize0+0x5a,0x70e65bbf boot.oat!0xa7bbf

[JNIEnv] 调用: GetStringUTFChars
  参数: P&�
调用栈:
0xda7a9141 libopenjdk.so!Mock_getProperty+0x68,0x70e653e3 boot.oat!0xa73e3

[JNIEnv] 调用: GetStringUTFChars
  参数: (��
调用栈:
0xe72edb0b libandroid_runtime.so!0x129b0b,0x71fba43b boot-framework.oat!0x18643b
[JNIEnv] GetStringUTFChars 返回: AndroidManifest.xml

[JNIEnv] 调用: GetStringUTFChars
  参数: �
调用栈:
0xda7a9105 libopenjdk.so!Mock_getProperty+0x2c,0x70e653e3 boot.oat!0xa73e3
[JNIEnv] GetStringUTFChars 返回: lsp.statfs.data.availableBlocksLong

[JNIEnv] 调用: NewStringUTF
  参数: 13558898
调用栈:
0xe72ec8eb libandroid_runtime.so!0x1288eb,0x71fba1ab boot-framework.oat!0x1861ab
[JNIEnv] GetStringUTFChars 返回: /data/app/~~hYKtoZqlctb0dKGf8OSOKQ==/com.sytt.tzy-YAzL_LiSSbrdnOTT58XTsA==/base.apk

[JNIEnv] 调用: NewStringUTF
  参数: /system/framework/framework-res.apk
调用栈:
0xda7a2b8d libopenjdk.so!Java_java_io_UnixFileSystem_canonicalize0+0x30,0x70e65bbf boot.oat!0xa7bbf
[JNIEnv] GetStringUTFChars 返回: /storage/emulated/0

[JNIEnv] 调用: NewStringUTF
  参数: /storage/emulated/0
调用栈:
0xe72eda57 libandroid_runtime.so!0x129a57,0x71fba017 boot-framework.oat!0x186017

[JNIEnv] 调用: NewStringUTF
  参数: /vendor/overlay/framework-res__auto_generated_rro_vendor.apk
调用栈:
0xda7a9141 libopenjdk.so!Mock_getProperty+0x68,0x70e653e3 boot.oat!0xa73e3

[JNIEnv] 调用: GetStringUTFChars
  参数: ��Nq
调用栈:
0xe72eda57 libandroid_runtime.so!0x129a57,0x71fba017 boot-framework.oat!0x186017

[JNIEnv] 调用: NewStringUTF
  参数: /system/product/overlay/framework-res__auto_generated_rro_product.apk
调用栈:
0xda7a2bb7 libopenjdk.so!Java_java_io_UnixFileSystem_canonicalize0+0x5a,0x70e65bbf boot.oat!0xa7bbf

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x1b9a
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: /storage/emulated/0/Android/data/com.sytt.tzy/files

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x1b92
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: /storage/emulated/0/Android/data/com.sytt.tzy

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x1b96
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: /storage/emulated/0/Android/data/com.sytt.tzy/files

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x1aea
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: /data/app/~~hYKtoZqlctb0dKGf8OSOKQ==/com.sytt.tzy-YAzL_LiSSbrdnOTT58XTsA==/base.apk

[JNIEnv] 调用: NewStringUTF
  参数: emulated;0
调用栈:
0xe723df49 libandroid_runtime.so!0x79f49,0x71fc0ddd boot-framework.oat!0x18cddd
[JNIEnv] GetStringUTFChars 返回: debug.sqlite.pagesize

[JNIEnv] 调用: NewStringUTF
  参数: TRUNCATE
调用栈:
0xe72eda57 libandroid_runtime.so!0x129a57,0x71fba017 boot-framework.oat!0x186017

[JNIEnv] 调用: NewStringUTF
  参数: /vendor/overlay/org.lineageos.platform-res__auto_generated_rro_vendor.apk
调用栈:
0xe7241659 libandroid_runtime.so!0x7d659,0x71fba861 boot-framework.oat!0x186861

[JNIEnv] 调用: GetStringUTFChars
  参数: ��Nq���@ʀrXT�
调用栈:
0xe72eda57 libandroid_runtime.so!0x129a57,0x71fba017 boot-framework.oat!0x186017

[JNIEnv] 调用: NewStringUTF
  参数: /system/product/overlay/org.lineageos.platform-res__auto_generated_rro_product.apk
调用栈:
0xe723de83 libandroid_runtime.so!0x79e83,0x71fcdccb boot-framework.oat!0x199ccb
[JNIEnv] GetStringUTFChars 返回: debug.sqlite.journalmode

[JNIEnv] 调用: NewStringUTF
  参数: FULL
调用栈:
0xe72eda57 libandroid_runtime.so!0x129a57,0x71fba017 boot-framework.oat!0x186017

[JNIEnv] 调用: NewStringUTF
  参数: /system/framework/org.lineageos.platform-res.apk
调用栈:
0xe7241659 libandroid_runtime.so!0x7d659,0x71fba861 boot-framework.oat!0x186861

[JNIEnv] 调用: GetStringUTFChars
  参数: �Nq���@ʀrXT�
调用栈:
0xe72eda57 libandroid_runtime.so!0x129a57,0x71fba017 boot-framework.oat!0x186017

[JNIEnv] 调用: NewStringUTF
  参数: /data/app/~~hYKtoZqlctb0dKGf8OSOKQ==/com.sytt.tzy-YAzL_LiSSbrdnOTT58XTsA==/base.apk
调用栈:
0xe723de83 libandroid_runtime.so!0x79e83,0x71fcdccb boot-framework.oat!0x199ccb
[JNIEnv] GetStringUTFChars 返回: debug.sqlite.syncmode

[JNIEnv] 调用: GetStringUTFChars
  参数: ��Nq
调用栈:
0xe72eda57 libandroid_runtime.so!0x129a57,0x71fba017 boot-framework.oat!0x186017

[JNIEnv] 调用: GetStringUTFChars
  参数: .Lq
调用栈:
0xe723df49 libandroid_runtime.so!0x79f49,0x71fc0ddd boot-framework.oat!0x18cddd
[JNIEnv] GetStringUTFChars 返回: debug.sqlite.journalsizelimit

[JNIEnv] 调用: GetStringUTFChars
  参数: 8�Nqd
调用栈:
0xe72b58fd libandroid_runtime.so!0xf18fd,0x71fbae73 boot-framework.oat!0x186e73
[JNIEnv] GetStringUTFChars 返回: AndroidManifest.xml

[JNIEnv] 调用: GetStringUTFChars
  参数: 8	Rq���ph�r����8	Rqh�r_�7r0)�qXe�r82�rs�/r�Z�q882�r��r(�q��"qlϙq
调用栈:
0xe723df49 libandroid_runtime.so!0x79f49,0x71fc0ddd boot-framework.oat!0x18cddd
[JNIEnv] GetStringUTFChars 返回: debug.sqlite.wal.autocheckpoint

[JNIEnv] 调用: GetStringUTFChars
  参数: X��
调用栈:
0xe723de83 libandroid_runtime.so!0x79e83,0x71fcdccb boot-framework.oat!0x199ccb
[JNIEnv] GetStringUTFChars 返回: debug.force_rtl

[JNIEnv] 调用: NewStringUTF
  参数: false
调用栈:
0xe727ea99 libandroid_runtime.so!0xbaa99,0x71fb96e3 boot-framework.oat!0x1856e3
[JNIEnv] GetStringUTFChars 返回: zh_CN

[JNIEnv] 调用: GetStringUTFChars
  参数: �N��
调用栈:
0xe723e443 libandroid_runtime.so!0x7a443,0xe633e5b5 libc.so!_ZN16SystemProperties12ReadCallbackEPK9prop_infoPFvPvPKcS5_jES3_+0xa8,0xe723de97 libandroid_runtime.so!0x79e97,0x71fcdccb boot-framework.oat!0x199ccb

[JNIEnv] 调用: GetStringUTFChars
  参数: `
调用栈:
0xda7df40d libjavacore.so!0x1840d,0x711669bb boot-core-libart.oat!0x109bb
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/databases/ua.db

[JNIEnv] 调用: GetStringUTFChars
  参数: �N�
调用栈:
0xe72b4b5b libandroid_runtime.so!0xf0b5b,0x71fbb1bb boot-framework.oat!0x1871bb
[JNIEnv] GetStringUTFChars 返回: zh-CN

[JNIEnv] 调用: NewStringUTF
  参数: 神域天堂
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /storage/emulated/0
调用栈:
0xe727c21b libandroid_runtime.so!0xb821b,0x71fbe09d boot-framework.oat!0x18a09d
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/databases/ua.db

[JNIEnv] 调用: GetStringUTFChars
  参数: �oLq
调用栈:
0xe7241659 libandroid_runtime.so!0x7d659,0x71fba861 boot-framework.oat!0x186861

[JNIEnv] 调用: GetStringUTFChars
  参数: �
调用栈:
0xe7240f31 libandroid_runtime.so!0x7cf31,0x71fc0ddd boot-framework.oat!0x18cddd
[JNIEnv] GetStringUTFChars 返回: CursorWindowStats

[JNIEnv] 调用: GetStringUTFChars
  参数: �N�
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /storage/emulated/0
调用栈:
0xda7a2b8d libopenjdk.so!Java_java_io_UnixFileSystem_canonicalize0+0x30,0x70e65bbf boot.oat!0xa7bbf
[JNIEnv] GetStringUTFChars 返回: /data/app/~~hYKtoZqlctb0dKGf8OSOKQ==/com.sytt.tzy-YAzL_LiSSbrdnOTT58XTsA==/base.apk

[JNIEnv] 调用: NewStringUTF
  参数: /data/app/~~hYKtoZqlctb0dKGf8OSOKQ==/com.sytt.tzy-YAzL_LiSSbrdnOTT58XTsA==/base.apk
调用栈:
0xe727c21b libandroid_runtime.so!0xb821b,0x71fbe09d boot-framework.oat!0x18a09d
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/databases/ua.db

[JNIEnv] 调用: GetStringUTFChars
  参数: �oLq
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: 内部共享存储空间
调用栈:
0xda7a2bb7 libopenjdk.so!Java_java_io_UnixFileSystem_canonicalize0+0x5a,0x70e65bbf boot.oat!0xa7bbf

[JNIEnv] 调用: GetStringUTFChars
  参数: �
调用栈:
0xe7240f31 libandroid_runtime.so!0x7cf31,0x71fc0ddd boot-framework.oat!0x18cddd
[JNIEnv] GetStringUTFChars 返回: CursorWindowStats

[JNIEnv] 调用: GetStringUTFChars
  参数: �N�
调用栈:
0xe72b2cdf libandroid_runtime.so!0xeecdf,0x71fbdaa1 boot-framework.oat!0x189aa1
[JNIEnv] GetStringUTFChars 返回: /data/app/~~hYKtoZqlctb0dKGf8OSOKQ==/com.sytt.tzy-YAzL_LiSSbrdnOTT58XTsA==/base.apk

[JNIEnv] 调用: GetStringUTFChars
  参数: �
调用栈:
0xe727c21b libandroid_runtime.so!0xb821b,0x71fbe09d boot-framework.oat!0x18a09d
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/databases/ua.db

[JNIEnv] 调用: GetStringUTFChars
  参数: �oLq
调用栈:
0xda7e2b8f libjavacore.so!0x1bb8f,0x71166d05 boot-core-libart.oat!0x10d05
[JNIEnv] GetStringUTFChars 返回: /data/app/~~hYKtoZqlctb0dKGf8OSOKQ==/com.sytt.tzy-YAzL_LiSSbrdnOTT58XTsA==/base.apk

[JNIEnv] 调用: GetStringUTFChars
  参数: �
调用栈:
0xe7240f31 libandroid_runtime.so!0x7cf31,0x71fc0ddd boot-framework.oat!0x18cddd
[JNIEnv] GetStringUTFChars 返回: CursorWindowStats

[JNIEnv] 调用: GetStringUTFChars
  参数: �N�
调用栈:
0xda7e2b8f libjavacore.so!0x1bb8f,0x71166d05 boot-core-libart.oat!0x10d05
[JNIEnv] GetStringUTFChars 返回: /data/app/~~hYKtoZqlctb0dKGf8OSOKQ==/com.sytt.tzy-YAzL_LiSSbrdnOTT58XTsA==/base.apk

[JNIEnv] 调用: GetStringUTFChars
  参数: ���rL��@*�p���r���r���p���r���r���p��pP��p)�p)�p���p(P�p���p(P�pi��p��p0��rC0�	)�p0b�����p(P�px�0�p���@�%uqm�p0��r���r0�r���p(_�p
调用栈:
0xe727c21b libandroid_runtime.so!0xb821b,0x71fbe09d boot-framework.oat!0x18a09d
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/databases/ua.db

[JNIEnv] 调用: GetStringUTFChars
  参数: �oLq
调用栈:
0xe534c0fd libart.so!_ZN3artL29VMClassLoader_findLoadedClassEP7_JNIEnvP7_jclassP8_jobjectP8_jstring+0x40,0x711656bb boot-core-libart.oat!0xf6bb
[JNIEnv] GetStringUTFChars 返回: com.android.org.conscrypt.OpenSSLSignature$SHA256RSA

[JNIEnv] 调用: GetStringUTFChars
  参数: x�
调用栈:
0xe7240f31 libandroid_runtime.so!0x7cf31,0x71fc0ddd boot-framework.oat!0x18cddd
[JNIEnv] GetStringUTFChars 返回: CursorWindowStats

[JNIEnv] 调用: NewStringUTF
  参数: com.sytt.tzy
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.android.org.conscrypt.OpenSSLKeyHolder

[JNIEnv] 调用: GetStringUTFChars
  参数: ��
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: 1.0.0
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: java.security.interfaces.RSAPrivateKey

[JNIEnv] 调用: GetStringUTFChars
  参数: ��
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: com.sytt.tzy
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: java.security.interfaces.ECPrivateKey

[JNIEnv] 调用: GetStringUTFChars
  参数: (�
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: mounted
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: com.sytt.tzy
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: java.security.interfaces.RSAPublicKey
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: com.sytt.tzy
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: GetStringUTFChars
  参数: P+�
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /data/app/~~hYKtoZqlctb0dKGf8OSOKQ==/com.sytt.tzy-YAzL_LiSSbrdnOTT58XTsA==
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /storage/emulated/0/Android/obb/com.sytt.tzy

[JNIEnv] 调用: GetStringUTFChars
  参数: P+�
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /data/app/~~hYKtoZqlctb0dKGf8OSOKQ==/com.sytt.tzy-YAzL_LiSSbrdnOTT58XTsA==
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /storage/emulated/0/Android/obb/com.sytt.tzy

[JNIEnv] 调用: NewStringUTF
  参数: com.sytt.tzy
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /data/app/~~hYKtoZqlctb0dKGf8OSOKQ==/com.sytt.tzy-YAzL_LiSSbrdnOTT58XTsA==/base.apk

[JNIEnv] 调用: GetStringUTFChars
[JNIEnv] GetStringUTFChars 返回: /data/app/~~hYKtoZqlctb0dKGf8OSOKQ==/com.sytt.tzy-YAzL_LiSSbrdnOTT58XTsA==/base.apk
Error: access violation accessing 0x1
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: 1.0.0
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /data/app/~~hYKtoZqlctb0dKGf8OSOKQ==/com.sytt.tzy-YAzL_LiSSbrdnOTT58XTsA==/base.apk
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: com.sytt.tzy
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /data/app/~~hYKtoZqlctb0dKGf8OSOKQ==/com.sytt.tzy-YAzL_LiSSbrdnOTT58XTsA==/lib/arm
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: com.sytt.tzy
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /data/app/~~hYKtoZqlctb0dKGf8OSOKQ==/com.sytt.tzy-YAzL_LiSSbrdnOTT58XTsA==/lib
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: com.sytt.tzy
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: armeabi-v7a
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /data/app/~~hYKtoZqlctb0dKGf8OSOKQ==/com.sytt.tzy-YAzL_LiSSbrdnOTT58XTsA==
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /data/resource-cache/com.android.systemui-neutral-Bkw5.frro
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /data/app/~~hYKtoZqlctb0dKGf8OSOKQ==/com.sytt.tzy-YAzL_LiSSbrdnOTT58XTsA==
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /data/resource-cache/com.android.systemui-accent-Mq6z.frro
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /data/app/~~hYKtoZqlctb0dKGf8OSOKQ==/com.sytt.tzy-YAzL_LiSSbrdnOTT58XTsA==/base.apk
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: default:targetSdkVersion=29
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /data/app/~~hYKtoZqlctb0dKGf8OSOKQ==/com.sytt.tzy-YAzL_LiSSbrdnOTT58XTsA==/base.apk
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: :complete
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /data/app/~~hYKtoZqlctb0dKGf8OSOKQ==/com.sytt.tzy-YAzL_LiSSbrdnOTT58XTsA==/lib/arm
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /system/framework/android.test.base.jar
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /data/app/~~hYKtoZqlctb0dKGf8OSOKQ==/com.sytt.tzy-YAzL_LiSSbrdnOTT58XTsA==/lib
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /system/framework/android.test.base.jar
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: armeabi-v7a
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: android.test.base
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /data/resource-cache/com.android.systemui-neutral-Bkw5.frro
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: android
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /data/resource-cache/com.android.systemui-accent-Mq6z.frro
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /data/user/0/com.sytt.tzy
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: default:targetSdkVersion=29
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /data/user_de/0/com.sytt.tzy
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: :complete
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /data/user/0/com.sytt.tzy
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /system/framework/android.test.base.jar
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: 10
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /system/framework/android.test.base.jar
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: android.test.base
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: 10
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: android
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: GetStringUTFChars
  参数: ���������X�c�D�c�[#
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /data/user/0/com.sytt.tzy
调用栈:
0xd04258cb libjavacrypto.so!0x1d8cb,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50ac560 libart.so!nterp_helper+0xb0,0xe50acfa4 libart.so!nterp_helper+0xaf4,0x70ede2cb boot.oat!0x1202cb
[JNIEnv] GetStringUTFChars 返回: aes-128-cbc
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /data/user_de/0/com.sytt.tzy

[JNIEnv] 调用: GetStringUTFChars
  参数: xR�
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /data/user/0/com.sytt.tzy
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/umeng_general_config.xml

[JNIEnv] 调用: GetStringUTFChars
  参数: (Y�
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: 10
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/umeng_general_config.xml.bak

[JNIEnv] 调用: NewStringUTF
  参数: access
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: 10
调用栈:
0xda7de385 libjavacore.so!0x17385,0x7116659b boot-core-libart.oat!0x1059b

[JNIEnv] 调用: GetStringUTFChars
  参数: xR�(Y�h_�p8h�p(h�p
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: GetStringUTFChars
[JNIEnv] GetStringUTFChars 返回: /storage/emulated/0/Android/obb/com.sytt.tzy

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x1bc6
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
Error: access violation accessing 0x1ba6
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: com.sytt.tzy

[JNIEnv] 调用: NewStringUTF
  参数: unity.build-id
调用栈:
0xda7e4391 libjavacore.so!0x1d391,0x711668e9 boot-core-libart.oat!0x108e9
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/umeng_general_config.xml

[JNIEnv] 调用: GetStringUTFChars
  参数: (Y�h_�p8h�p(h�p
调用栈:
0xb72d04f3 libunity.so!0xcbf4f3

[JNIEnv] 调用: GetStringUTFChars
[JNIEnv] GetStringUTFChars 返回: 9c7b31a6-a42f-4e32-a435-4122bdad299d
Error: access violation accessing 0x1a22
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)

[JNIEnv] 调用: GetStringUTFChars
  参数: �6�
调用栈:
0xda7e43ab libjavacore.so!0x1d3ab,0x711668e9 boot-core-libart.oat!0x108e9
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/umeng_general_config.xml.bak

[JNIEnv] 调用: GetStringUTFChars
  参数: xR�A
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: java.lang.Runnable

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x1a12
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: com.sytt.tzy

[JNIEnv] 调用: NewStringUTF
  参数: com.sytt.tzy.v2.playerprefs

[JNIEnv] 调用: NewStringUTF
  参数: zh-CN
调用栈:
0xda7e2b8f libjavacore.so!0x1bb8f,0x71166d05 boot-core-libart.oat!0x10d05
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/umeng_general_config.xml

[JNIEnv] 调用: GetStringUTFChars
  参数: 8U�r
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: zh-CN
调用栈:
0xdc22e867 libicu_jni.so!0x8867,0x72677869 boot-core-icu4j.oat!0x2e869
[JNIEnv] GetStringUTFChars 返回: UTF-8

[JNIEnv] 调用: GetStringUTFChars
  参数: xR��
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: zh-CN
调用栈:
0xda7df40d libjavacore.so!0x1840d,0x711669bb boot-core-libart.oat!0x109bb
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/umeng_general_config.xml

[JNIEnv] 调用: GetStringUTFChars
  参数: xR�h_�p0Z�p(h�ph�Kq8h�ph�Kqh�Kq
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: com.sytt.tzy/com.sytt.tzy.UnityPlayerActivity
调用栈:
0xda7e8c87 libjavacore.so!0x21c87,0x7116694f boot-core-libart.oat!0x1094f
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/umeng_general_config.xml

[JNIEnv] 调用: GetStringUTFChars
  参数: (Y�h_�p0Z�p(h�ph�Kq8h�ph�Kqh�Kq
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: Surface(name=4c456cf StatusBar)/@0xa0c72a - animation-leash of insets_animation
调用栈:
0xb72d04f3 libunity.so!0xcbf4f3

[JNIEnv] 调用: GetStringUTFChars
  参数: p�
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: Surface(name=75cdafa InputMethod)/@0x88c92a1 - animation-leash of insets_animation
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy

[JNIEnv] 调用: GetStringUTFChars
  参数: �;�
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs

[JNIEnv] 调用: GetStringUTFChars
  参数: ��Qq
调用栈:
0xda7e4143 libjavacore.so!0x1d143,0x71164e9f boot-core-libart.oat!0xee9f
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/umeng_general_config.xml.bak
调用栈:
0xe723e147 libandroid_runtime.so!0x7a147,0x71fcdc41 boot-framework.oat!0x199c41
[JNIEnv] GetStringUTFChars 返回: cache_key.is_user_unlocked

[JNIEnv] 调用: GetStringUTFChars
  参数: �C�

[JNIEnv] 调用: GetStringUTFChars
  参数: ��
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/com.sytt.tzy.v2.playerprefs.xml.bak

[JNIEnv] 调用: NewStringUTF
  参数: access
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/databases

[JNIEnv] 调用: GetStringUTFChars
  参数: @�
调用栈:
0xda7de385 libjavacore.so!0x17385,0x7116659b boot-core-libart.oat!0x1059b

[JNIEnv] 调用: GetStringUTFChars
  参数: H=�
调用栈:
0xe727e6bb libandroid_runtime.so!0xba6bb,0x71fc284b boot-framework.oat!0x18e84b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/databases/ua.db

[JNIEnv] 调用: GetStringUTFChars
  参数: @�
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/com.sytt.tzy.v2.playerprefs.xml

[JNIEnv] 调用: GetStringUTFChars
  参数: H=�
调用栈:
0xe727e6e5 libandroid_runtime.so!0xba6e5,0x71fc284b boot-framework.oat!0x18e84b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/databases/ua.db

[JNIEnv] 调用: GetStringUTFChars
  参数: ��Nq
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/com.sytt.tzy.v2.playerprefs.xml

[JNIEnv] 调用: GetStringUTFChars
  参数: H=�h_�p0Z�p(h�ph�Kq8h�ph�Kqh�Kq�?z�wu�pZ�p�5��5�H=�h�Kq�?z�t?z����q�Mtq�5���r�<�xA��?z�t?z��A�pH=��5�xA���qP��p�5�h@�xA�@�@�H=��,r�xq
调用栈:
0xe723df49 libandroid_runtime.so!0x79f49,0x71fc0ddd boot-framework.oat!0x18cddd
[JNIEnv] GetStringUTFChars 返回: debug.sqlite.pagesize

[JNIEnv] 调用: GetStringUTFChars
  参数: ��Nq���@ʀr�
�
调用栈:
0xda7e8c87 libjavacore.so!0x21c87,0x7116694f boot-core-libart.oat!0x1094f
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/com.sytt.tzy.v2.playerprefs.xml

[JNIEnv] 调用: GetStringUTFChars
  参数: H=�
调用栈:
0xe723de83 libandroid_runtime.so!0x79e83,0x71fcdccb boot-framework.oat!0x199ccb
[JNIEnv] GetStringUTFChars 返回: debug.sqlite.journalmode

[JNIEnv] 调用: GetStringUTFChars
  参数: �Nq���@ʀr�
�
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/com.sytt.tzy.v2.playerprefs.xml

[JNIEnv] 调用: GetStringUTFChars
  参数: H=�
调用栈:
0xe723de83 libandroid_runtime.so!0x79e83,0x71fcdccb boot-framework.oat!0x199ccb
[JNIEnv] GetStringUTFChars 返回: debug.sqlite.syncmode

[JNIEnv] 调用: GetStringUTFChars
  参数: ��Nq
调用栈:
0xda7e2b8f libjavacore.so!0x1bb8f,0x71166d05 boot-core-libart.oat!0x10d05
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/com.sytt.tzy.v2.playerprefs.xml

[JNIEnv] 调用: GetStringUTFChars
  参数: 8U�rHtH
调用栈:
0xe723df49 libandroid_runtime.so!0x79f49,0x71fc0ddd boot-framework.oat!0x18cddd
[JNIEnv] GetStringUTFChars 返回: debug.sqlite.journalsizelimit

[JNIEnv] 调用: GetStringUTFChars
  参数: 8�Nqd
调用栈:
0xe723df49 libandroid_runtime.so!0x79f49,0x71fc0ddd boot-framework.oat!0x18cddd
[JNIEnv] GetStringUTFChars 返回: debug.sqlite.wal.autocheckpoint

[JNIEnv] 调用: GetStringUTFChars
  参数: ��
调用栈:
0xdc22e867 libicu_jni.so!0x8867,0x72677869 boot-core-icu4j.oat!0x2e869
[JNIEnv] GetStringUTFChars 返回: UTF-8

[JNIEnv] 调用: NewStringUTF
  参数: __UNITY_PLAYERPREFS_VERSION__
调用栈:
0xe727ea99 libandroid_runtime.so!0xbaa99,0x71fb96e3 boot-framework.oat!0x1856e3
[JNIEnv] GetStringUTFChars 返回: zh_CN

[JNIEnv] 调用: GetStringUTFChars
  参数: @��
调用栈:
0xb72d04f3 libunity.so!0xcbf4f3

[JNIEnv] 调用: NewStringUTF
  参数: __UNITY_PLAYERPREFS_VERSION__
调用栈:
0xda7df40d libjavacore.so!0x1840d,0x711669bb boot-core-libart.oat!0x109bb
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/databases/ua.db

[JNIEnv] 调用: GetStringUTFChars
  参数: @�
调用栈:
0xb72d04f3 libunity.so!0xcbf4f3

[JNIEnv] 调用: GetStringUTFChars
  参数: �7

[JNIEnv] 调用: GetStringUTFChars
  参数: �I�
调用栈:
0xe723df49 libandroid_runtime.so!0x79f49,0x71fc0ddd boot-framework.oat!0x18cddd
[JNIEnv] GetStringUTFChars 返回: log.looper.10150.queued-work-looper.slow
调用栈:
0xe727c21b libandroid_runtime.so!0xb821b,0x71fbe09d boot-framework.oat!0x18a09d
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/databases/ua.db

[JNIEnv] 调用: GetStringUTFChars
  参数: �oLq

[JNIEnv] 调用: GetStringUTFChars
  参数: H=�
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: android.view.View$OnSystemUiVisibilityChangeListener

[JNIEnv] 调用: GetStringUTFChars
  参数: �6�
调用栈:
0xe7240f31 libandroid_runtime.so!0x7cf31,0x71fc0ddd boot-framework.oat!0x18cddd
[JNIEnv] GetStringUTFChars 返回: CursorWindowStats

[JNIEnv] 调用: GetStringUTFChars
  参数: xR�
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: java.lang.Runnable

[JNIEnv] 调用: NewStringUTF
  参数: com.sytt.tzy

[JNIEnv] 调用: NewStringUTF
  参数: zh-CN
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/umeng_general_config.xml

[JNIEnv] 调用: GetStringUTFChars
  参数: (Y�
调用栈:
0xb72d04f3 libunity.so!0xcbf4f3

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x1c66
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: 1.0.0

[JNIEnv] 调用: NewStringUTF
  参数: monobdwgc-2.0
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: zh-CN
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/umeng_general_config.xml.bak

[JNIEnv] 调用: NewStringUTF
  参数: access
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/com.sytt.tzy.v2.playerprefs.xml
调用栈:
0xb72d04f3 libunity.so!0xcbf4f3

[JNIEnv] 调用: GetStringUTFChars
  参数: �Q�
调用栈:
0xda7de385 libjavacore.so!0x17385,0x7116659b boot-core-libart.oat!0x1059b

[JNIEnv] 调用: GetStringUTFChars
  参数: xR�(Y�h_�p8h�p(h�p
调用栈:
0xda7e2b8f libjavacore.so!0x1bb8f,0x71166d05 boot-core-libart.oat!0x10d05
[JNIEnv] GetStringUTFChars 返回: /data/app/~~hYKtoZqlctb0dKGf8OSOKQ==/com.sytt.tzy-YAzL_LiSSbrdnOTT58XTsA==/lib/arm/libmonobdwgc-2.0.so

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x1c26
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: /data/app/~~hYKtoZqlctb0dKGf8OSOKQ==/com.sytt.tzy-YAzL_LiSSbrdnOTT58XTsA==/lib/arm/libmonobdwgc-2.0.so
调用栈:
0xda7e4391 libjavacore.so!0x1d391,0x711668e9 boot-core-libart.oat!0x108e9
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/umeng_general_config.xml

[JNIEnv] 调用: GetStringUTFChars
  参数: (Y�h_�p8h�p(h�p
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: zh-CN

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x1cc6
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: Xiaomi
调用栈:
0xda7e43ab libjavacore.so!0x1d3ab,0x711668e9 boot-core-libart.oat!0x108e9
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/umeng_general_config.xml.bak

[JNIEnv] 调用: GetStringUTFChars
  参数: xR�A

[JNIEnv] 调用: NewStringUTF
  参数: UnityGraphicsQuality
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: com.sytt.tzy/com.sytt.tzy.UnityPlayerActivity
调用栈:
0xda7e2b8f libjavacore.so!0x1bb8f,0x71166d05 boot-core-libart.oat!0x10d05
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/umeng_general_config.xml

[JNIEnv] 调用: GetStringUTFChars
  参数: 8U�r
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: Surface(name=4c456cf StatusBar)/@0xa0c72a - animation-leash of insets_animation
调用栈:
0xdc22e867 libicu_jni.so!0x8867,0x72677869 boot-core-icu4j.oat!0x2e869
[JNIEnv] GetStringUTFChars 返回: UTF-8

[JNIEnv] 调用: GetStringUTFChars
  参数: xR��
调用栈:
0xb72d04f3 libunity.so!0xcbf4f3

[JNIEnv] 调用: GetStringUTFChars
  参数: �X�
调用栈:
0xda7df40d libjavacore.so!0x1840d,0x711669bb boot-core-libart.oat!0x109bb
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/umeng_general_config.xml

[JNIEnv] 调用: GetStringUTFChars
  参数: xR�h_�p0Z�p(h�ph�Kq8h�ph�Kqh�Kq
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: android.view.View$OnApplyWindowInsetsListener

[JNIEnv] 调用: NewStringUTF
  参数: unitySurfaceView
调用栈:
0xda7e8c87 libjavacore.so!0x21c87,0x7116694f boot-core-libart.oat!0x1094f
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/umeng_general_config.xml

[JNIEnv] 调用: GetStringUTFChars
  参数: (Y�h_�p0Z�p(h�ph�Kq8h�ph�Kqh�Kq
调用栈:
0xb72d04f3 libunity.so!0xcbf4f3

[JNIEnv] 调用: NewStringUTF
  参数: id
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: Surface(name=75cdafa InputMethod)/@0x88c92a1 - animation-leash of insets_animation
调用栈:
0xda7e4143 libjavacore.so!0x1d143,0x71164e9f boot-core-libart.oat!0xee9f
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/umeng_general_config.xml.bak

[JNIEnv] 调用: GetStringUTFChars
  参数: �&�X+���c���c�`�
�����}��C0�	
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: MobclickAgent

[JNIEnv] 调用: GetStringUTFChars
  参数: X+���c���c�`�
�����}��C0�	
调用栈:
0xb72d04f3 libunity.so!0xcbf4f3

[JNIEnv] 调用: GetStringUTFChars
  参数: �]��]�h��.��+��]��]��vU��9r\͙q�+�
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 延续上一个会话: 267A00E061645180845BBD7794F3239E

[JNIEnv] 调用: GetStringUTFChars
  参数: H/�
调用栈:
0xe72b6cfd libandroid_runtime.so!0xf2cfd,0x71fbaac7 boot-framework.oat!0x186ac7
[JNIEnv] GetStringUTFChars 返回: unitySurfaceView

[JNIEnv] 调用: GetStringUTFChars
  参数: �]�h��.��+��]��]��vU��9r\͙q�+�
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/databases

[JNIEnv] 调用: GetStringUTFChars
  参数: �.�
调用栈:
0xe727e6bb libandroid_runtime.so!0xba6bb,0x71fc284b boot-framework.oat!0x18e84b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/databases/ua.db

[JNIEnv] 调用: GetStringUTFChars
  参数: �.�
调用栈:
0xe72b6d1f libandroid_runtime.so!0xf2d1f,0x71fbaac7 boot-framework.oat!0x186ac7
[JNIEnv] GetStringUTFChars 返回: id

[JNIEnv] 调用: GetStringUTFChars
  参数: h��.��+��]��]��vU��9r\͙q�+�
调用栈:
0xe727e6e5 libandroid_runtime.so!0xba6e5,0x71fc284b boot-framework.oat!0x18e84b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/databases/ua.db

[JNIEnv] 调用: GetStringUTFChars
  参数: ��Nq
调用栈:
0xe72b6d59 libandroid_runtime.so!0xf2d59,0x71fbaac7 boot-framework.oat!0x186ac7
[JNIEnv] GetStringUTFChars 返回: com.sytt.tzy

[JNIEnv] 调用: GetStringUTFChars
  参数: �b�
调用栈:
0xe723df49 libandroid_runtime.so!0x79f49,0x71fc0ddd boot-framework.oat!0x18cddd
[JNIEnv] GetStringUTFChars 返回: debug.sqlite.pagesize

[JNIEnv] 调用: GetStringUTFChars
  参数: ��Nq���@ʀr@3�
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: android.view.View$OnLayoutChangeListener

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x1d3a
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: M2012K11AC

[JNIEnv] 调用: NewStringUTF
  参数: Screenmanager Resolution Width
调用栈:
0xe723de83 libandroid_runtime.so!0x79e83,0x71fcdccb boot-framework.oat!0x199ccb
[JNIEnv] GetStringUTFChars 返回: debug.sqlite.journalmode

[JNIEnv] 调用: GetStringUTFChars
  参数: �Nq���@ʀr@3�
调用栈:
0xb72d04f3 libunity.so!0xcbf4f3

[JNIEnv] 调用: NewStringUTF
  参数: Screenmanager Resolution Height
调用栈:
0xe723de83 libandroid_runtime.so!0x79e83,0x71fcdccb boot-framework.oat!0x199ccb
[JNIEnv] GetStringUTFChars 返回: debug.sqlite.syncmode

[JNIEnv] 调用: GetStringUTFChars
  参数: ��Nq
调用栈:
0xb72d04f3 libunity.so!0xcbf4f3

[JNIEnv] 调用: NewStringUTF
  参数: Screenmanager Fullscreen mode
调用栈:
0xe723df49 libandroid_runtime.so!0x79f49,0x71fc0ddd boot-framework.oat!0x18cddd
[JNIEnv] GetStringUTFChars 返回: debug.sqlite.journalsizelimit

[JNIEnv] 调用: GetStringUTFChars
  参数: 8�Nqd
调用栈:
0xb72d04f3 libunity.so!0xcbf4f3

[JNIEnv] 调用: NewStringUTF
  参数: emulated;0
调用栈:
0xe723df49 libandroid_runtime.so!0x79f49,0x71fc0ddd boot-framework.oat!0x18cddd
[JNIEnv] GetStringUTFChars 返回: debug.sqlite.wal.autocheckpoint

[JNIEnv] 调用: GetStringUTFChars
  参数:  <�
调用栈:
0xe727ea99 libandroid_runtime.so!0xbaa99,0x71fb96e3 boot-framework.oat!0x1856e3
[JNIEnv] GetStringUTFChars 返回: zh_CN

[JNIEnv] 调用: GetStringUTFChars
  参数: �.��
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /storage/emulated/0
调用栈:
0xda7df40d libjavacore.so!0x1840d,0x711669bb boot-core-libart.oat!0x109bb
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/databases/ua.db

[JNIEnv] 调用: GetStringUTFChars
  参数: xR�
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /storage/emulated/0
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/umeng_general_config.xml

[JNIEnv] 调用: GetStringUTFChars
  参数: ���P�
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: 内部共享存储空间
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: UMLog

[JNIEnv] 调用: GetStringUTFChars
  参数: P�
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: mounted
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 当前发送策略为：启动时发送。详见链接 https://developer.umeng.com/docs/66632/detail/66976?um_channel=sdk
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: GetStringUTFChars
  参数: pp�
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /storage/emulated/0/Android/data/com.sytt.tzy/cache

[JNIEnv] 调用: GetStringUTFChars
  参数: pp�
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /storage/emulated/0/Android/data/com.sytt.tzy/cache

[JNIEnv] 调用: GetStringUTFChars
  参数: p�
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy

[JNIEnv] 调用: GetStringUTFChars
  参数: �p�
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/cache

[JNIEnv] 调用: NewStringUTF
  参数: emulated;0
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /storage/emulated/0
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /storage/emulated/0
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: 内部共享存储空间
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: mounted
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: emulated;0
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /storage/emulated/0
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /storage/emulated/0
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: 内部共享存储空间
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: mounted
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: GetStringUTFChars
  参数: �q�
调用栈:
0xda7a2b8d libopenjdk.so!Java_java_io_UnixFileSystem_canonicalize0+0x30,0x70e65bbf boot.oat!0xa7bbf
[JNIEnv] GetStringUTFChars 返回: /storage/emulated/0

[JNIEnv] 调用: NewStringUTF
  参数: /storage/emulated/0
调用栈:
0xda7a2bb7 libopenjdk.so!Java_java_io_UnixFileSystem_canonicalize0+0x5a,0x70e65bbf boot.oat!0xa7bbf

[JNIEnv] 调用: GetStringUTFChars
  参数: �s�
调用栈:
0xda7a2b8d libopenjdk.so!Java_java_io_UnixFileSystem_canonicalize0+0x30,0x70e65bbf boot.oat!0xa7bbf
[JNIEnv] GetStringUTFChars 返回: /storage/emulated/0

[JNIEnv] 调用: NewStringUTF
  参数: /storage/emulated/0
调用栈:
0xda7a2bb7 libopenjdk.so!Java_java_io_UnixFileSystem_canonicalize0+0x5a,0x70e65bbf boot.oat!0xa7bbf

[JNIEnv] 调用: GetStringUTFChars
[JNIEnv] GetStringUTFChars 返回: /storage/emulated/0/Android/data/com.sytt.tzy/cache
Error: access violation accessing 0x1dfa
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x1df2
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: /storage/emulated/0/Android/data/com.sytt.tzy

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x1df6
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: /storage/emulated/0/Android/data/com.sytt.tzy/cache

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x1dc2
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: 12

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x1dd6
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: SKQ1.211006.001

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x1de6
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: V13.0.7.0.SKHCNXM

[JNIEnv] 调用: GetStringUTFChars
  参数: H

[JNIEnv] 调用: NewStringUTF
  参数: 
调用栈:
0xe723df49 libandroid_runtime.so!0x79f49,0x71fc0ddd boot-framework.oat!0x18cddd
[JNIEnv] GetStringUTFChars 返回: log.looper.10150.AudioPortEventHandler.slow
调用栈:
0xe72c6adb libandroid_runtime.so!0x102adb,0x71fb9ae3 boot-framework.oat!0x185ae3

[JNIEnv] 调用: NewStringUTF
  参数: 
调用栈:
0xe72c6aff libandroid_runtime.so!0x102aff,0x71fb9ae3 boot-framework.oat!0x185ae3

[JNIEnv] 调用: NewStringUTF
  参数: 
调用栈:
0xe72c6adb libandroid_runtime.so!0x102adb,0x71fb9ae3 boot-framework.oat!0x185ae3

[JNIEnv] 调用: NewStringUTF
  参数: 
调用栈:
0xe72c6aff libandroid_runtime.so!0x102aff,0x71fb9ae3 boot-framework.oat!0x185ae3

[JNIEnv] 调用: NewStringUTF
  参数: 
调用栈:
0xe72c6adb libandroid_runtime.so!0x102adb,0x71fb9ae3 boot-framework.oat!0x185ae3

[JNIEnv] 调用: NewStringUTF
  参数: 
调用栈:
0xe72c6aff libandroid_runtime.so!0x102aff,0x71fb9ae3 boot-framework.oat!0x185ae3

[JNIEnv] 调用: NewStringUTF
  参数: 
调用栈:
0xe72c6adb libandroid_runtime.so!0x102adb,0x71fb9ae3 boot-framework.oat!0x185ae3

[JNIEnv] 调用: NewStringUTF
  参数: bottom
调用栈:
0xe72c6aff libandroid_runtime.so!0x102aff,0x71fb9ae3 boot-framework.oat!0x185ae3

[JNIEnv] 调用: NewStringUTF
  参数: 
调用栈:
0xe72c6adb libandroid_runtime.so!0x102adb,0x71fb9ae3 boot-framework.oat!0x185ae3

[JNIEnv] 调用: NewStringUTF
  参数: 
调用栈:
0xe72c6aff libandroid_runtime.so!0x102aff,0x71fb9ae3 boot-framework.oat!0x185ae3

[JNIEnv] 调用: NewStringUTF
  参数: 
调用栈:
0xe72c6adb libandroid_runtime.so!0x102adb,0x71fb9ae3 boot-framework.oat!0x185ae3

[JNIEnv] 调用: NewStringUTF
  参数: back
调用栈:
0xe72c6aff libandroid_runtime.so!0x102aff,0x71fb9ae3 boot-framework.oat!0x185ae3

[JNIEnv] 调用: NewStringUTF
  参数: 
调用栈:
0xe72c6adb libandroid_runtime.so!0x102adb,0x71fb9ae3 boot-framework.oat!0x185ae3

[JNIEnv] 调用: NewStringUTF
  参数: 0
调用栈:
0xe72c6aff libandroid_runtime.so!0x102aff,0x71fb9ae3 boot-framework.oat!0x185ae3

[JNIEnv] 调用: NewStringUTF
  参数: 
调用栈:
0xe72c6adb libandroid_runtime.so!0x102adb,0x71fb9ae3 boot-framework.oat!0x185ae3

[JNIEnv] 调用: NewStringUTF
  参数: 
调用栈:
0xe72c6aff libandroid_runtime.so!0x102aff,0x71fb9ae3 boot-framework.oat!0x185ae3

[JNIEnv] 调用: NewStringUTF
  参数: primary output
调用栈:
0xe72c6adb libandroid_runtime.so!0x102adb,0x71fb9ae3 boot-framework.oat!0x185ae3

[JNIEnv] 调用: NewStringUTF
  参数: raw
调用栈:
0xe72c6adb libandroid_runtime.so!0x102adb,0x71fb9ae3 boot-framework.oat!0x185ae3

[JNIEnv] 调用: NewStringUTF
  参数: deep_buffer
调用栈:
0xe72c6adb libandroid_runtime.so!0x102adb,0x71fb9ae3 boot-framework.oat!0x185ae3

[JNIEnv] 调用: NewStringUTF
  参数: voice_tx
调用栈:
0xe72c6adb libandroid_runtime.so!0x102adb,0x71fb9ae3 boot-framework.oat!0x185ae3

[JNIEnv] 调用: NewStringUTF
  参数: android.permission.BLUETOOTH

[JNIEnv] 调用: NewStringUTF
  参数: Binder:5547_4
调用栈:
0xb72d04f3 libunity.so!0xcbf4f3

[JNIEnv] 调用: NewStringUTF
  参数: AudioTrack
调用栈:
0xe5407303 libart.so!_ZN3art6Thread10CreatePeerEPKcbP8_jobject+0x4a,0xe5404f2b libart.so!_ZN3art6Thread6AttachEPKcbP8_jobjectb+0x16a,0xe53c7d4b libart.so!_ZN3art7Runtime19AttachCurrentThreadEPKcbP8_jobjectb+0x32,0xe52655e3 libart.so!_ZN3art3JII27AttachCurrentThreadInternalEP7_JavaVMPP7_JNIEnvPvb+0xea,0xe7247811 libandroid_runtime.so!_ZN7android14AndroidRuntime15javaThreadShellEPv+0x3c,0xe5e58df5 libutils.so!0xcdf5,0xe6387139 libc.so!_ZL15__pthread_startPv+0x2a,0xe633fd57 libc.so!__start_thread+0x20
调用栈:
0xe5407303 libart.so!_ZN3art6Thread10CreatePeerEPKcbP8_jobject+0x4a,0xe5404f2b libart.so!_ZN3art6Thread6AttachEPKcbP8_jobjectb+0x16a,0xe53c7d4b libart.so!_ZN3art7Runtime19AttachCurrentThreadEPKcbP8_jobjectb+0x32,0xe52655e3 libart.so!_ZN3art3JII27AttachCurrentThreadInternalEP7_JavaVMPP7_JNIEnvPvb+0xea,0xe7247811 libandroid_runtime.so!_ZN7android14AndroidRuntime15javaThreadShellEPv+0x3c,0xe5e58df5 libutils.so!0xcdf5,0xe6387139 libc.so!_ZL15__pthread_startPv+0x2a,0xe633fd57 libc.so!__start_thread+0x20

[JNIEnv] 调用: GetStringUTFChars
  参数: �*�
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: android.hardware.input.InputManager$InputDeviceListener

[JNIEnv] 调用: NewStringUTF
  参数: input
调用栈:
0xb72d04f3 libunity.so!0xcbf4f3

[JNIEnv] 调用: NewStringUTF
  参数: com.sytt.tzy.UnityPlayerActivity
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: com.sytt.tzy
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: com.sytt.tzy
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: com.sytt.tzy
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: com.sytt.tzy
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /data/app/~~hYKtoZqlctb0dKGf8OSOKQ==/com.sytt.tzy-YAzL_LiSSbrdnOTT58XTsA==
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /data/app/~~hYKtoZqlctb0dKGf8OSOKQ==/com.sytt.tzy-YAzL_LiSSbrdnOTT58XTsA==
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /data/app/~~hYKtoZqlctb0dKGf8OSOKQ==/com.sytt.tzy-YAzL_LiSSbrdnOTT58XTsA==/base.apk
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /data/app/~~hYKtoZqlctb0dKGf8OSOKQ==/com.sytt.tzy-YAzL_LiSSbrdnOTT58XTsA==/base.apk
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /data/app/~~hYKtoZqlctb0dKGf8OSOKQ==/com.sytt.tzy-YAzL_LiSSbrdnOTT58XTsA==/lib/arm
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /data/app/~~hYKtoZqlctb0dKGf8OSOKQ==/com.sytt.tzy-YAzL_LiSSbrdnOTT58XTsA==/lib
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: armeabi-v7a
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /data/resource-cache/com.android.systemui-neutral-Bkw5.frro
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /data/resource-cache/com.android.systemui-accent-Mq6z.frro
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: default:targetSdkVersion=29
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: :complete
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /system/framework/android.test.base.jar
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /system/framework/android.test.base.jar
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: android.test.base
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: android
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /data/user/0/com.sytt.tzy
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /data/user_de/0/com.sytt.tzy
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /data/user/0/com.sytt.tzy
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: 10
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: com.sytt.tzy
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: com.sytt.tzy
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: android.permission.WRITE_EXTERNAL_STORAGE
调用栈:
0xb72d04f3 libunity.so!0xcbf4f3

[JNIEnv] 调用: NewStringUTF
  参数: android.permission.WRITE_EXTERNAL_STORAGE
调用栈:
0xb72d04f3 libunity.so!0xcbf4f3

[JNIEnv] 调用: NewStringUTF
  参数: 手机
调用栈:
0xe7241659 libandroid_runtime.so!0x7d659,0x71fba861 boot-framework.oat!0x186861

[JNIEnv] 调用: NewStringUTF
  参数: 系统
调用栈:
0xe7241659 libandroid_runtime.so!0x7d659,0x71fba861 boot-framework.oat!0x186861

[JNIEnv] 调用: GetStringUTFChars
  参数: �UPq�h���q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: MediaRouter

[JNIEnv] 调用: GetStringUTFChars
  参数: �h���q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: Selecting route: RouteInfo{ name=手机, description=null, status=null, category=RouteCategory{ name=系统 types=ROUTE_TYPE_LIVE_AUDIO ROUTE_TYPE_LIVE_VIDEO  groupable=false }, supportedTypes=ROUTE_TYPE_LIVE_AUDIO ROUTE_TYPE_LIVE_VIDEO , presentationDisplay=null }

[JNIEnv] 调用: GetStringUTFChars
  参数: �UPq�l�
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: MediaRouter

[JNIEnv] 调用: GetStringUTFChars
  参数: �l�
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: Skip setBluetoothA2dpOn(): types=8388615, isPlaybackActive()=true, BT route=null

[JNIEnv] 调用: NewStringUTF
  参数: unity.player_sessionid
调用栈:
0xb72d04f3 libunity.so!0xcbf4f3

[JNIEnv] 调用: NewStringUTF
  参数: unity.player_sessionid
调用栈:
0xb72d04f3 libunity.so!0xcbf4f3

[JNIEnv] 调用: GetStringUTFChars
  参数: 8U�r ���&��R��N8q9�����h@��/

[JNIEnv] 调用: GetStringUTFChars
  参数: H=�
调用栈:
0xdc22e867 libicu_jni.so!0x8867,0x72677869 boot-core-icu4j.oat!0x2e869
[JNIEnv] GetStringUTFChars 返回: UTF-8

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x1f92
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: 4633832090579954955

[JNIEnv] 调用: NewStringUTF
  参数: unity.player_session_count
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/com.sytt.tzy.v2.playerprefs.xml
调用栈:
0xb72d04f3 libunity.so!0xcbf4f3

[JNIEnv] 调用: GetStringUTFChars
  参数: 8U�r ���&��R��N8q9�����h@��/
调用栈:
0xdc22e867 libicu_jni.so!0x8867,0x72677869 boot-core-icu4j.oat!0x2e869
[JNIEnv] GetStringUTFChars 返回: UTF-8

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x1f9a
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: 1

[JNIEnv] 调用: NewStringUTF
  参数: unity.player_session_count
调用栈:
0xb72d04f3 libunity.so!0xcbf4f3

[JNIEnv] 调用: NewStringUTF
  参数: 2
调用栈:
0xb72d04f3 libunity.so!0xcbf4f3

[JNIEnv] 调用: NewStringUTF
  参数: unity.player_sessionid
调用栈:
0xb72d04f3 libunity.so!0xcbf4f3

[JNIEnv] 调用: NewStringUTF
  参数: 4375180144181560538
调用栈:
0xb72d04f3 libunity.so!0xcbf4f3

[JNIEnv] 调用: GetStringUTFChars
  参数: H=�
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/com.sytt.tzy.v2.playerprefs.xml

[JNIEnv] 调用: GetStringUTFChars
  参数: �C�
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/com.sytt.tzy.v2.playerprefs.xml.bak

[JNIEnv] 调用: NewStringUTF
  参数: access
调用栈:
0xda7de385 libjavacore.so!0x17385,0x7116659b boot-core-libart.oat!0x1059b

[JNIEnv] 调用: GetStringUTFChars
  参数: H=��C�h_�p8h�p(h�p
调用栈:
0xda7e4391 libjavacore.so!0x1d391,0x711668e9 boot-core-libart.oat!0x108e9
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/com.sytt.tzy.v2.playerprefs.xml

[JNIEnv] 调用: GetStringUTFChars
  参数: �C�h_�p8h�p(h�p
调用栈:
0xda7e43ab libjavacore.so!0x1d3ab,0x711668e9 boot-core-libart.oat!0x108e9
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/com.sytt.tzy.v2.playerprefs.xml.bak

[JNIEnv] 调用: GetStringUTFChars
  参数: H=�A

[JNIEnv] 调用: GetStringUTFChars
  参数: ���
调用栈:
0xda7e2b8f libjavacore.so!0x1bb8f,0x71166d05 boot-core-libart.oat!0x10d05
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/com.sytt.tzy.v2.playerprefs.xml

[JNIEnv] 调用: GetStringUTFChars
  参数: 8U�r
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: java.lang.Object

[JNIEnv] 调用: GetStringUTFChars
  参数: 8U�rnU�Ќ�p
调用栈:
0xdc22e867 libicu_jni.so!0x8867,0x72677869 boot-core-icu4j.oat!0x2e869
[JNIEnv] GetStringUTFChars 返回: UTF-8

[JNIEnv] 调用: GetStringUTFChars
  参数: H=��
调用栈:
0xdc22e867 libicu_jni.so!0x8867,0x72677869 boot-core-icu4j.oat!0x2e869
[JNIEnv] GetStringUTFChars 返回: UTF-8

[JNIEnv] 调用: GetStringUTFChars
  参数: 8U�r
调用栈:
0xda7df40d libjavacore.so!0x1840d,0x711669bb boot-core-libart.oat!0x109bb
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/com.sytt.tzy.v2.playerprefs.xml

[JNIEnv] 调用: GetStringUTFChars
  参数: H=�h_�p0Z�p(h�ph�Kq8h�ph�Kqh�Kq
调用栈:
0xdc22e867 libicu_jni.so!0x8867,0x72677869 boot-core-icu4j.oat!0x2e869
[JNIEnv] GetStringUTFChars 返回: UTF-8
调用栈:
0xda7e8c87 libjavacore.so!0x21c87,0x7116694f boot-core-libart.oat!0x1094f
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/com.sytt.tzy.v2.playerprefs.xml

[JNIEnv] 调用: GetStringUTFChars
  参数: �C�h_�p0Z�p(h�ph�Kq8h�ph�Kqh�Kq
调用栈:
0xda7e4143 libjavacore.so!0x1d143,0x71164e9f boot-core-libart.oat!0xee9f
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/com.sytt.tzy.v2.playerprefs.xml.bak

[JNIEnv] 调用: NewStringUTF
  参数: SourceVersion
调用栈:
0xb72d04f3 libunity.so!0xcbf4f3

[JNIEnv] 调用: GetStringUTFChars
  参数: 8U�r����h@��/��2�&��
调用栈:
0xdc22e867 libicu_jni.so!0x8867,0x72677869 boot-core-icu4j.oat!0x2e869
[JNIEnv] GetStringUTFChars 返回: UTF-8

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x204a
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: 1009

[JNIEnv] 调用: NewStringUTF
  参数: null

[JNIEnv] 调用: NewStringUTF
  参数: emulated;0

[JNIEnv] 调用: NewStringUTF
  参数: zh-CN
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /storage/emulated/0
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /storage/emulated/0
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: zh-CN
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: 内部共享存储空间
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: zh-CN
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: mounted
调用栈:
0xe5407303 libart.so!_ZN3art6Thread10CreatePeerEPKcbP8_jobject+0x4a,0xe5404f2b libart.so!_ZN3art6Thread6AttachEPKcbP8_jobjectb+0x16a,0xe53c7d4b libart.so!_ZN3art7Runtime19AttachCurrentThreadEPKcbP8_jobjectb+0x32,0xe52655e3 libart.so!_ZN3art3JII27AttachCurrentThreadInternalEP7_JavaVMPP7_JNIEnvPvb+0xea,0xb6a40c15 libunity.so!0x42fc15,0xb67a56f5 libunity.so!0x1946f5,0xaa1346a8

[JNIEnv] 调用: NewStringUTF
  参数: null
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: com.sytt.tzy/com.sytt.tzy.UnityPlayerActivity
调用栈:
0xe5407303 libart.so!_ZN3art6Thread10CreatePeerEPKcbP8_jobject+0x4a,0xe5404f2b libart.so!_ZN3art6Thread6AttachEPKcbP8_jobjectb+0x16a,0xe53c7d4b libart.so!_ZN3art7Runtime19AttachCurrentThreadEPKcbP8_jobjectb+0x32,0xe52655e3 libart.so!_ZN3art3JII27AttachCurrentThreadInternalEP7_JavaVMPP7_JNIEnvPvb+0xea,0xb6a40c15 libunity.so!0x42fc15,0xb67a56f5 libunity.so!0x1946f5,0xaa1346a8
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: Surface(name=4c456cf StatusBar)/@0xa0c72a - animation-leash of insets_animation
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: GetStringUTFChars
  参数: ��
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: Surface(name=75cdafa InputMethod)/@0x88c92a1 - animation-leash of insets_animation
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /storage/emulated/0/Android/obb/com.sytt.tzy

[JNIEnv] 调用: GetStringUTFChars
  参数: ��
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /storage/emulated/0/Android/obb/com.sytt.tzy

[JNIEnv] 调用: GetStringUTFChars
[JNIEnv] GetStringUTFChars 返回: /storage/emulated/0/Android/obb/com.sytt.tzy
Error: access violation accessing 0x2042
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x202a
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: com.sytt.tzy

[JNIEnv] 调用: GetStringUTFChars
  参数: 8�Wq@��8�Wq�[��TrP�q�[��'
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: CompatibilityChangeReporter

[JNIEnv] 调用: GetStringUTFChars
  参数: @��8�Wq�[��TrP�q�[��'
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: Compat change id reported: 147600208; UID 10150; state: ENABLED

[JNIEnv] 调用: GetStringUTFChars
  参数: ���
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: android.os.Handler$Callback

[JNIEnv] 调用: GetStringUTFChars
  参数: ���
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: android.view.Choreographer$FrameCallback

[JNIEnv] 调用: NewStringUTF
  参数: UnityChoreographer
调用栈:
0xb72d04f3 libunity.so!0xcbf4f3

[JNIEnv] 调用: GetStringUTFChars
  参数:  (
调用栈:
0xe723df49 libandroid_runtime.so!0x79f49,0x71fc0ddd boot-framework.oat!0x18cddd
[JNIEnv] GetStringUTFChars 返回: log.looper.10150.UnityChoreographer.slow

[JNIEnv] 调用: GetStringUTFChars
  参数: ��Vq
调用栈:
0xe723df49 libandroid_runtime.so!0x79f49,0x71fc0ddd boot-framework.oat!0x18cddd
[JNIEnv] GetStringUTFChars 返回: debug.hwui.fps_divisor

[JNIEnv] 调用: GetStringUTFChars
  参数: 8U�r
调用栈:
0xdc22e867 libicu_jni.so!0x8867,0x72677869 boot-core-icu4j.oat!0x2e869
[JNIEnv] GetStringUTFChars 返回: UTF-8

[JNIEnv] 调用: GetStringUTFChars
  参数: �L�p
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: android.os.ParcelFileDescriptor

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x212a
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: fecb58963d1adc9d

[JNIEnv] 调用: GetStringUTFChars
  参数: ���
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: java.lang.String

[JNIEnv] 调用: GetStringUTFChars
  参数: �����0oU�$oU�`�
��%��h.H�
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: unity 

[JNIEnv] 调用: GetStringUTFChars
  参数: ��0oU�$oU�`�
��%��h.H�
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: Singleton

[JNIEnv] 调用: NewStringUTF
  参数: device_name
调用栈:
0xb72d04f3 libunity.so!0xcbf4f3

[JNIEnv] 调用: NewStringUTF
  参数: bluetooth_name
调用栈:
0xb72d04f3 libunity.so!0xcbf4f3

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x2162
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: M2012K11AC

[JNIEnv] 调用: NewStringUTF
  参数: null
调用栈:
0xe5407303 libart.so!_ZN3art6Thread10CreatePeerEPKcbP8_jobject+0x4a,0xe5404f2b libart.so!_ZN3art6Thread6AttachEPKcbP8_jobjectb+0x16a,0xe53c7d4b libart.so!_ZN3art7Runtime19AttachCurrentThreadEPKcbP8_jobjectb+0x32,0xe52655e3 libart.so!_ZN3art3JII27AttachCurrentThreadInternalEP7_JavaVMPP7_JNIEnvPvb+0xea,0xb6a40c15 libunity.so!0x42fc15,0xb67a56f5 libunity.so!0x1946f5,0xaa1346a8

[JNIEnv] 调用: NewStringUTF
  参数: TryCopyStreamingAsset2Persistent
调用栈:
0xb72d04f3 libunity.so!0xcbf4f3

[JNIEnv] 调用: NewStringUTF
  参数: null
调用栈:
0xe5407303 libart.so!_ZN3art6Thread10CreatePeerEPKcbP8_jobject+0x4a,0xe5404f2b libart.so!_ZN3art6Thread6AttachEPKcbP8_jobjectb+0x16a,0xe53c7d4b libart.so!_ZN3art7Runtime19AttachCurrentThreadEPKcbP8_jobjectb+0x32,0xe52655e3 libart.so!_ZN3art3JII27AttachCurrentThreadInternalEP7_JavaVMPP7_JNIEnvPvb+0xea,0xb6a40c15 libunity.so!0x42fc15,0xb6a3d0ad libunity.so!0x42c0ad,0xb6a3d081 libunity.so!0x42c081,0xb6a45a17 libunity.so!0x434a17,0xb6eb5ba5 libunity.so!0x8a4ba5,0xb6eb3893 libunity.so!0x8a2893,0xb6eb4dd1 libunity.so!0x8a3dd1,0xb6eb4acf libunity.so!0x8a3acf,0xb6eb4a9b libunity.so!0x8a3a9b,0xb693febd libunity.so!0x32eebd,0xb694007f libunity.so!0x32f07f,0xb6940149 libunity.so!0x32f149

[JNIEnv] 调用: NewStringUTF
  参数: UTF-8
调用栈:
0xb72d04f3 libunity.so!0xcbf4f3

[JNIEnv] 调用: GetStringUTFChars
  参数: ���
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: java.lang.String

[JNIEnv] 调用: GetStringUTFChars
  参数: @��
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: java.lang.String

[JNIEnv] 调用: GetStringUTFChars
  参数: ��x�TG�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: MicroMsg.PaySdk.WXFactory

[JNIEnv] 调用: GetStringUTFChars
  参数: x�TG�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: createWXAPI, appId = wx172d33a51236cfbc, checkSignature = false

[JNIEnv] 调用: GetStringUTFChars
  参数: �`�TdU�HdU�`�
�|���L���C0�	
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: MicroMsg.SDK.WXApiImplV10

[JNIEnv] 调用: GetStringUTFChars
  参数: `�TdU�HdU�`�
�|���L���C0�	
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: <init>, appId = wx172d33a51236cfbc, checkSignature = false

[JNIEnv] 调用: GetStringUTFChars
  参数: @�`#�taU�haU�`�
�|���
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: MicroMsg.SDK.WXMsgImplComm

[JNIEnv] 调用: GetStringUTFChars
  参数: `#�taU�haU�`�
�|���
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: ignore wechat app signature validation

[JNIEnv] 调用: GetStringUTFChars
  参数: ��$��fU��fU�`�
�|�������&���
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: MicroMsg.SDK.WXApiImplV10

[JNIEnv] 调用: GetStringUTFChars
  参数: �$��fU��fU�`�
�|�������&���
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: registerApp, appId = wx172d33a51236cfbc

[JNIEnv] 调用: GetStringUTFChars
  参数: 0Q�
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs

[JNIEnv] 调用: GetStringUTFChars
  参数: �@�
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/.mta-wxop.xml.bak

[JNIEnv] 调用: NewStringUTF
  参数: access
调用栈:
0xda7de385 libjavacore.so!0x17385,0x7116659b boot-core-libart.oat!0x1059b

[JNIEnv] 调用: GetStringUTFChars
  参数: h=�
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/.mta-wxop.xml

[JNIEnv] 调用: GetStringUTFChars
  参数: h=�
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/.mta-wxop.xml

[JNIEnv] 调用: GetStringUTFChars
  参数: h=�h_�p0Z�p(h�ph�Kq8h�ph�Kqh�Kq��#�wu�pZ�p�5��5�h=�h�Kq��#�t�#����q�Mtq�5���r(=�?���#�t�#��A�ph=��5�?���qP��p�5�>�?��=��=�h=��,r�xq
调用栈:
0xda7e8c87 libjavacore.so!0x21c87,0x7116694f boot-core-libart.oat!0x1094f
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/.mta-wxop.xml

[JNIEnv] 调用: GetStringUTFChars
  参数: h=�
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/.mta-wxop.xml

[JNIEnv] 调用: GetStringUTFChars
  参数: h=�
调用栈:
0xda7e2b8f libjavacore.so!0x1bb8f,0x71166d05 boot-core-libart.oat!0x10d05
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/.mta-wxop.xml

[JNIEnv] 调用: GetStringUTFChars
  参数: 8U�r�R
调用栈:
0xdc22e867 libicu_jni.so!0x8867,0x72677869 boot-core-icu4j.oat!0x2e869
[JNIEnv] GetStringUTFChars 返回: UTF-8

[JNIEnv] 调用: GetStringUTFChars
  参数: �xXq���pV�ν�Z;۠+q�xXq/'Ur8t�q�>�
调用栈:
0xe723de83 libandroid_runtime.so!0x79e83,0x71fcdccb boot-framework.oat!0x199ccb
[JNIEnv] GetStringUTFChars 返回: persist.sys.timezone

[JNIEnv] 调用: NewStringUTF
  参数: Asia/Shanghai
调用栈:
0xe723e443 libandroid_runtime.so!0x7a443,0xe633e5b5 libc.so!_ZN16SystemProperties12ReadCallbackEPK9prop_infoPFvPvPKcS5_jES3_+0xa8,0xe723de97 libandroid_runtime.so!0x79e97,0x71fcdccb boot-framework.oat!0x199ccb

[JNIEnv] 调用: GetStringUTFChars
  参数: �`i��fU��fU�`�
�|�����������

[JNIEnv] 调用: NewStringUTF
  参数: android.net.conn.CONNECTIVITY_CHANGE

[JNIEnv] 调用: NewStringUTF
  参数: android.net.conn.CONNECTIVITY_CHANGE
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: MicroMsg.SDK.WXApiImplV10

[JNIEnv] 调用: GetStringUTFChars
  参数: `i��fU��fU�`�
�|�����������
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: GetStringUTFChars
  参数: x?�
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: registerApp, appId = wx172d33a51236cfbc

[JNIEnv] 调用: GetStringUTFChars
  参数: �j��fU��fU�`�
�|������� ���
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/databases

[JNIEnv] 调用: GetStringUTFChars
  参数: 
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: MicroMsg.SDK.WXApiImplV10

[JNIEnv] 调用: GetStringUTFChars
  参数: j��fU��fU�`�
�|������� ���
调用栈:
0xe727e6bb libandroid_runtime.so!0xba6bb,0x71fc284b boot-framework.oat!0x18e84b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/databases/pri_wxop_tencent_analysis.db

[JNIEnv] 调用: GetStringUTFChars
  参数: 
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: register app com.sytt.tzy

[JNIEnv] 调用: GetStringUTFChars
  参数: o����TaU�HaU�`�
�|���
调用栈:
0xe727e6e5 libandroid_runtime.so!0xba6e5,0x71fc284b boot-framework.oat!0x18e84b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/databases/pri_wxop_tencent_analysis.db

[JNIEnv] 调用: GetStringUTFChars
  参数: ��Nq
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: MicroMsg.SDK.MMessage

[JNIEnv] 调用: GetStringUTFChars
  参数: ���TaU�HaU�`�
�|���
调用栈:
0xe723df49 libandroid_runtime.so!0x79f49,0x71fc0ddd boot-framework.oat!0x18cddd
[JNIEnv] GetStringUTFChars 返回: debug.sqlite.pagesize

[JNIEnv] 调用: GetStringUTFChars
  参数: ��Nq���@ʀr�_,
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: send mm message, intent=Intent { act=com.tencent.mm.plugin.openapi.Intent.ACTION_HANDLE_APP_REGISTER (has extras) }, perm=com.tencent.mm.permission.MM_MESSAGE

[JNIEnv] 调用: GetStringUTFChars
  参数: X�h���G�q
调用栈:
0xe723de83 libandroid_runtime.so!0x79e83,0x71fcdccb boot-framework.oat!0x199ccb
[JNIEnv] GetStringUTFChars 返回: debug.sqlite.journalmode

[JNIEnv] 调用: GetStringUTFChars
  参数: �Nq���@ʀr�_,
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: MicroMsg.WXEntryActivity

[JNIEnv] 调用: GetStringUTFChars
  参数: h���G�q
调用栈:
0xe723de83 libandroid_runtime.so!0x79e83,0x71fcdccb boot-framework.oat!0x199ccb
[JNIEnv] GetStringUTFChars 返回: debug.sqlite.syncmode

[JNIEnv] 调用: GetStringUTFChars
  参数: ��Nq
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 初始 化成功

[JNIEnv] 调用: GetStringUTFChars
  参数: �u����oU�
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: umlog

[JNIEnv] 调用: GetStringUTFChars
  参数: ���oU�
调用栈:
0xe723df49 libandroid_runtime.so!0x79f49,0x71fc0ddd boot-framework.oat!0x18cddd
[JNIEnv] GetStringUTFChars 返回: debug.sqlite.journalsizelimit

[JNIEnv] 调用: GetStringUTFChars
  参数: 8�Nqd
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: Init: 

[JNIEnv] 调用: GetStringUTFChars
  参数: 
调用栈:
0xe723df49 libandroid_runtime.so!0x79f49,0x71fc0ddd boot-framework.oat!0x18cddd
[JNIEnv] GetStringUTFChars 返回: debug.sqlite.wal.autocheckpoint

[JNIEnv] 调用: GetStringUTFChars
  参数: �h,
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: UMConfigure

[JNIEnv] 调用: GetStringUTFChars
  参数: ȏ�<nU�
调用栈:
0xe727ea99 libandroid_runtime.so!0xbaa99,0x71fb96e3 boot-framework.oat!0x1856e3
[JNIEnv] GetStringUTFChars 返回: zh_CN

[JNIEnv] 调用: GetStringUTFChars
  参数: 
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: common version is 9.6.1

[JNIEnv] 调用: GetStringUTFChars
  参数: 
调用栈:
0xda7df40d libjavacore.so!0x1840d,0x711669bb boot-core-libart.oat!0x109bb
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/databases/pri_wxop_tencent_analysis.db

[JNIEnv] 调用: GetStringUTFChars
  参数: x?�
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: UMConfigure

[JNIEnv] 调用: GetStringUTFChars
  参数: ���<nU�
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/databases

[JNIEnv] 调用: GetStringUTFChars
  参数: �q,
调用栈:
0xe727e6bb libandroid_runtime.so!0xba6bb,0x71fc284b boot-framework.oat!0x18e84b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/databases/wxop_tencent_analysis.db

[JNIEnv] 调用: GetStringUTFChars
  参数: �q,
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: common type is 0

[JNIEnv] 调用: GetStringUTFChars
  参数: ��
调用栈:
0xe727e6e5 libandroid_runtime.so!0xba6e5,0x71fc284b boot-framework.oat!0x18e84b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/databases/wxop_tencent_analysis.db

[JNIEnv] 调用: GetStringUTFChars
  参数: ��Nq
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.umzid.ZIDManager

[JNIEnv] 调用: GetStringUTFChars
  参数: `��
调用栈:
0xe723df49 libandroid_runtime.so!0x79f49,0x71fc0ddd boot-framework.oat!0x18cddd
[JNIEnv] GetStringUTFChars 返回: debug.sqlite.pagesize

[JNIEnv] 调用: GetStringUTFChars
  参数: ��Nq���@ʀr�u,
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.message.PushAgent

[JNIEnv] 调用: GetStringUTFChars
  参数: Е�
调用栈:
0xe723de83 libandroid_runtime.so!0x79e83,0x71fcdccb boot-framework.oat!0x199ccb
[JNIEnv] GetStringUTFChars 返回: debug.sqlite.journalmode

[JNIEnv] 调用: GetStringUTFChars
  参数: �Nq���@ʀr�u,
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.socialize.UMShareAPI

[JNIEnv] 调用: GetStringUTFChars
  参数: ��
调用栈:
0xe723de83 libandroid_runtime.so!0x79e83,0x71fcdccb boot-framework.oat!0x199ccb
[JNIEnv] GetStringUTFChars 返回: debug.sqlite.syncmode

[JNIEnv] 调用: GetStringUTFChars
  参数: ��Nq
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: android.content.Context

[JNIEnv] 调用: NewStringUTF
  参数: android.net.conn.CONNECTIVITY_CHANGE

[JNIEnv] 调用: NewStringUTF
  参数: android.net.conn.CONNECTIVITY_CHANGE
调用栈:
0xe723df49 libandroid_runtime.so!0x79f49,0x71fc0ddd boot-framework.oat!0x18cddd
[JNIEnv] GetStringUTFChars 返回: debug.sqlite.journalsizelimit

[JNIEnv] 调用: GetStringUTFChars
  参数: 8�Nqd
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: GetStringUTFChars
  参数: ��
调用栈:
0xe723df49 libandroid_runtime.so!0x79f49,0x71fc0ddd boot-framework.oat!0x18cddd
[JNIEnv] GetStringUTFChars 返回: debug.sqlite.wal.autocheckpoint

[JNIEnv] 调用: GetStringUTFChars
  参数: �~,
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: GetStringUTFChars
  参数: ��
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.umzid.ZIDManager

[JNIEnv] 调用: GetStringUTFChars
  参数: (	�
调用栈:
0xe727ea99 libandroid_runtime.so!0xbaa99,0x71fb96e3 boot-framework.oat!0x1856e3
[JNIEnv] GetStringUTFChars 返回: zh_CN

[JNIEnv] 调用: GetStringUTFChars
  参数: �q,�
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/files/.envelope

[JNIEnv] 调用: GetStringUTFChars
  参数: (	�
调用栈:
0xda7df40d libjavacore.so!0x1840d,0x711669bb boot-core-libart.oat!0x109bb
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/databases/wxop_tencent_analysis.db

[JNIEnv] 调用: GetStringUTFChars
  参数: �q,
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/umeng_common_config.xml

[JNIEnv] 调用: GetStringUTFChars
  参数: 
调用栈:
0xe727c21b libandroid_runtime.so!0xb821b,0x71fbe09d boot-framework.oat!0x18a09d
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/databases/wxop_tencent_analysis.db

[JNIEnv] 调用: GetStringUTFChars
  参数: �oLq
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: UMConfigure

[JNIEnv] 调用: GetStringUTFChars
  参数: ���<nU�
调用栈:
0xe7240f31 libandroid_runtime.so!0x7cf31,0x71fc0ddd boot-framework.oat!0x18cddd
[JNIEnv] GetStringUTFChars 返回: CursorWindowStats

[JNIEnv] 调用: GetStringUTFChars
  参数: �q,
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: current appkey is 656436ae58a9eb5b0a11a63e, last appkey is 656436ae58a9eb5b0a11a63e

[JNIEnv] 调用: GetStringUTFChars
  参数: ��
调用栈:
0xda7a2c27 libopenjdk.so!Java_java_io_UnixFileSystem_getBooleanAttributes0+0x22,0x70e65c27 boot.oat!0xa7c27
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/files/.envelope

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x19
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/files/.envelope
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/umeng_common_config.xml

[JNIEnv] 调用: GetStringUTFChars
  参数: 
调用栈:
0xe727c21b libandroid_runtime.so!0xb821b,0x71fbe09d boot-framework.oat!0x18a09d
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/databases/wxop_tencent_analysis.db

[JNIEnv] 调用: GetStringUTFChars
  参数: �oLq
调用栈:
0xe7240f31 libandroid_runtime.so!0x7cf31,0x71fc0ddd boot-framework.oat!0x18cddd
[JNIEnv] GetStringUTFChars 返回: CursorWindowStats

[JNIEnv] 调用: GetStringUTFChars
  参数: �q,
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: UMConfigure

[JNIEnv] 调用: GetStringUTFChars
  参数: ��<nU�
调用栈:
0xe727c21b libandroid_runtime.so!0xb821b,0x71fbe09d boot-framework.oat!0x18a09d
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/databases/wxop_tencent_analysis.db

[JNIEnv] 调用: GetStringUTFChars
  参数: �oLq
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: channel is Umeng

[JNIEnv] 调用: GetStringUTFChars
  参数: 0��
调用栈:
0xe7240f31 libandroid_runtime.so!0x7cf31,0x71fc0ddd boot-framework.oat!0x18cddd
[JNIEnv] GetStringUTFChars 返回: CursorWindowStats
[*] JSONObject.put called with key: 1, value: {}

[JNIEnv] 调用: NewStringUTF
  参数: 1
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.MobclickAgent

[JNIEnv] 调用: GetStringUTFChars
  参数: ���a�
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: UMLog

[JNIEnv] 调用: GetStringUTFChars
  参数: a�
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 统计SDK常见问题索引贴 详见链接 http://developer.umeng.com/docs/66650/cate/66650

[JNIEnv] 调用: GetStringUTFChars
  参数: ���
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: UMLog

[JNIEnv] 调用: GetStringUTFChars
  参数: 
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�-�-���Ur�g�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 统计SDK初始化成功

[JNIEnv] 调用: GetStringUTFChars
  参数: ���
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �-�-���Ur�g�q
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.game.UMGameAgent

[JNIEnv] 调用: GetStringUTFChars
  参数: ���
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: 1, value: {}
[*] JSONObject.put called with key: 2, value: {}

[JNIEnv] 调用: NewStringUTF
  参数: 2
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.message.MessageSharedPrefs

[JNIEnv] 调用: GetStringUTFChars
  参数: Е�
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.socialize.UMShareAPI

[JNIEnv] 调用: GetStringUTFChars
  参数:  ��
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.error.UMError

[JNIEnv] 调用: GetStringUTFChars
  参数: 0��
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.umefs.UMEfs

[JNIEnv] 调用: GetStringUTFChars
  参数: ���
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�-�-���Ur�g�q
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.umcrash.UMCrash

[JNIEnv] 调用: GetStringUTFChars
  参数: 0Q�

[JNIEnv] 调用: GetStringUTFChars
  参数: ���x4н������`�
�\)p�
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �-�-���Ur�g�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: UMCrash

[JNIEnv] 调用: GetStringUTFChars
  参数: x4н������`�
�\)p�
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: 2, value: {}
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: get common. apm ctr flag is 0
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs

[JNIEnv] 调用: GetStringUTFChars
  参数:  ��

[JNIEnv] 调用: GetStringUTFChars
  参数: h=�
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/um_umcrash.xml.bak

[JNIEnv] 调用: NewStringUTF
  参数: access
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/.mta-wxop.xml

[JNIEnv] 调用: GetStringUTFChars
  参数: �@�
调用栈:
0xda7de385 libjavacore.so!0x17385,0x7116659b boot-core-libart.oat!0x1059b

[JNIEnv] 调用: GetStringUTFChars
  参数: ���
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/.mta-wxop.xml.bak

[JNIEnv] 调用: NewStringUTF
  参数: access
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/um_umcrash.xml

[JNIEnv] 调用: GetStringUTFChars
  参数: ���
调用栈:
0xda7de385 libjavacore.so!0x17385,0x7116659b boot-core-libart.oat!0x1059b

[JNIEnv] 调用: GetStringUTFChars
  参数: h=��@�h_�p8h�p(h�p
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/um_umcrash.xml

[JNIEnv] 调用: GetStringUTFChars
  参数: ���h_�p0Z�p(h�ph�Kq8h�ph�Kqh�Kq�/��wu�pZ�p�5��5����h�Kq�/��t/쥓��q�Mtq�5���rx��h���/��t/쥉A�p����5�h����qP��p�5�X��h��
调用栈:
0xda7e4391 libjavacore.so!0x1d391,0x711668e9 boot-core-libart.oat!0x108e9
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/.mta-wxop.xml

[JNIEnv] 调用: GetStringUTFChars
  参数: �@�h_�p8h�p(h�p
调用栈:
0xda7e8c87 libjavacore.so!0x21c87,0x7116694f boot-core-libart.oat!0x1094f
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/um_umcrash.xml

[JNIEnv] 调用: GetStringUTFChars
  参数: ���
调用栈:
0xda7e43ab libjavacore.so!0x1d3ab,0x711668e9 boot-core-libart.oat!0x108e9
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/.mta-wxop.xml.bak

[JNIEnv] 调用: GetStringUTFChars
  参数: h=�A
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/um_umcrash.xml

[JNIEnv] 调用: GetStringUTFChars
  参数: ���
调用栈:
0xda7e2b8f libjavacore.so!0x1bb8f,0x71166d05 boot-core-libart.oat!0x10d05
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/.mta-wxop.xml

[JNIEnv] 调用: GetStringUTFChars
  参数: 8U�r
调用栈:
0xda7e2b8f libjavacore.so!0x1bb8f,0x71166d05 boot-core-libart.oat!0x10d05
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/um_umcrash.xml

[JNIEnv] 调用: GetStringUTFChars
  参数: 8U�r��W
调用栈:
0xdc22e867 libicu_jni.so!0x8867,0x72677869 boot-core-icu4j.oat!0x2e869
[JNIEnv] GetStringUTFChars 返回: UTF-8

[JNIEnv] 调用: GetStringUTFChars
  参数: h=��
调用栈:
0xdc22e867 libicu_jni.so!0x8867,0x72677869 boot-core-icu4j.oat!0x2e869
[JNIEnv] GetStringUTFChars 返回: UTF-8

[JNIEnv] 调用: GetStringUTFChars
  参数: �������jU�`jU�`�
�������?H��

[JNIEnv] 调用: GetStringUTFChars
  参数: ���
调用栈:
0xda7df40d libjavacore.so!0x1840d,0x711669bb boot-core-libart.oat!0x109bb
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/.mta-wxop.xml

[JNIEnv] 调用: GetStringUTFChars
  参数: h=�h_�p0Z�p(h�ph�Kq8h�ph�Kqh�Kq
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/um_umcrash.xml
调用栈:
0xda7e8c87 libjavacore.so!0x21c87,0x7116694f boot-core-libart.oat!0x1094f
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/.mta-wxop.xml

[JNIEnv] 调用: GetStringUTFChars
  参数: �@�h_�p0Z�p(h�ph�Kq8h�ph�Kqh�Kq
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: UMCrash

[JNIEnv] 调用: GetStringUTFChars
  参数: ����jU�`jU�`�
�������?H��
调用栈:
0xda7e4143 libjavacore.so!0x1d143,0x71164e9f boot-core-libart.oat!0xee9f
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/.mta-wxop.xml.bak

[JNIEnv] 调用: NewStringUTF
  参数: emulated;0
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /storage/emulated/0
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: int apm. flag is 0

[JNIEnv] 调用: GetStringUTFChars
  参数: �<

[JNIEnv] 调用: GetStringUTFChars
  参数: ���

[JNIEnv] 调用: GetStringUTFChars
  参数: �@

[JNIEnv] 调用: GetStringUTFChars
  参数: `38
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /storage/emulated/0
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/itconfig.sp

[JNIEnv] 调用: GetStringUTFChars
  参数: ���h_�p0Z�p(h�ph�Kq8h�ph�Kqh�Kq
调用栈:
0xe723df49 libandroid_runtime.so!0x79f49,0x71fc0ddd boot-framework.oat!0x18cddd
[JNIEnv] GetStringUTFChars 返回: log.looper.10150.newsp2.slow
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: 内部共享存储空间
调用栈:
0xda7e8c87 libjavacore.so!0x21c87,0x7116694f boot-core-libart.oat!0x1094f
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/itconfig.sp

[JNIEnv] 调用: GetStringUTFChars
  参数: ���B
调用栈:
0xe723df49 libandroid_runtime.so!0x79f49,0x71fc0ddd boot-framework.oat!0x18cddd
[JNIEnv] GetStringUTFChars 返回: log.looper.10150.newsp0.slow

[JNIEnv] 调用: NewStringUTF
  参数: null
调用栈:
0xda7e2b8f libjavacore.so!0x1bb8f,0x71166d05 boot-core-libart.oat!0x10d05
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/itconfig.sp

[JNIEnv] 调用: GetStringUTFChars
  参数: h��

[JNIEnv] 调用: GetStringUTFChars
  参数: �������jU�`jU�`�
�������?���
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: UMCrash

[JNIEnv] 调用: GetStringUTFChars
  参数: ����jU�`jU�`�
�������?���
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: mounted
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/itconfig.sp.bak
调用栈:
0xe723df49 libandroid_runtime.so!0x79f49,0x71fc0ddd boot-framework.oat!0x18cddd
[JNIEnv] GetStringUTFChars 返回: log.looper.10150.newsp1.slow
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: enable : java is true, native is true, anr is true

[JNIEnv] 调用: GetStringUTFChars
  参数: �������jU�`jU�`�
�������?���
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: emulated;0
调用栈:
0xe5407303 libart.so!_ZN3art6Thread10CreatePeerEPKcbP8_jobject+0x4a,0xe5404f2b libart.so!_ZN3art6Thread6AttachEPKcbP8_jobjectb+0x16a,0xe53c7d4b libart.so!_ZN3art7Runtime19AttachCurrentThreadEPKcbP8_jobjectb+0x32,0xe52655e3 libart.so!_ZN3art3JII27AttachCurrentThreadInternalEP7_JavaVMPP7_JNIEnvPvb+0xea,0xb4f36e69 libNetHTProtect.so!0xf6e69,0xb4f36f15 libNetHTProtect.so!0xf6f15,0xb4f37007 libNetHTProtect.so!0xf7007,0xb4fc03a9 libNetHTProtect.so!0x1803a9,0xb4e6c4e9 libNetHTProtect.so!0x2c4e9,0xb4fa17a1 libNetHTProtect.so!0x1617a1,0xb4fb8531 libNetHTProtect.so!0x178531,0xb4fb876b libNetHTProtect.so!0x17876b,0xb4fb79bf libNetHTProtect.so!0x1779bf,0xb4fb7827 libNetHTProtect.so!0x177827,0xb4fb777d libNetHTProtect.so!0x17777d,0xe6387139 libc.so!_ZL15__pthread_startPv+0x2a

[JNIEnv] 调用: GetStringUTFChars
[JNIEnv] GetStringUTFChars 返回: /data/app/~~hYKtoZqlctb0dKGf8OSOKQ==/com.sytt.tzy-YAzL_LiSSbrdnOTT58XTsA==/base.apk
Error: access violation accessing 0x1
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /storage/emulated/0
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: UMCrash

[JNIEnv] 调用: GetStringUTFChars
  参数: ����jU�`jU�`�
�������?���
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /storage/emulated/0
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: crash rate domain is https://errnewlog.umeng.com

[JNIEnv] 调用: GetStringUTFChars
  参数: h(L
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: 内部共享存储空间
调用栈:
0xda7e2b8f libjavacore.so!0x1bb8f,0x71166d05 boot-core-libart.oat!0x10d05
[JNIEnv] GetStringUTFChars 返回: /proc/5547/cmdline

[JNIEnv] 调用: GetStringUTFChars
  参数: (��
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: mounted
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: GetStringUTFChars
  参数: @8-
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: android.os.SystemProperties

[JNIEnv] 调用: GetStringUTFChars
  参数: �2L
调用栈:
0xe723dff3 libandroid_runtime.so!0x79ff3,0x71fcdd57 boot-framework.oat!0x199d57
[JNIEnv] GetStringUTFChars 返回: debug.crs.local

[JNIEnv] 调用: GetStringUTFChars
  参数: �4L
调用栈:
0xda7a2b8d libopenjdk.so!Java_java_io_UnixFileSystem_canonicalize0+0x30,0x70e65bbf boot.oat!0xa7bbf
[JNIEnv] GetStringUTFChars 返回: /storage/emulated/0

[JNIEnv] 调用: NewStringUTF
  参数: /storage/emulated/0
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/crashsdk/logs

[JNIEnv] 调用: GetStringUTFChars
  参数: �4L
调用栈:
0xda7a2c27 libopenjdk.so!Java_java_io_UnixFileSystem_getBooleanAttributes0+0x22,0x70e65c27 boot.oat!0xa7c27
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/crashsdk/logs

[JNIEnv] 调用: GetStringUTFChars
  参数: 7L
调用栈:
0xda7a2bb7 libopenjdk.so!Java_java_io_UnixFileSystem_canonicalize0+0x5a,0x70e65bbf boot.oat!0xa7bbf

[JNIEnv] 调用: GetStringUTFChars
  参数: :-
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/crashsdk/tags

[JNIEnv] 调用: GetStringUTFChars
  参数: 7L���p7Lh6L��r�6L7L
调用栈:
0xda7a2c27 libopenjdk.so!Java_java_io_UnixFileSystem_getBooleanAttributes0+0x22,0x70e65c27 boot.oat!0xa7c27
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/crashsdk/tags

[JNIEnv] 调用: GetStringUTFChars
  参数: �8L
调用栈:
0xda7a2b8d libopenjdk.so!Java_java_io_UnixFileSystem_canonicalize0+0x30,0x70e65bbf boot.oat!0xa7bbf
[JNIEnv] GetStringUTFChars 返回: /storage/emulated/0

[JNIEnv] 调用: NewStringUTF
  参数: /storage/emulated/0

[JNIEnv] 调用: NewStringUTF
  参数: null
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/crashsdk/tags/unique

[JNIEnv] 调用: GetStringUTFChars
  参数: �8L
调用栈:
0xda7a2bb7 libopenjdk.so!Java_java_io_UnixFileSystem_canonicalize0+0x5a,0x70e65bbf boot.oat!0xa7bbf

[JNIEnv] 调用: GetStringUTFChars
  参数: 
调用栈:
0xda7e2b8f libjavacore.so!0x1bb8f,0x71166d05 boot-core-libart.oat!0x10d05
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/crashsdk/tags/unique

[JNIEnv] 调用: GetStringUTFChars
  参数: HP

[JNIEnv] 调用: NewStringUTF
  参数: android.intent.action.BATTERY_CHANGED

[JNIEnv] 调用: NewStringUTF
  参数: android.intent.action.BATTERY_CHANGED
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: MID

[JNIEnv] 调用: GetStringUTFChars
  参数: �;-�#��#�`�
��0p�&��C0�	�O��.P��<�#��;-
调用栈:
0xe723df49 libandroid_runtime.so!0x79f49,0x71fc0ddd boot-framework.oat!0x18cddd
[JNIEnv] GetStringUTFChars 返回: log.looper.10150.CrashSDKNormalHandler.slow
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: read mid from InternalStorage

[JNIEnv] 调用: NewStringUTF
  参数: emulated;0
调用栈:
0xe5407303 libart.so!_ZN3art6Thread10CreatePeerEPKcbP8_jobject+0x4a,0xe5404f2b libart.so!_ZN3art6Thread6AttachEPKcbP8_jobjectb+0x16a,0xe53c7d4b libart.so!_ZN3art7Runtime19AttachCurrentThreadEPKcbP8_jobjectb+0x32,0xe52655e3 libart.so!_ZN3art3JII27AttachCurrentThreadInternalEP7_JavaVMPP7_JNIEnvPvb+0xea,0xb4f36e69 libNetHTProtect.so!0xf6e69,0xb4f36f15 libNetHTProtect.so!0xf6f15,0xb4f37075 libNetHTProtect.so!0xf7075,0xb4fcfe29 libNetHTProtect.so!0x18fe29,0xb4fe49fb libNetHTProtect.so!0x1a49fb,0xb4fe3af3 libNetHTProtect.so!0x1a3af3,0xb4fe3077 libNetHTProtect.so!0x1a3077,0xb4f90935 libNetHTProtect.so!0x150935,0xb4f90af3 libNetHTProtect.so!0x150af3,0xb4fb876b libNetHTProtect.so!0x17876b,0xb4fb79bf libNetHTProtect.so!0x1779bf,0xb4fb7827 libNetHTProtect.so!0x177827

[JNIEnv] 调用: NewStringUTF
  参数: com.netease.htprotect.poly.a
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: GetStringUTFChars
  参数: �EL
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /storage/emulated/0
调用栈:
0xb4f38341 libNetHTProtect.so!0xf8341,0xb4edce8f libNetHTProtect.so!0x9ce8f,0xb4edc187 libNetHTProtect.so!0x9c187,0xb4fd006b libNetHTProtect.so!0x19006b,0xb4fe49fb libNetHTProtect.so!0x1a49fb,0xb4fe3af3 libNetHTProtect.so!0x1a3af3,0xb4fe3077 libNetHTProtect.so!0x1a3077,0xb4f90935 libNetHTProtect.so!0x150935,0xb4f90af3 libNetHTProtect.so!0x150af3,0xb4fb876b libNetHTProtect.so!0x17876b,0xb4fb79bf libNetHTProtect.so!0x1779bf,0xb4fb7827 libNetHTProtect.so!0x177827,0xb4fb777d libNetHTProtect.so!0x17777d,0xe6387139 libc.so!_ZL15__pthread_startPv+0x2a,0xe633fd57 libc.so!__start_thread+0x20

[JNIEnv] 调用: GetStringUTFChars
  参数: 
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /storage/emulated/0
调用栈:
0xda7e2b8f libjavacore.so!0x1bb8f,0x71166d05 boot-core-libart.oat!0x10d05
[JNIEnv] GetStringUTFChars 返回: /dev/null

[JNIEnv] 调用: GetStringUTFChars
  参数: �EL
调用栈:
0xe534c0fd libart.so!_ZN3artL29VMClassLoader_findLoadedClassEP7_JNIEnvP7_jclassP8_jobjectP8_jstring+0x40,0x711656bb boot-core-libart.oat!0xf6bb
[JNIEnv] GetStringUTFChars 返回: com.netease.htprotect.poly.a

[JNIEnv] 调用: GetStringUTFChars
  参数: 
调用栈:
0xda7e2b8f libjavacore.so!0x1bb8f,0x71166d05 boot-core-libart.oat!0x10d05
[JNIEnv] GetStringUTFChars 返回: /dev/null

[JNIEnv] 调用: GetStringUTFChars
  参数: �EL
调用栈:
0xe534c0fd libart.so!_ZN3artL29VMClassLoader_findLoadedClassEP7_JNIEnvP7_jclassP8_jobjectP8_jstring+0x40,0x711656bb boot-core-libart.oat!0xf6bb
[JNIEnv] GetStringUTFChars 返回: com.netease.htprotect.poly.a

[JNIEnv] 调用: GetStringUTFChars
  参数: 
调用栈:
0xda7e2b8f libjavacore.so!0x1bb8f,0x71166d05 boot-core-libart.oat!0x10d05
[JNIEnv] GetStringUTFChars 返回: /dev/null

[JNIEnv] 调用: GetStringUTFChars
  参数: �EL
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.netease.htprotect.poly.a

[JNIEnv] 调用: GetStringUTFChars
  参数: 
调用栈:
0xda7e2b8f libjavacore.so!0x1bb8f,0x71166d05 boot-core-libart.oat!0x10d05
[JNIEnv] GetStringUTFChars 返回: /dev/null

[JNIEnv] 调用: GetStringUTFChars
  参数: �EL
调用栈:
0xe533390b libart.so!_ZN3artL25DexFile_defineClassNativeEP7_JNIEnvP7_jclassP8_jstringP8_jobjectS7_S7_+0x52,0x711641b3 boot-core-libart.oat!0xe1b3
[JNIEnv] GetStringUTFChars 返回: com.netease.htprotect.poly.a

[JNIEnv] 调用: GetStringUTFChars
  参数: 
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: 内部共享存储空间
调用栈:
0xda7e2b8f libjavacore.so!0x1bb8f,0x71166d05 boot-core-libart.oat!0x10d05
[JNIEnv] GetStringUTFChars 返回: /dev/null

[JNIEnv] 调用: GetStringUTFChars
  参数: �EL
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: mounted
调用栈:
0xe533390b libart.so!_ZN3artL25DexFile_defineClassNativeEP7_JNIEnvP7_jclassP8_jstringP8_jobjectS7_S7_+0x52,0x711641b3 boot-core-libart.oat!0xe1b3
[JNIEnv] GetStringUTFChars 返回: com.netease.htprotect.poly.a
调用栈:
0xda7e2b8f libjavacore.so!0x1bb8f,0x71166d05 boot-core-libart.oat!0x10d05
[JNIEnv] GetStringUTFChars 返回: /dev/null

[JNIEnv] 调用: GetStringUTFChars
  参数: �EL
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: GetStringUTFChars
  参数: �H-
调用栈:
0xda7e2b8f libjavacore.so!0x1bb8f,0x71166d05 boot-core-libart.oat!0x10d05
[JNIEnv] GetStringUTFChars 返回: /dev/null

[JNIEnv] 调用: GetStringUTFChars
  参数: �EL
调用栈:
0xda7e2b8f libjavacore.so!0x1bb8f,0x71166d05 boot-core-libart.oat!0x10d05
[JNIEnv] GetStringUTFChars 返回: /storage/emulated/0/Tencent/mta/.mid.txt

[JNIEnv] 调用: NewStringUTF
  参数: open
调用栈:
0xda7e2b8f libjavacore.so!0x1bb8f,0x71166d05 boot-core-libart.oat!0x10d05
[JNIEnv] GetStringUTFChars 返回: /dev/null

[JNIEnv] 调用: GetStringUTFChars
  参数: �EL
调用栈:
0xda7e2bc3 libjavacore.so!0x1bbc3,0x71166d05 boot-core-libart.oat!0x10d05

[JNIEnv] 调用: NewStringUTF
  参数: No such file or directory
调用栈:
0xda7e2b8f libjavacore.so!0x1bb8f,0x71166d05 boot-core-libart.oat!0x10d05
[JNIEnv] GetStringUTFChars 返回: /dev/null

[JNIEnv] 调用: GetStringUTFChars
  参数: �EL
调用栈:
0xda7e6703 libjavacore.so!0x1f703,0x71166c91 boot-core-libart.oat!0x10c91

[JNIEnv] 调用: NewStringUTF
  参数: No such file or directory
调用栈:
0xda7e2b8f libjavacore.so!0x1bb8f,0x71166d05 boot-core-libart.oat!0x10d05
[JNIEnv] GetStringUTFChars 返回: /dev/null

[JNIEnv] 调用: GetStringUTFChars
  参数: �EL
调用栈:
0xda7e6703 libjavacore.so!0x1f703,0x71166c91 boot-core-libart.oat!0x10c91

[JNIEnv] 调用: GetStringUTFChars
  参数: 
调用栈:
0xda7e2b8f libjavacore.so!0x1bb8f,0x71166d05 boot-core-libart.oat!0x10d05
[JNIEnv] GetStringUTFChars 返回: /dev/null

[JNIEnv] 调用: GetStringUTFChars
  参数: �EL
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: MID

[JNIEnv] 调用: GetStringUTFChars
  参数: 8�-�P-
调用栈:
0xda7e2b8f libjavacore.so!0x1bb8f,0x71166d05 boot-core-libart.oat!0x10d05
[JNIEnv] GetStringUTFChars 返回: /dev/null

[JNIEnv] 调用: GetStringUTFChars
  参数: �EL
调用栈:
0xda7e2b8f libjavacore.so!0x1bb8f,0x71166d05 boot-core-libart.oat!0x10d05
[JNIEnv] GetStringUTFChars 返回: /dev/null

[JNIEnv] 调用: GetStringUTFChars
  参数: �EL
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 
java.io.FileNotFoundException: /storage/emulated/0/Tencent/mta/.mid.txt: open failed: ENOENT (No such file or directory)
	at libcore.io.IoBridge.open(IoBridge.java:575)
	at java.io.FileInputStream.<init>(FileInputStream.java:160)
	at java.io.FileReader.<init>(FileReader.java:72)
	at com.tencent.a.a.a.a.a.a(Unknown Source:2)
	at com.tencent.a.a.a.a.b.b(Unknown Source:23)
	at com.tencent.a.a.a.a.f.o(Unknown Source:7)
	at com.tencent.a.a.a.a.g.b(Unknown Source:32)
	at com.tencent.a.a.a.a.g.p(Unknown Source:34)
	at com.tencent.wxop.stat.StatConfig.getLocalMidOnly(Unknown Source:6)
	at com.tencent.wxop.stat.event.e.<init>(Unknown Source:158)
	at com.tencent.wxop.stat.event.k.<init>(Unknown Source:0)
	at com.tencent.wxop.stat.StatServiceImpl.a(Unknown Source:48)
	at com.tencent.wxop.stat.StatServiceImpl.a(Unknown Source:149)
	at com.tencent.wxop.stat.an.run(Unknown Source:5)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1167)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:641)
	at java.lang.Thread.run(Thread.java:920)
Caused by: android.system.ErrnoException: open failed: ENOENT (No such file or directory)
	at libcore.io.Linux.open(Native Method)
	at libcore.io.ForwardingOs.open(ForwardingOs.java:567)
	at libcore.io.BlockGuardOs.open(BlockGuardOs.java:273)
	at libcore.io.ForwardingOs.open(ForwardingOs.java:567)
	at android.app.ActivityThread$AndroidOs.open(ActivityThread.java:7756)
	at libcore.io.IoBridge.open(IoBridge.java:561)
	... 16 more


[JNIEnv] 调用: GetStringUTFChars
  参数: 
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: MID

[JNIEnv] 调用: GetStringUTFChars
  参数: @�-(�#��#�`�
�$1p�<�#�x�p���pT��<�#�@�-
调用栈:
0xda7e2b8f libjavacore.so!0x1bb8f,0x71166d05 boot-core-libart.oat!0x10d05
[JNIEnv] GetStringUTFChars 返回: /dev/null

[JNIEnv] 调用: GetStringUTFChars
  参数: �EL
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: read mid from sharedPreferences

[JNIEnv] 调用: GetStringUTFChars
  参数: 0Q�
调用栈:
0xda7e2b8f libjavacore.so!0x1bb8f,0x71166d05 boot-core-libart.oat!0x10d05
[JNIEnv] GetStringUTFChars 返回: /dev/null

[JNIEnv] 调用: GetStringUTFChars
  参数: HX

[JNIEnv] 调用: GetStringUTFChars
  参数: (��

[JNIEnv] 调用: GetStringUTFChars
  参数: �'�
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs

[JNIEnv] 调用: GetStringUTFChars
  参数: ��-
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: android.os.SystemProperties

[JNIEnv] 调用: GetStringUTFChars
  参数: (hL
调用栈:
0xe723df49 libandroid_runtime.so!0x79f49,0x71fc0ddd boot-framework.oat!0x18cddd
[JNIEnv] GetStringUTFChars 返回: log.looper.10150.CrashSDKBkgdHandler.slow
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/crashsdk/tags

[JNIEnv] 调用: GetStringUTFChars
  参数: �'�
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/com.sytt.tzy_preferences.xml.bak

[JNIEnv] 调用: NewStringUTF
  参数: access
调用栈:
0xe723dff3 libandroid_runtime.so!0x79ff3,0x71fcdd57 boot-framework.oat!0x199d57
[JNIEnv] GetStringUTFChars 返回: debug.crs.logs

[JNIEnv] 调用: GetStringUTFChars
  参数: �iL

[JNIEnv] 调用: GetStringUTFChars
[JNIEnv] GetStringUTFChars 返回: /data/app/~~hYKtoZqlctb0dKGf8OSOKQ==/com.sytt.tzy-YAzL_LiSSbrdnOTT58XTsA==/base.apk
Error: access violation accessing 0x15
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)

[JNIEnv] 调用: GetStringUTFChars
  参数: ���
调用栈:
0xda7a2c27 libopenjdk.so!Java_java_io_UnixFileSystem_getBooleanAttributes0+0x22,0x70e65c27 boot.oat!0xa7c27
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/crashsdk/tags

[JNIEnv] 调用: GetStringUTFChars
  参数: *�
调用栈:
0xda7de385 libjavacore.so!0x17385,0x7116659b boot-core-libart.oat!0x1059b

[JNIEnv] 调用: GetStringUTFChars
  参数: H�-
调用栈:
0xda7e2b8f libjavacore.so!0x1bb8f,0x71166d05 boot-core-libart.oat!0x10d05
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/crashsdk/tags/YZT0TTYS0MOC.ss

[JNIEnv] 调用: GetStringUTFChars
  参数:  .�
调用栈:
0xda79c369 libopenjdk.so!ZipFile_open+0x24,0x70e69a47 boot.oat!0xaba47
[JNIEnv] GetStringUTFChars 返回: /data/app/~~hYKtoZqlctb0dKGf8OSOKQ==/com.sytt.tzy-YAzL_LiSSbrdnOTT58XTsA==/base.apk

[JNIEnv] 调用: GetStringUTFChars
  参数: 8U�r8q9��u�u<
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/crashsdk/logs

[JNIEnv] 调用: GetStringUTFChars
  参数: �iL
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/com.sytt.tzy_preferences.xml

[JNIEnv] 调用: NewStringUTF
  参数: access
调用栈:
0xdc22e867 libicu_jni.so!0x8867,0x72677869 boot-core-icu4j.oat!0x2e869
[JNIEnv] GetStringUTFChars 返回: UTF-8

[JNIEnv] 调用: GetStringUTFChars
  参数: ��XX�G�q
调用栈:
0xda7de385 libjavacore.so!0x17385,0x7116659b boot-core-libart.oat!0x1059b

[JNIEnv] 调用: GetStringUTFChars
  参数: H�-h_�p0Z�p(h�ph�Kq8h�ph�Kqh�Kq�?c�wu�pZ�p�5��5�H�-h�Kq�?c�t?c����q�Mtq�5���r��-H�-�?c�t?c��K�pH�-�5���-��qP��p�5�x�-��- �- �-H�-�,r�xq
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: crashsdk

[JNIEnv] 调用: GetStringUTFChars
  参数: XX�G�q
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/crashsdk/tags/YZT0TTYS0MOC.ctj

[JNIEnv] 调用: NewStringUTF
  参数: access
调用栈:
0xda7a2c27 libopenjdk.so!Java_java_io_UnixFileSystem_getBooleanAttributes0+0x22,0x70e65c27 boot.oat!0xa7c27
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/crashsdk/logs

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x29
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/crashsdk/logs

[JNIEnv] 调用: GetStringUTFChars
  参数: �mL
调用栈:
0xda7de385 libjavacore.so!0x17385,0x7116659b boot-core-libart.oat!0x1059b

[JNIEnv] 调用: GetStringUTFChars
  参数: h0�
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: version unique build id: e3432b7c

[JNIEnv] 调用: GetStringUTFChars
  参数: X
调用栈:
0xda7e8c87 libjavacore.so!0x21c87,0x7116694f boot-core-libart.oat!0x1094f
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/com.sytt.tzy_preferences.xml

[JNIEnv] 调用: NewStringUTF
  参数: stat
调用栈:
0xda7e2b8f libjavacore.so!0x1bb8f,0x71166d05 boot-core-libart.oat!0x10d05
[JNIEnv] GetStringUTFChars 返回: /data/app/~~hYKtoZqlctb0dKGf8OSOKQ==/com.sytt.tzy-YAzL_LiSSbrdnOTT58XTsA==/lib/arm/libcrashsdk.so

[JNIEnv] 调用: GetStringUTFChars
  参数: �mL �
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/crashsdk/tags/YZT0TTYS0MOC.ctn

[JNIEnv] 调用: NewStringUTF
  参数: access
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/crashsdk/tags/ver

[JNIEnv] 调用: GetStringUTFChars
  参数: X
调用栈:
0xda7e8d4f libjavacore.so!0x21d4f,0x7116694f boot-core-libart.oat!0x1094f

[JNIEnv] 调用: GetStringUTFChars
  参数: ��Vq�6� �
调用栈:
0xda745fcd libopenjdkjvm.so!JVM_NativeLoad+0x2c,0x70e65741 boot.oat!0xa7741
[JNIEnv] GetStringUTFChars 返回: /data/app/~~hYKtoZqlctb0dKGf8OSOKQ==/com.sytt.tzy-YAzL_LiSSbrdnOTT58XTsA==/lib/arm/libcrashsdk.so

[JNIEnv] 调用: GetStringUTFChars
  参数: ���
调用栈:
0xda7de385 libjavacore.so!0x17385,0x7116659b boot-core-libart.oat!0x1059b

[JNIEnv] 调用: GetStringUTFChars
  参数: p5�
调用栈:
0xda7e2b8f libjavacore.so!0x1bb8f,0x71166d05 boot-core-libart.oat!0x10d05
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/crashsdk/tags/ver

[JNIEnv] 调用: GetStringUTFChars
  参数: Xh_�p0Z�p(h�ph�Kq8h�ph�Kqh�Kq8�v�wu�pZ�p�5��5�Xh�Kq8�v���v����q�Mtq�5�0X�P�pXXX�X7�q��r�5�X���pB�p�5�0X�q��rXX
调用栈:
0xda7e8c87 libjavacore.so!0x21c87,0x7116694f boot-core-libart.oat!0x1094f
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/crashsdk/tags/ver
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/crashsdk/tags/YZT0TTYS0MOC.cta

[JNIEnv] 调用: NewStringUTF
  参数: access
调用栈:
0xa54145e0 libcrashsdk.so!0x435e0,0xa53d811c libcrashsdk.so!0x711c,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50b13d7 libart.so!art_quick_invoke_stub_internal+0x46,0xe54c48a9 libart.so!art_quick_invoke_static_stub+0x120,0xe51065b7 libart.so!_ZN3art9ArtMethod6InvokeEPNS_6ThreadEPjjPNS_6JValueEPKc+0x9e,0xe520ce2f libart.so!_ZN3art11interpreter34ArtInterpreterToCompiledCodeBridgeEPNS_6ThreadEPNS_9ArtMethodEPNS_11ShadowFrameEtPNS_6JValueE+0x116,0xe520837d libart.so!_ZN3art11interpreter6DoCallILb0ELb0EEEbPNS_9ArtMethodEPNS_6ThreadERNS_11ShadowFrameEPKNS_11InstructionEtPNS_6JValueE+0x29c,0xe54b1f25 libart.so!MterpInvokeStatic+0x3bc,0xe509eb98 libart.so!mterp_op_invoke_static+0x18,0xe5201e05 libart.so!_ZN3art11interpreterL7ExecuteEPNS_6ThreadERKNS_20CodeItemDataAccessorERNS_11ShadowFrameENS_6JValueEbb+0xc8,0xe5207aa9 libart.so!_ZN3art11interpreter30EnterInterpreterFromEntryPointEPNS_6ThreadERKNS_20CodeItemDataAccessorEPNS_11ShadowFrameE+0x8c,0xe5499c25 libart.so!artQuickToInterpreterBridge+0x2a4,0xe50b5f25 libart.so!art_quick_to_interpreter_bridge+0x24,0xe50ac560 libart.so!nterp_helper+0xb0,0xe50ac4ec libart.so!nterp_helper+0x3c
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy

[JNIEnv] 调用: GetStringUTFChars
  参数: �
调用栈:
0xda7de385 libjavacore.so!0x17385,0x7116659b boot-core-libart.oat!0x1059b

[JNIEnv] 调用: GetStringUTFChars
  参数:  .�h_�p0Z�p(h�ph�Kq8h�ph�Kqh�Kq
调用栈:
0xe723e147 libandroid_runtime.so!0x7a147,0x71fcdc41 boot-framework.oat!0x199c41
[JNIEnv] GetStringUTFChars 返回: cache_key.telephony.get_default_data_sub_id

[JNIEnv] 调用: GetStringUTFChars
  参数: ��Vq?�~�gr(��p
调用栈:
0xda7e4143 libjavacore.so!0x1d143,0x71164e9f boot-core-libart.oat!0xee9f
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/crashsdk/tags/YZT0TTYS0MOC.ctj

[JNIEnv] 调用: NewStringUTF
  参数: remove
调用栈:
0xe723e147 libandroid_runtime.so!0x7a147,0x71fcdc41 boot-framework.oat!0x199c41
[JNIEnv] GetStringUTFChars 返回: cache_key.telephony.get_default_sms_sub_id

[JNIEnv] 调用: GetStringUTFChars
  参数: 
调用栈:
0xda7e416b libjavacore.so!0x1d16b,0x71164e9f boot-core-libart.oat!0xee9f

[JNIEnv] 调用: GetStringUTFChars
  参数: h0�h_�p0Z�p(h�ph�Kq8h�ph�Kqh�Kq
调用栈:
0xe723e147 libandroid_runtime.so!0x7a147,0x71fcdc41 boot-framework.oat!0x199c41
[JNIEnv] GetStringUTFChars 返回: cache_key.telephony.get_default_sub_id

[JNIEnv] 调用: GetStringUTFChars
  参数: pOWq
调用栈:
0xda7e4143 libjavacore.so!0x1d143,0x71164e9f boot-core-libart.oat!0xee9f
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/crashsdk/tags/YZT0TTYS0MOC.ctn

[JNIEnv] 调用: NewStringUTF
  参数: remove
调用栈:
0xda7e416b libjavacore.so!0x1d16b,0x71164e9f boot-core-libart.oat!0xee9f

[JNIEnv] 调用: GetStringUTFChars
  参数: p5�h_�p0Z�p(h�ph�Kq8h�ph�Kqh�Kq
调用栈:
0xda7a9105 libopenjdk.so!Mock_getProperty+0x2c,0x70e653e3 boot.oat!0xa73e3
[JNIEnv] GetStringUTFChars 返回: persist.radio.default.data

[JNIEnv] 调用: NewStringUTF
  参数: 0
调用栈:
0xda7e4143 libjavacore.so!0x1d143,0x71164e9f boot-core-libart.oat!0xee9f
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/crashsdk/tags/YZT0TTYS0MOC.cta

[JNIEnv] 调用: NewStringUTF
  参数: remove
调用栈:
0xda7e416b libjavacore.so!0x1d16b,0x71164e9f boot-core-libart.oat!0xee9f

[JNIEnv] 调用: GetStringUTFChars
  参数: *�B
调用栈:
0xa54145e0 libcrashsdk.so!0x435e0,0xa53d811c libcrashsdk.so!0x711c,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50acc50 libart.so!nterp_helper+0x7a0,0xe50ac560 libart.so!nterp_helper+0xb0,0xe50ac4ec libart.so!nterp_helper+0x3c,0xe50ac4ec libart.so!nterp_helper+0x3c,0xe50ac4ec libart.so!nterp_helper+0x3c,0xe50b13d7 libart.so!art_quick_invoke_stub_internal+0x46,0xe54c476f libart.so!art_quick_invoke_stub+0x11e,0xe51065a5 libart.so!_ZN3art9ArtMethod6InvokeEPNS_6ThreadEPjjPNS_6JValueEPKc+0x8c,0xe520ce2f libart.so!_ZN3art11interpreter34ArtInterpreterToCompiledCodeBridgeEPNS_6ThreadEPNS_9ArtMethodEPNS_11ShadowFrameEtPNS_6JValueE+0x116,0xe520837d libart.so!_ZN3art11interpreter6DoCallILb0ELb0EEEbPNS_9ArtMethodEPNS_6ThreadERNS_11ShadowFrameEPKNS_11InstructionEtPNS_6JValueE+0x29c,0xe54a8095 libart.so!MterpInvokeVirtual+0x400,0xe509ea18 libart.so!mterp_op_invoke_virtual+0x18,0xe5201e05 libart.so!_ZN3art11interpreterL7ExecuteEPNS_6ThreadERKNS_20CodeItemDataAccessorERNS_11ShadowFrameENS_6JValueEbb+0xc8
[JNIEnv] GetStringUTFChars 返回: crashsdk/tags

[JNIEnv] 调用: GetStringUTFChars
  参数: L
调用栈:
0xda7e2b8f libjavacore.so!0x1bb8f,0x71166d05 boot-core-libart.oat!0x10d05
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/crashsdk/tags/YZT0TTYS0MOC.ss

[JNIEnv] 调用: GetStringUTFChars
  参数: ��@@�`^��T^��`�
���p��^��

[JNIEnv] 调用: GetStringUTFChars
  参数: *�
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: crashsdk

[JNIEnv] 调用: GetStringUTFChars
  参数: @@�`^��T^��`�
���p��^��
调用栈:
0xda7a9141 libopenjdk.so!Mock_getProperty+0x68,0x70e653e3 boot.oat!0xa73e3

[JNIEnv] 调用: GetStringUTFChars
  参数: 
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/crashsdk/tags/YZT0TTYS0MOC.ss
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: Unexp log not enabled, skip update unexp info!

[JNIEnv] 调用: GetStringUTFChars
  参数: *�
调用栈:
0xa54145e0 libcrashsdk.so!0x435e0,0xa53d811c libcrashsdk.so!0x711c,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50acc50 libart.so!nterp_helper+0x7a0,0xe50ac560 libart.so!nterp_helper+0xb0,0xe50ac4ec libart.so!nterp_helper+0x3c,0xe50ac4ec libart.so!nterp_helper+0x3c,0xe50ac4ec libart.so!nterp_helper+0x3c,0xe50b13d7 libart.so!art_quick_invoke_stub_internal+0x46,0xe54c476f libart.so!art_quick_invoke_stub+0x11e,0xe51065a5 libart.so!_ZN3art9ArtMethod6InvokeEPNS_6ThreadEPjjPNS_6JValueEPKc+0x8c,0xe520ce2f libart.so!_ZN3art11interpreter34ArtInterpreterToCompiledCodeBridgeEPNS_6ThreadEPNS_9ArtMethodEPNS_11ShadowFrameEtPNS_6JValueE+0x116,0xe520837d libart.so!_ZN3art11interpreter6DoCallILb0ELb0EEEbPNS_9ArtMethodEPNS_6ThreadERNS_11ShadowFrameEPKNS_11InstructionEtPNS_6JValueE+0x29c,0xe54a8095 libart.so!MterpInvokeVirtual+0x400,0xe509ea18 libart.so!mterp_op_invoke_virtual+0x18,0xe5201e05 libart.so!_ZN3art11interpreterL7ExecuteEPNS_6ThreadERKNS_20CodeItemDataAccessorERNS_11ShadowFrameENS_6JValueEbb+0xc8
[JNIEnv] GetStringUTFChars 返回: crashsdk/logs

[JNIEnv] 调用: GetStringUTFChars
  参数: xwL
调用栈:
0xe723e147 libandroid_runtime.so!0x7a147,0x71fcdc41 boot-framework.oat!0x199c41
[JNIEnv] GetStringUTFChars 返回: cache_key.telephony.get_default_sub_id

[JNIEnv] 调用: GetStringUTFChars
  参数: HWq���p
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/crashsdk/tags/YZT0TTYS0MOC.ss
调用栈:
0xe723de83 libandroid_runtime.so!0x79e83,0x71fcdccb boot-framework.oat!0x199ccb
[JNIEnv] GetStringUTFChars 返回: gsm.sim.operator.numeric

[JNIEnv] 调用: NewStringUTF
  参数: 46001,46001
调用栈:
0xe723e443 libandroid_runtime.so!0x7a443,0xe633e5b5 libc.so!_ZN16SystemProperties12ReadCallbackEPK9prop_infoPFvPvPKcS5_jES3_+0xa8,0xe723de97 libandroid_runtime.so!0x79e97,0x71fcdccb boot-framework.oat!0x199ccb

[JNIEnv] 调用: GetStringUTFChars
  参数: ��-
调用栈:
0xa54145e0 libcrashsdk.so!0x435e0,0xa53d811c libcrashsdk.so!0x711c,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50acc50 libart.so!nterp_helper+0x7a0,0xe50ac560 libart.so!nterp_helper+0xb0,0xe50ac4ec libart.so!nterp_helper+0x3c,0xe50ac4ec libart.so!nterp_helper+0x3c,0xe50ac4ec libart.so!nterp_helper+0x3c,0xe50b13d7 libart.so!art_quick_invoke_stub_internal+0x46,0xe54c476f libart.so!art_quick_invoke_stub+0x11e,0xe51065a5 libart.so!_ZN3art9ArtMethod6InvokeEPNS_6ThreadEPjjPNS_6JValueEPKc+0x8c,0xe520ce2f libart.so!_ZN3art11interpreter34ArtInterpreterToCompiledCodeBridgeEPNS_6ThreadEPNS_9ArtMethodEPNS_11ShadowFrameEtPNS_6JValueE+0x116,0xe520837d libart.so!_ZN3art11interpreter6DoCallILb0ELb0EEEbPNS_9ArtMethodEPNS_6ThreadERNS_11ShadowFrameEPKNS_11InstructionEtPNS_6JValueE+0x29c,0xe54a8095 libart.so!MterpInvokeVirtual+0x400,0xe509ea18 libart.so!mterp_op_invoke_virtual+0x18,0xe5201e05 libart.so!_ZN3art11interpreterL7ExecuteEPNS_6ThreadERKNS_20CodeItemDataAccessorERNS_11ShadowFrameENS_6JValueEbb+0xc8
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/msdb//crashsdk/logs/

[JNIEnv] 调用: GetStringUTFChars
  参数: ,L
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /binsu

[JNIEnv] 调用: NewStringUTF
  参数: access
调用栈:
0xa54145e0 libcrashsdk.so!0x435e0,0xa53d811c libcrashsdk.so!0x711c,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50acc50 libart.so!nterp_helper+0x7a0,0xe50ac560 libart.so!nterp_helper+0xb0,0xe50ac4ec libart.so!nterp_helper+0x3c,0xe50ac4ec libart.so!nterp_helper+0x3c,0xe50ac4ec libart.so!nterp_helper+0x3c,0xe50b13d7 libart.so!art_quick_invoke_stub_internal+0x46,0xe54c476f libart.so!art_quick_invoke_stub+0x11e,0xe51065a5 libart.so!_ZN3art9ArtMethod6InvokeEPNS_6ThreadEPjjPNS_6JValueEPKc+0x8c,0xe520ce2f libart.so!_ZN3art11interpreter34ArtInterpreterToCompiledCodeBridgeEPNS_6ThreadEPNS_9ArtMethodEPNS_11ShadowFrameEtPNS_6JValueE+0x116,0xe520837d libart.so!_ZN3art11interpreter6DoCallILb0ELb0EEEbPNS_9ArtMethodEPNS_6ThreadERNS_11ShadowFrameEPKNS_11InstructionEtPNS_6JValueE+0x29c,0xe54a8095 libart.so!MterpInvokeVirtual+0x400,0xe509ea18 libart.so!mterp_op_invoke_virtual+0x18,0xe5201e05 libart.so!_ZN3art11interpreterL7ExecuteEPNS_6ThreadERKNS_20CodeItemDataAccessorERNS_11ShadowFrameENS_6JValueEbb+0xc8
[JNIEnv] GetStringUTFChars 返回: com.sytt.tzy

[JNIEnv] 调用: GetStringUTFChars
  参数: 8)�
调用栈:
0xda7de385 libjavacore.so!0x17385,0x7116659b boot-core-libart.oat!0x1059b

[JNIEnv] 调用: GetStringUTFChars
  参数: ��-
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /system/bin/su

[JNIEnv] 调用: NewStringUTF
  参数: access
调用栈:
0xda7de385 libjavacore.so!0x17385,0x7116659b boot-core-libart.oat!0x1059b

[JNIEnv] 调用: GetStringUTFChars
  参数: ��-
调用栈:
0xa54145e0 libcrashsdk.so!0x435e0,0xa53d811c libcrashsdk.so!0x711c,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50acc50 libart.so!nterp_helper+0x7a0,0xe50ac560 libart.so!nterp_helper+0xb0,0xe50ac4ec libart.so!nterp_helper+0x3c,0xe50ac4ec libart.so!nterp_helper+0x3c,0xe50ac4ec libart.so!nterp_helper+0x3c,0xe50b13d7 libart.so!art_quick_invoke_stub_internal+0x46,0xe54c476f libart.so!art_quick_invoke_stub+0x11e,0xe51065a5 libart.so!_ZN3art9ArtMethod6InvokeEPNS_6ThreadEPjjPNS_6JValueEPKc+0x8c,0xe520ce2f libart.so!_ZN3art11interpreter34ArtInterpreterToCompiledCodeBridgeEPNS_6ThreadEPNS_9ArtMethodEPNS_11ShadowFrameEtPNS_6JValueE+0x116,0xe520837d libart.so!_ZN3art11interpreter6DoCallILb0ELb0EEEbPNS_9ArtMethodEPNS_6ThreadERNS_11ShadowFrameEPKNS_11InstructionEtPNS_6JValueE+0x29c,0xe54a8095 libart.so!MterpInvokeVirtual+0x400,0xe509ea18 libart.so!mterp_op_invoke_virtual+0x18,0xe5201e05 libart.so!_ZN3art11interpreterL7ExecuteEPNS_6ThreadERKNS_20CodeItemDataAccessorERNS_11ShadowFrameENS_6JValueEbb+0xc8
[JNIEnv] GetStringUTFChars 返回: YZT0TTYS0MOC

[JNIEnv] 调用: GetStringUTFChars
  参数: �,�
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /system/xbin/su

[JNIEnv] 调用: NewStringUTF
  参数: access
调用栈:
0xda7de385 libjavacore.so!0x17385,0x7116659b boot-core-libart.oat!0x1059b

[JNIEnv] 调用: GetStringUTFChars
  参数: ��-
调用栈:
0xa54145e0 libcrashsdk.so!0x435e0,0xa53d811c libcrashsdk.so!0x711c,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50acc50 libart.so!nterp_helper+0x7a0,0xe50ac560 libart.so!nterp_helper+0xb0,0xe50ac4ec libart.so!nterp_helper+0x3c,0xe50ac4ec libart.so!nterp_helper+0x3c,0xe50ac4ec libart.so!nterp_helper+0x3c,0xe50b13d7 libart.so!art_quick_invoke_stub_internal+0x46,0xe54c476f libart.so!art_quick_invoke_stub+0x11e,0xe51065a5 libart.so!_ZN3art9ArtMethod6InvokeEPNS_6ThreadEPjjPNS_6JValueEPKc+0x8c,0xe520ce2f libart.so!_ZN3art11interpreter34ArtInterpreterToCompiledCodeBridgeEPNS_6ThreadEPNS_9ArtMethodEPNS_11ShadowFrameEtPNS_6JValueE+0x116,0xe520837d libart.so!_ZN3art11interpreter6DoCallILb0ELb0EEEbPNS_9ArtMethodEPNS_6ThreadERNS_11ShadowFrameEPKNS_11InstructionEtPNS_6JValueE+0x29c,0xe54a8095 libart.so!MterpInvokeVirtual+0x400,0xe509ea18 libart.so!mterp_op_invoke_virtual+0x18,0xe5201e05 libart.so!_ZN3art11interpreterL7ExecuteEPNS_6ThreadERKNS_20CodeItemDataAccessorERNS_11ShadowFrameENS_6JValueEbb+0xc8
[JNIEnv] GetStringUTFChars 返回: 1.0.0

[JNIEnv] 调用: GetStringUTFChars
  参数: �Oq
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /system/sbin/su

[JNIEnv] 调用: NewStringUTF
  参数: access
调用栈:
0xda7de385 libjavacore.so!0x17385,0x7116659b boot-core-libart.oat!0x1059b

[JNIEnv] 调用: GetStringUTFChars
  参数: ��-
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /sbin/su

[JNIEnv] 调用: NewStringUTF
  参数: access
调用栈:
0xda7de385 libjavacore.so!0x17385,0x7116659b boot-core-libart.oat!0x1059b

[JNIEnv] 调用: GetStringUTFChars
  参数: ��-
调用栈:
0xa54145e0 libcrashsdk.so!0x435e0,0xa53d811c libcrashsdk.so!0x711c,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50acc50 libart.so!nterp_helper+0x7a0,0xe50ac560 libart.so!nterp_helper+0xb0,0xe50ac4ec libart.so!nterp_helper+0x3c,0xe50ac4ec libart.so!nterp_helper+0x3c,0xe50ac4ec libart.so!nterp_helper+0x3c,0xe50b13d7 libart.so!art_quick_invoke_stub_internal+0x46,0xe54c476f libart.so!art_quick_invoke_stub+0x11e,0xe51065a5 libart.so!_ZN3art9ArtMethod6InvokeEPNS_6ThreadEPjjPNS_6JValueEPKc+0x8c,0xe520ce2f libart.so!_ZN3art11interpreter34ArtInterpreterToCompiledCodeBridgeEPNS_6ThreadEPNS_9ArtMethodEPNS_11ShadowFrameEtPNS_6JValueE+0x116,0xe520837d libart.so!_ZN3art11interpreter6DoCallILb0ELb0EEEbPNS_9ArtMethodEPNS_6ThreadERNS_11ShadowFrameEPKNS_11InstructionEtPNS_6JValueE+0x29c,0xe54a8095 libart.so!MterpInvokeVirtual+0x400,0xe509ea18 libart.so!mterp_op_invoke_virtual+0x18,0xe5201e05 libart.so!_ZN3art11interpreterL7ExecuteEPNS_6ThreadERKNS_20CodeItemDataAccessorERNS_11ShadowFrameENS_6JValueEbb+0xc8
[JNIEnv] GetStringUTFChars 返回: release

[JNIEnv] 调用: GetStringUTFChars
  参数: �X
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /vendor/bin/su

[JNIEnv] 调用: NewStringUTF
  参数: access
调用栈:
0xda7de385 libjavacore.so!0x17385,0x7116659b boot-core-libart.oat!0x1059b

[JNIEnv] 调用: NewStringUTF
  参数: emulated;0
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /storage/emulated/0
调用栈:
0xa54145e0 libcrashsdk.so!0x435e0,0xa53d811c libcrashsdk.so!0x711c,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50acc50 libart.so!nterp_helper+0x7a0,0xe50ac560 libart.so!nterp_helper+0xb0,0xe50ac4ec libart.so!nterp_helper+0x3c,0xe50ac4ec libart.so!nterp_helper+0x3c,0xe50ac4ec libart.so!nterp_helper+0x3c,0xe50b13d7 libart.so!art_quick_invoke_stub_internal+0x46,0xe54c476f libart.so!art_quick_invoke_stub+0x11e,0xe51065a5 libart.so!_ZN3art9ArtMethod6InvokeEPNS_6ThreadEPjjPNS_6JValueEPKc+0x8c,0xe520ce2f libart.so!_ZN3art11interpreter34ArtInterpreterToCompiledCodeBridgeEPNS_6ThreadEPNS_9ArtMethodEPNS_11ShadowFrameEtPNS_6JValueE+0x116,0xe520837d libart.so!_ZN3art11interpreter6DoCallILb0ELb0EEEbPNS_9ArtMethodEPNS_6ThreadERNS_11ShadowFrameEPKNS_11InstructionEtPNS_6JValueE+0x29c,0xe54a8095 libart.so!MterpInvokeVirtual+0x400,0xe509ea18 libart.so!mterp_op_invoke_virtual+0x18,0xe5201e05 libart.so!_ZN3art11interpreterL7ExecuteEPNS_6ThreadERKNS_20CodeItemDataAccessorERNS_11ShadowFrameENS_6JValueEbb+0xc8
[JNIEnv] GetStringUTFChars 返回: e3432b7c

[JNIEnv] 调用: GetStringUTFChars
  参数: �wL
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /storage/emulated/0
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: 内部共享存储空间
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: mounted
调用栈:
0xa54145e0 libcrashsdk.so!0x435e0,0xa53d811c libcrashsdk.so!0x711c,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50acc50 libart.so!nterp_helper+0x7a0,0xe50ac560 libart.so!nterp_helper+0xb0,0xe50ac4ec libart.so!nterp_helper+0x3c,0xe50ac4ec libart.so!nterp_helper+0x3c,0xe50ac4ec libart.so!nterp_helper+0x3c,0xe50b13d7 libart.so!art_quick_invoke_stub_internal+0x46,0xe54c476f libart.so!art_quick_invoke_stub+0x11e,0xe51065a5 libart.so!_ZN3art9ArtMethod6InvokeEPNS_6ThreadEPjjPNS_6JValueEPKc+0x8c,0xe520ce2f libart.so!_ZN3art11interpreter34ArtInterpreterToCompiledCodeBridgeEPNS_6ThreadEPNS_9ArtMethodEPNS_11ShadowFrameEtPNS_6JValueE+0x116,0xe520837d libart.so!_ZN3art11interpreter6DoCallILb0ELb0EEEbPNS_9ArtMethodEPNS_6ThreadERNS_11ShadowFrameEPKNS_11InstructionEtPNS_6JValueE+0x29c,0xe54a8095 libart.so!MterpInvokeVirtual+0x400,0xe509ea18 libart.so!mterp_op_invoke_virtual+0x18,0xe5201e05 libart.so!_ZN3art11interpreterL7ExecuteEPNS_6ThreadERKNS_20CodeItemDataAccessorERNS_11ShadowFrameENS_6JValueEbb+0xc8
[JNIEnv] GetStringUTFChars 返回: 211215141717

[JNIEnv] 调用: GetStringUTFChars
  参数: ���
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: emulated;0
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /storage/emulated/0
调用栈:
0xa54145e0 libcrashsdk.so!0x435e0,0xa53d811c libcrashsdk.so!0x711c,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50acc50 libart.so!nterp_helper+0x7a0,0xe50ac560 libart.so!nterp_helper+0xb0,0xe50ac4ec libart.so!nterp_helper+0x3c,0xe50ac4ec libart.so!nterp_helper+0x3c,0xe50ac4ec libart.so!nterp_helper+0x3c,0xe50b13d7 libart.so!art_quick_invoke_stub_internal+0x46,0xe54c476f libart.so!art_quick_invoke_stub+0x11e,0xe51065a5 libart.so!_ZN3art9ArtMethod6InvokeEPNS_6ThreadEPjjPNS_6JValueEPKc+0x8c,0xe520ce2f libart.so!_ZN3art11interpreter34ArtInterpreterToCompiledCodeBridgeEPNS_6ThreadEPNS_9ArtMethodEPNS_11ShadowFrameEtPNS_6JValueE+0x116,0xe520837d libart.so!_ZN3art11interpreter6DoCallILb0ELb0EEEbPNS_9ArtMethodEPNS_6ThreadERNS_11ShadowFrameEPKNS_11InstructionEtPNS_6JValueE+0x29c,0xe54a8095 libart.so!MterpInvokeVirtual+0x400,0xe509ea18 libart.so!mterp_op_invoke_virtual+0x18,0xe5201e05 libart.so!_ZN3art11interpreterL7ExecuteEPNS_6ThreadERKNS_20CodeItemDataAccessorERNS_11ShadowFrameENS_6JValueEbb+0xc8
[JNIEnv] GetStringUTFChars 返回: M2012K11AC

[JNIEnv] 调用: GetStringUTFChars
  参数: ���
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /storage/emulated/0
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: 内部共享存储空间
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: mounted
调用栈:
0xa54145e0 libcrashsdk.so!0x435e0,0xa53d811c libcrashsdk.so!0x711c,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50acc50 libart.so!nterp_helper+0x7a0,0xe50ac560 libart.so!nterp_helper+0xb0,0xe50ac4ec libart.so!nterp_helper+0x3c,0xe50ac4ec libart.so!nterp_helper+0x3c,0xe50ac4ec libart.so!nterp_helper+0x3c,0xe50b13d7 libart.so!art_quick_invoke_stub_internal+0x46,0xe54c476f libart.so!art_quick_invoke_stub+0x11e,0xe51065a5 libart.so!_ZN3art9ArtMethod6InvokeEPNS_6ThreadEPjjPNS_6JValueEPKc+0x8c,0xe520ce2f libart.so!_ZN3art11interpreter34ArtInterpreterToCompiledCodeBridgeEPNS_6ThreadEPNS_9ArtMethodEPNS_11ShadowFrameEtPNS_6JValueE+0x116,0xe520837d libart.so!_ZN3art11interpreter6DoCallILb0ELb0EEEbPNS_9ArtMethodEPNS_6ThreadERNS_11ShadowFrameEPKNS_11InstructionEtPNS_6JValueE+0x29c,0xe54a8095 libart.so!MterpInvokeVirtual+0x400,0xe509ea18 libart.so!mterp_op_invoke_virtual+0x18,0xe5201e05 libart.so!_ZN3art11interpreterL7ExecuteEPNS_6ThreadERKNS_20CodeItemDataAccessorERNS_11ShadowFrameENS_6JValueEbb+0xc8
[JNIEnv] GetStringUTFChars 返回: 12

[JNIEnv] 调用: GetStringUTFChars
  参数: 8;L
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: GetStringUTFChars
  参数: ��-
调用栈:
0xda7a2b8d libopenjdk.so!Java_java_io_UnixFileSystem_canonicalize0+0x30,0x70e65bbf boot.oat!0xa7bbf
[JNIEnv] GetStringUTFChars 返回: /storage/emulated/0

[JNIEnv] 调用: NewStringUTF
  参数: /storage/emulated/0
调用栈:
0xa54145e0 libcrashsdk.so!0x435e0,0xa53d811c libcrashsdk.so!0x711c,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50acc50 libart.so!nterp_helper+0x7a0,0xe50ac560 libart.so!nterp_helper+0xb0,0xe50ac4ec libart.so!nterp_helper+0x3c,0xe50ac4ec libart.so!nterp_helper+0x3c,0xe50ac4ec libart.so!nterp_helper+0x3c,0xe50b13d7 libart.so!art_quick_invoke_stub_internal+0x46,0xe54c476f libart.so!art_quick_invoke_stub+0x11e,0xe51065a5 libart.so!_ZN3art9ArtMethod6InvokeEPNS_6ThreadEPjjPNS_6JValueEPKc+0x8c,0xe520ce2f libart.so!_ZN3art11interpreter34ArtInterpreterToCompiledCodeBridgeEPNS_6ThreadEPNS_9ArtMethodEPNS_11ShadowFrameEtPNS_6JValueE+0x116,0xe520837d libart.so!_ZN3art11interpreter6DoCallILb0ELb0EEEbPNS_9ArtMethodEPNS_6ThreadERNS_11ShadowFrameEPKNS_11InstructionEtPNS_6JValueE+0x29c,0xe54a8095 libart.so!MterpInvokeVirtual+0x400,0xe509ea18 libart.so!mterp_op_invoke_virtual+0x18,0xe5201e05 libart.so!_ZN3art11interpreterL7ExecuteEPNS_6ThreadERKNS_20CodeItemDataAccessorERNS_11ShadowFrameENS_6JValueEbb+0xc8
[JNIEnv] GetStringUTFChars 返回: 8fc9af06-73e2-48dd-987c-80feffa2d1f2

[JNIEnv] 调用: GetStringUTFChars
  参数: �s�
调用栈:
0xda7a2bb7 libopenjdk.so!Java_java_io_UnixFileSystem_canonicalize0+0x5a,0x70e65bbf boot.oat!0xa7bbf

[JNIEnv] 调用: GetStringUTFChars
  参数: ��-
调用栈:
0xa54145e0 libcrashsdk.so!0x435e0,0xa53d811c libcrashsdk.so!0x711c,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50acc50 libart.so!nterp_helper+0x7a0,0xe50ac560 libart.so!nterp_helper+0xb0,0xe50ac4ec libart.so!nterp_helper+0x3c,0xe50ac4ec libart.so!nterp_helper+0x3c,0xe50ac4ec libart.so!nterp_helper+0x3c,0xe50b13d7 libart.so!art_quick_invoke_stub_internal+0x46,0xe54c476f libart.so!art_quick_invoke_stub+0x11e,0xe51065a5 libart.so!_ZN3art9ArtMethod6InvokeEPNS_6ThreadEPjjPNS_6JValueEPKc+0x8c,0xe520ce2f libart.so!_ZN3art11interpreter34ArtInterpreterToCompiledCodeBridgeEPNS_6ThreadEPNS_9ArtMethodEPNS_11ShadowFrameEtPNS_6JValueE+0x116,0xe520837d libart.so!_ZN3art11interpreter6DoCallILb0ELb0EEEbPNS_9ArtMethodEPNS_6ThreadERNS_11ShadowFrameEPKNS_11InstructionEtPNS_6JValueE+0x29c,0xe54a8095 libart.so!MterpInvokeVirtual+0x400,0xe509ea18 libart.so!mterp_op_invoke_virtual+0x18,0xe5201e05 libart.so!_ZN3art11interpreterL7ExecuteEPNS_6ThreadERKNS_20CodeItemDataAccessorERNS_11ShadowFrameENS_6JValueEbb+0xc8
[JNIEnv] GetStringUTFChars 返回: 656436ae58a9eb5b0a11a63e

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x25
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: 656436ae58a9eb5b0a11a63e_1.0.0_e3432b7c_M2012K11AC_12_175360789024863936_

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x41
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: V13.0.7.0.SKHCNXM

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x25
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: 268435456

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x29
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: armeabi-v7a

[JNIEnv] 调用: GetStringUTFChars
  参数: (L
调用栈:
0xda7a2b8d libopenjdk.so!Java_java_io_UnixFileSystem_canonicalize0+0x30,0x70e65bbf boot.oat!0xa7bbf
[JNIEnv] GetStringUTFChars 返回: /storage/emulated/0

[JNIEnv] 调用: NewStringUTF
  参数: /storage/emulated/0
调用栈:
0xda7a2bb7 libopenjdk.so!Java_java_io_UnixFileSystem_canonicalize0+0x5a,0x70e65bbf boot.oat!0xa7bbf

[JNIEnv] 调用: NewStringUTF
  参数: emulated;0
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /storage/emulated/0
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /storage/emulated/0
调用栈:
0xa54145e0 libcrashsdk.so!0x435e0,0xa53d8428 libcrashsdk.so!0x7428,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50acc50 libart.so!nterp_helper+0x7a0,0xe50ac4ec libart.so!nterp_helper+0x3c,0xe50ac4ec libart.so!nterp_helper+0x3c,0xe50ac4ec libart.so!nterp_helper+0x3c,0xe50b13d7 libart.so!art_quick_invoke_stub_internal+0x46,0xe54c476f libart.so!art_quick_invoke_stub+0x11e,0xe51065a5 libart.so!_ZN3art9ArtMethod6InvokeEPNS_6ThreadEPjjPNS_6JValueEPKc+0x8c,0xe520ce2f libart.so!_ZN3art11interpreter34ArtInterpreterToCompiledCodeBridgeEPNS_6ThreadEPNS_9ArtMethodEPNS_11ShadowFrameEtPNS_6JValueE+0x116,0xe520837d libart.so!_ZN3art11interpreter6DoCallILb0ELb0EEEbPNS_9ArtMethodEPNS_6ThreadERNS_11ShadowFrameEPKNS_11InstructionEtPNS_6JValueE+0x29c,0xe54a8095 libart.so!MterpInvokeVirtual+0x400,0xe509ea18 libart.so!mterp_op_invoke_virtual+0x18,0xe5201e05 libart.so!_ZN3art11interpreterL7ExecuteEPNS_6ThreadERKNS_20CodeItemDataAccessorERNS_11ShadowFrameENS_6JValueEbb+0xc8,0xe5207aa9 libart.so!_ZN3art11interpreter30EnterInterpreterFromEntryPointEPNS_6ThreadERKNS_20CodeItemDataAccessorEPNS_11ShadowFrameE+0x8c
[JNIEnv] GetStringUTFChars 返回: .gz

[JNIEnv] 调用: GetStringUTFChars
  参数: ���
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: 内部共享存储空间
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: mounted
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: GetStringUTFChars
  参数: �-h_�p
调用栈:
0xa54145e0 libcrashsdk.so!0x435e0,0xa53d811c libcrashsdk.so!0x711c,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50acc50 libart.so!nterp_helper+0x7a0,0xe50ac560 libart.so!nterp_helper+0xb0,0xe50ac4ec libart.so!nterp_helper+0x3c,0xe50ac4ec libart.so!nterp_helper+0x3c,0xe50ac4ec libart.so!nterp_helper+0x3c,0xe50b13d7 libart.so!art_quick_invoke_stub_internal+0x46,0xe54c476f libart.so!art_quick_invoke_stub+0x11e,0xe51065a5 libart.so!_ZN3art9ArtMethod6InvokeEPNS_6ThreadEPjjPNS_6JValueEPKc+0x8c,0xe520ce2f libart.so!_ZN3art11interpreter34ArtInterpreterToCompiledCodeBridgeEPNS_6ThreadEPNS_9ArtMethodEPNS_11ShadowFrameEtPNS_6JValueE+0x116,0xe520837d libart.so!_ZN3art11interpreter6DoCallILb0ELb0EEEbPNS_9ArtMethodEPNS_6ThreadERNS_11ShadowFrameEPKNS_11InstructionEtPNS_6JValueE+0x29c,0xe54a8095 libart.so!MterpInvokeVirtual+0x400,0xe509ea18 libart.so!mterp_op_invoke_virtual+0x18,0xe5201e05 libart.so!_ZN3art11interpreterL7ExecuteEPNS_6ThreadERKNS_20CodeItemDataAccessorERNS_11ShadowFrameENS_6JValueEbb+0xc8
[JNIEnv] GetStringUTFChars 返回: Redmi/alioth/alioth:12/SKQ1.211006.001/V13.0.7.0.SKHCNXM:user/release-keys

[JNIEnv] 调用: GetStringUTFChars
  参数: h�

[JNIEnv] 调用: NewStringUTF
  参数: UnityMain
调用栈:
0xda7e65b7 libjavacore.so!0x1f5b7,0x7116694f boot-core-libart.oat!0x1094f
[JNIEnv] GetStringUTFChars 返回: /storage/emulated/0

[JNIEnv] 调用: GetStringUTFChars
  参数: .
调用栈:
0xda7a9105 libopenjdk.so!Mock_getProperty+0x2c,0x70e653e3 boot.oat!0xa73e3
[JNIEnv] GetStringUTFChars 返回: lsp.statfs.external.blockCountLong

[JNIEnv] 调用: NewStringUTF
  参数: 27864567
调用栈:
0xda7a9141 libopenjdk.so!Mock_getProperty+0x68,0x70e653e3 boot.oat!0xa73e3

[JNIEnv] 调用: GetStringUTFChars
  参数: �.
调用栈:
0xa54145e0 libcrashsdk.so!0x435e0,0xa53d811c libcrashsdk.so!0x711c,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50acc50 libart.so!nterp_helper+0x7a0,0xe50ac560 libart.so!nterp_helper+0xb0,0xe50ac4ec libart.so!nterp_helper+0x3c,0xe50ac4ec libart.so!nterp_helper+0x3c,0xe50b13d7 libart.so!art_quick_invoke_stub_internal+0x46,0xe54c476f libart.so!art_quick_invoke_stub+0x11e,0xe51065a5 libart.so!_ZN3art9ArtMethod6InvokeEPNS_6ThreadEPjjPNS_6JValueEPKc+0x8c,0xe520ce2f libart.so!_ZN3art11interpreter34ArtInterpreterToCompiledCodeBridgeEPNS_6ThreadEPNS_9ArtMethodEPNS_11ShadowFrameEtPNS_6JValueE+0x116,0xe520837d libart.so!_ZN3art11interpreter6DoCallILb0ELb0EEEbPNS_9ArtMethodEPNS_6ThreadERNS_11ShadowFrameEPKNS_11InstructionEtPNS_6JValueE+0x29c,0xe54a8095 libart.so!MterpInvokeVirtual+0x400,0xe509ea18 libart.so!mterp_op_invoke_virtual+0x18,0xe5201e05 libart.so!_ZN3art11interpreterL7ExecuteEPNS_6ThreadERKNS_20CodeItemDataAccessorERNS_11ShadowFrameENS_6JValueEbb+0xc8,0xe5207aa9 libart.so!_ZN3art11interpreter30EnterInterpreterFromEntryPointEPNS_6ThreadERKNS_20CodeItemDataAccessorEPNS_11ShadowFrameE+0x8c
[JNIEnv] GetStringUTFChars 返回: com.sytt.tzy

[JNIEnv] 调用: GetStringUTFChars
  参数: �,�
调用栈:
0xe5407303 libart.so!_ZN3art6Thread10CreatePeerEPKcbP8_jobject+0x4a,0xe5404f2b libart.so!_ZN3art6Thread6AttachEPKcbP8_jobjectb+0x16a,0xe53c7d4b libart.so!_ZN3art7Runtime19AttachCurrentThreadEPKcbP8_jobjectb+0x32,0xe52655e3 libart.so!_ZN3art3JII27AttachCurrentThreadInternalEP7_JavaVMPP7_JNIEnvPvb+0xea,0xa53f3264 libcrashsdk.so!0x22264,0xa53d78e8 libcrashsdk.so!0x68e8,0xe6387139 libc.so!_ZL15__pthread_startPv+0x2a,0xe633fd57 libc.so!__start_thread+0x20
调用栈:
0xda7a9105 libopenjdk.so!Mock_getProperty+0x2c,0x70e653e3 boot.oat!0xa73e3
[JNIEnv] GetStringUTFChars 返回: lsp.statfs.external.blockSizeLong

[JNIEnv] 调用: NewStringUTF
  参数: 4096
调用栈:
0xda7a9141 libopenjdk.so!Mock_getProperty+0x68,0x70e653e3 boot.oat!0xa73e3

[JNIEnv] 调用: GetStringUTFChars
  参数: h.
调用栈:
0xda7a9105 libopenjdk.so!Mock_getProperty+0x2c,0x70e653e3 boot.oat!0xa73e3
[JNIEnv] GetStringUTFChars 返回: lsp.statfs.external.freeBlocksLong

[JNIEnv] 调用: NewStringUTF
  参数: 13591666
调用栈:
0xa54145e0 libcrashsdk.so!0x435e0,0xa53d811c libcrashsdk.so!0x711c,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50acc50 libart.so!nterp_helper+0x7a0,0xe50ac560 libart.so!nterp_helper+0xb0,0xe50ac4ec libart.so!nterp_helper+0x3c,0xe50ac4ec libart.so!nterp_helper+0x3c,0xe50b13d7 libart.so!art_quick_invoke_stub_internal+0x46,0xe54c476f libart.so!art_quick_invoke_stub+0x11e,0xe51065a5 libart.so!_ZN3art9ArtMethod6InvokeEPNS_6ThreadEPjjPNS_6JValueEPKc+0x8c,0xe520ce2f libart.so!_ZN3art11interpreter34ArtInterpreterToCompiledCodeBridgeEPNS_6ThreadEPNS_9ArtMethodEPNS_11ShadowFrameEtPNS_6JValueE+0x116,0xe520837d libart.so!_ZN3art11interpreter6DoCallILb0ELb0EEEbPNS_9ArtMethodEPNS_6ThreadERNS_11ShadowFrameEPKNS_11InstructionEtPNS_6JValueE+0x29c,0xe54a8095 libart.so!MterpInvokeVirtual+0x400,0xe509ea18 libart.so!mterp_op_invoke_virtual+0x18,0xe5201e05 libart.so!_ZN3art11interpreterL7ExecuteEPNS_6ThreadERKNS_20CodeItemDataAccessorERNS_11ShadowFrameENS_6JValueEbb+0xc8,0xe5207aa9 libart.so!_ZN3art11interpreter30EnterInterpreterFromEntryPointEPNS_6ThreadERKNS_20CodeItemDataAccessorEPNS_11ShadowFrameE+0x8c
[JNIEnv] GetStringUTFChars 返回: 1.0.0

[JNIEnv] 调用: GetStringUTFChars
  参数: Lq
调用栈:
0xda7a9141 libopenjdk.so!Mock_getProperty+0x68,0x70e653e3 boot.oat!0xa73e3

[JNIEnv] 调用: GetStringUTFChars
  参数: �&.
调用栈:
0xda7a9105 libopenjdk.so!Mock_getProperty+0x2c,0x70e653e3 boot.oat!0xa73e3
[JNIEnv] GetStringUTFChars 返回: lsp.statfs.external.freeBlocksLong.origin

[JNIEnv] 调用: NewStringUTF
  参数: 13539353
调用栈:
0xda7a9141 libopenjdk.so!Mock_getProperty+0x68,0x70e653e3 boot.oat!0xa73e3

[JNIEnv] 调用: GetStringUTFChars
  参数: 3.
调用栈:
0xa54145e0 libcrashsdk.so!0x435e0,0xa53d853c libcrashsdk.so!0x753c,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50acc50 libart.so!nterp_helper+0x7a0,0xe50ac4ec libart.so!nterp_helper+0x3c,0xe50ac4ec libart.so!nterp_helper+0x3c,0xe50ac4ec libart.so!nterp_helper+0x3c,0xe50b13d7 libart.so!art_quick_invoke_stub_internal+0x46,0xe54c476f libart.so!art_quick_invoke_stub+0x11e,0xe51065a5 libart.so!_ZN3art9ArtMethod6InvokeEPNS_6ThreadEPjjPNS_6JValueEPKc+0x8c,0xe520ce2f libart.so!_ZN3art11interpreter34ArtInterpreterToCompiledCodeBridgeEPNS_6ThreadEPNS_9ArtMethodEPNS_11ShadowFrameEtPNS_6JValueE+0x116,0xe520837d libart.so!_ZN3art11interpreter6DoCallILb0ELb0EEEbPNS_9ArtMethodEPNS_6ThreadERNS_11ShadowFrameEPKNS_11InstructionEtPNS_6JValueE+0x29c,0xe54a8095 libart.so!MterpInvokeVirtual+0x400,0xe509ea18 libart.so!mterp_op_invoke_virtual+0x18,0xe5201e05 libart.so!_ZN3art11interpreterL7ExecuteEPNS_6ThreadERKNS_20CodeItemDataAccessorERNS_11ShadowFrameENS_6JValueEbb+0xc8,0xe5207aa9 libart.so!_ZN3art11interpreter30EnterInterpreterFromEntryPointEPNS_6ThreadERKNS_20CodeItemDataAccessorEPNS_11ShadowFrameE+0x8c
[JNIEnv] GetStringUTFChars 返回: 2.0

[JNIEnv] 调用: GetStringUTFChars
  参数: x@�p
调用栈:
0xda7a9105 libopenjdk.so!Mock_getProperty+0x2c,0x70e653e3 boot.oat!0xa73e3
[JNIEnv] GetStringUTFChars 返回: lsp.statfs.external.availableBlocksLong.origin

[JNIEnv] 调用: NewStringUTF
  参数: 13396179
调用栈:
0xda7a9141 libopenjdk.so!Mock_getProperty+0x68,0x70e653e3 boot.oat!0xa73e3

[JNIEnv] 调用: GetStringUTFChars
  参数: X?.
调用栈:
0xa54145e0 libcrashsdk.so!0x435e0,0xa53d8594 libcrashsdk.so!0x7594,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50acc50 libart.so!nterp_helper+0x7a0,0xe50ac4ec libart.so!nterp_helper+0x3c,0xe50ac4ec libart.so!nterp_helper+0x3c,0xe50ac4ec libart.so!nterp_helper+0x3c,0xe50b13d7 libart.so!art_quick_invoke_stub_internal+0x46,0xe54c476f libart.so!art_quick_invoke_stub+0x11e,0xe51065a5 libart.so!_ZN3art9ArtMethod6InvokeEPNS_6ThreadEPjjPNS_6JValueEPKc+0x8c,0xe520ce2f libart.so!_ZN3art11interpreter34ArtInterpreterToCompiledCodeBridgeEPNS_6ThreadEPNS_9ArtMethodEPNS_11ShadowFrameEtPNS_6JValueE+0x116,0xe520837d libart.so!_ZN3art11interpreter6DoCallILb0ELb0EEEbPNS_9ArtMethodEPNS_6ThreadERNS_11ShadowFrameEPKNS_11InstructionEtPNS_6JValueE+0x29c,0xe54a8095 libart.so!MterpInvokeVirtual+0x400,0xe509ea18 libart.so!mterp_op_invoke_virtual+0x18,0xe5201e05 libart.so!_ZN3art11interpreterL7ExecuteEPNS_6ThreadERKNS_20CodeItemDataAccessorERNS_11ShadowFrameENS_6JValueEbb+0xc8,0xe5207aa9 libart.so!_ZN3art11interpreter30EnterInterpreterFromEntryPointEPNS_6ThreadERKNS_20CodeItemDataAccessorEPNS_11ShadowFrameE+0x8c
[JNIEnv] GetStringUTFChars 返回: 12

[JNIEnv] 调用: GetStringUTFChars
  参数: hX
调用栈:
0xda7a9105 libopenjdk.so!Mock_getProperty+0x2c,0x70e653e3 boot.oat!0xa73e3
[JNIEnv] GetStringUTFChars 返回: lsp.statfs.external.availableBlocksLong

[JNIEnv] 调用: NewStringUTF
  参数: 13558898
调用栈:
0xda7a9141 libopenjdk.so!Mock_getProperty+0x68,0x70e653e3 boot.oat!0xa73e3

[JNIEnv] 调用: NewStringUTF
  参数: 
调用栈:
0xa54145e0 libcrashsdk.so!0x435e0,0xa53d811c libcrashsdk.so!0x711c,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50acc50 libart.so!nterp_helper+0x7a0,0xe50ac560 libart.so!nterp_helper+0xb0,0xe50ac4ec libart.so!nterp_helper+0x3c,0xe50b13d7 libart.so!art_quick_invoke_stub_internal+0x46,0xe54c476f libart.so!art_quick_invoke_stub+0x11e,0xe51065a5 libart.so!_ZN3art9ArtMethod6InvokeEPNS_6ThreadEPjjPNS_6JValueEPKc+0x8c,0xe520ce2f libart.so!_ZN3art11interpreter34ArtInterpreterToCompiledCodeBridgeEPNS_6ThreadEPNS_9ArtMethodEPNS_11ShadowFrameEtPNS_6JValueE+0x116,0xe520837d libart.so!_ZN3art11interpreter6DoCallILb0ELb0EEEbPNS_9ArtMethodEPNS_6ThreadERNS_11ShadowFrameEPKNS_11InstructionEtPNS_6JValueE+0x29c,0xe54a8095 libart.so!MterpInvokeVirtual+0x400,0xe509ea18 libart.so!mterp_op_invoke_virtual+0x18,0xe5201e05 libart.so!_ZN3art11interpreterL7ExecuteEPNS_6ThreadERKNS_20CodeItemDataAccessorERNS_11ShadowFrameENS_6JValueEbb+0xc8,0xe5207aa9 libart.so!_ZN3art11interpreter30EnterInterpreterFromEntryPointEPNS_6ThreadERKNS_20CodeItemDataAccessorEPNS_11ShadowFrameE+0x8c,0xe5499c25 libart.so!artQuickToInterpreterBridge+0x2a4
[JNIEnv] GetStringUTFChars 返回: 1.0.0/release/e3432b7c

[JNIEnv] 调用: GetStringUTFChars
  参数: ����s�
调用栈:
0xe72e559b libandroid_runtime.so!0x12159b,0x71fbe10f boot-framework.oat!0x18a10f

[JNIEnv] 调用: GetStringUTFChars
  参数: h�4R��Ё���#����p�<�ph��9
调用栈:
0xa54145e0 libcrashsdk.so!0x435e0,0xa53d7d08 libcrashsdk.so!0x6d08,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50ac560 libart.so!nterp_helper+0xb0,0xe50ac4ec libart.so!nterp_helper+0x3c,0xe50acfa4 libart.so!nterp_helper+0xaf4,0xe50b13d7 libart.so!art_quick_invoke_stub_internal+0x46,0xe54c48a9 libart.so!art_quick_invoke_static_stub+0x120,0xe51065b7 libart.so!_ZN3art9ArtMethod6InvokeEPNS_6ThreadEPjjPNS_6JValueEPKc+0x9e,0xe53c17bd libart.so!_ZN3art12InvokeMethodILNS_11PointerSizeE4EEEP8_jobjectRKNS_33ScopedObjectAccessAlreadyRunnableES3_S3_S3_j+0x358,0xe53562c3 libart.so!_ZN3artL13Method_invokeEP7_JNIEnvP8_jobjectS3_P13_jobjectArray+0x22,0x70e69249 boot.oat!0xab249
[JNIEnv] GetStringUTFChars 返回: um_app_key

[JNIEnv] 调用: GetStringUTFChars
  参数: �s�
调用栈:
0xe72e5a59 libandroid_runtime.so!0x121a59,0x71fb97d9 boot-framework.oat!0x1857d9
[JNIEnv] GetStringUTFChars 返回: com.sytt.tzy

[JNIEnv] 调用: NewStringUTF
  参数: BMI120 Accelerometer
调用栈:
0xe72e5e17 libandroid_runtime.so!0x121e17,0xe72e5b11 libandroid_runtime.so!0x121b11,0x71fb9a5b boot-framework.oat!0x185a5b

[JNIEnv] 调用: NewStringUTF
  参数: BOSCH
调用栈:
0xa54145e0 libcrashsdk.so!0x435e0,0xa53d7d18 libcrashsdk.so!0x6d18,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50ac560 libart.so!nterp_helper+0xb0,0xe50ac4ec libart.so!nterp_helper+0x3c,0xe50acfa4 libart.so!nterp_helper+0xaf4,0xe50b13d7 libart.so!art_quick_invoke_stub_internal+0x46,0xe54c48a9 libart.so!art_quick_invoke_static_stub+0x120,0xe51065b7 libart.so!_ZN3art9ArtMethod6InvokeEPNS_6ThreadEPjjPNS_6JValueEPKc+0x9e,0xe53c17bd libart.so!_ZN3art12InvokeMethodILNS_11PointerSizeE4EEEP8_jobjectRKNS_33ScopedObjectAccessAlreadyRunnableES3_S3_S3_j+0x358,0xe53562c3 libart.so!_ZN3artL13Method_invokeEP7_JNIEnvP8_jobjectS3_P13_jobjectArray+0x22,0x70e69249 boot.oat!0xab249
[JNIEnv] GetStringUTFChars 返回: 656436ae58a9eb5b0a11a63e

[JNIEnv] 调用: GetStringUTFChars
  参数: `��t�
调用栈:
0xe72e5e51 libandroid_runtime.so!0x121e51,0xe72e5b11 libandroid_runtime.so!0x121b11,0x71fb9a5b boot-framework.oat!0x185a5b

[JNIEnv] 调用: NewStringUTF
  参数: BMI120 Accelerometer Uncalibrated
调用栈:
0xe72e5e17 libandroid_runtime.so!0x121e17,0xe72e5b11 libandroid_runtime.so!0x121b11,0x71fb9a5b boot-framework.oat!0x185a5b

[JNIEnv] 调用: NewStringUTF
  参数: BOSCH
调用栈:
0xe72e5e51 libandroid_runtime.so!0x121e51,0xe72e5b11 libandroid_runtime.so!0x121b11,0x71fb9a5b boot-framework.oat!0x185a5b

[JNIEnv] 调用: NewStringUTF
  参数: AK09918 Magnetometer
调用栈:
0xa54145e0 libcrashsdk.so!0x435e0,0xa53d7d08 libcrashsdk.so!0x6d08,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50ac560 libart.so!nterp_helper+0xb0,0xe50ac4ec libart.so!nterp_helper+0x3c,0xe50acfa4 libart.so!nterp_helper+0xaf4,0xe50b13d7 libart.so!art_quick_invoke_stub_internal+0x46,0xe54c48a9 libart.so!art_quick_invoke_static_stub+0x120,0xe51065b7 libart.so!_ZN3art9ArtMethod6InvokeEPNS_6ThreadEPjjPNS_6JValueEPKc+0x9e,0xe53c17bd libart.so!_ZN3art12InvokeMethodILNS_11PointerSizeE4EEEP8_jobjectRKNS_33ScopedObjectAccessAlreadyRunnableES3_S3_S3_j+0x358,0xe53562c3 libart.so!_ZN3artL13Method_invokeEP7_JNIEnvP8_jobjectS3_P13_jobjectArray+0x22,0x70e69249 boot.oat!0xab249
[JNIEnv] GetStringUTFChars 返回: um_app_channel

[JNIEnv] 调用: GetStringUTFChars
  参数: t�

[JNIEnv] 调用: GetStringUTFChars
  参数: �	P
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/crashsdk/tags/poli

[JNIEnv] 调用: NewStringUTF
  参数: access
调用栈:
0xe72e5e17 libandroid_runtime.so!0x121e17,0xe72e5b11 libandroid_runtime.so!0x121b11,0x71fb9a5b boot-framework.oat!0x185a5b

[JNIEnv] 调用: NewStringUTF
  参数: AKM
调用栈:
0xe72e5e51 libandroid_runtime.so!0x121e51,0xe72e5b11 libandroid_runtime.so!0x121b11,0x71fb9a5b boot-framework.oat!0x185a5b

[JNIEnv] 调用: NewStringUTF
  参数: AK09918 Magnetometer Uncalibrated
调用栈:
0xa54145e0 libcrashsdk.so!0x435e0,0xa53d7d18 libcrashsdk.so!0x6d18,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50ac560 libart.so!nterp_helper+0xb0,0xe50ac4ec libart.so!nterp_helper+0x3c,0xe50acfa4 libart.so!nterp_helper+0xaf4,0xe50b13d7 libart.so!art_quick_invoke_stub_internal+0x46,0xe54c48a9 libart.so!art_quick_invoke_static_stub+0x120,0xe51065b7 libart.so!_ZN3art9ArtMethod6InvokeEPNS_6ThreadEPjjPNS_6JValueEPKc+0x9e,0xe53c17bd libart.so!_ZN3art12InvokeMethodILNS_11PointerSizeE4EEEP8_jobjectRKNS_33ScopedObjectAccessAlreadyRunnableES3_S3_S3_j+0x358,0xe53562c3 libart.so!_ZN3artL13Method_invokeEP7_JNIEnvP8_jobjectS3_P13_jobjectArray+0x22,0x70e69249 boot.oat!0xab249
[JNIEnv] GetStringUTFChars 返回: Umeng

[JNIEnv] 调用: GetStringUTFChars
  参数: ���H\�p
调用栈:
0xda7de385 libjavacore.so!0x17385,0x7116659b boot-core-libart.oat!0x1059b
调用栈:
0xe72e5e17 libandroid_runtime.so!0x121e17,0xe72e5b11 libandroid_runtime.so!0x121b11,0x71fb9a5b boot-framework.oat!0x185a5b

[JNIEnv] 调用: NewStringUTF
  参数: AKM
调用栈:
0xe72e5e51 libandroid_runtime.so!0x121e51,0xe72e5b11 libandroid_runtime.so!0x121b11,0x71fb9a5b boot-framework.oat!0x185a5b

[JNIEnv] 调用: NewStringUTF
  参数: BMI120 Gyroscope
调用栈:
0xa54145e0 libcrashsdk.so!0x435e0,0xa53d7d08 libcrashsdk.so!0x6d08,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50ac560 libart.so!nterp_helper+0xb0,0xe50ac4ec libart.so!nterp_helper+0x3c,0xe50acfa4 libart.so!nterp_helper+0xaf4,0xe50b13d7 libart.so!art_quick_invoke_stub_internal+0x46,0xe54c48a9 libart.so!art_quick_invoke_static_stub+0x120,0xe51065b7 libart.so!_ZN3art9ArtMethod6InvokeEPNS_6ThreadEPjjPNS_6JValueEPKc+0x9e,0xe53c17bd libart.so!_ZN3art12InvokeMethodILNS_11PointerSizeE4EEEP8_jobjectRKNS_33ScopedObjectAccessAlreadyRunnableES3_S3_S3_j+0x358,0xe53562c3 libart.so!_ZN3artL13Method_invokeEP7_JNIEnvP8_jobjectS3_P13_jobjectArray+0x22,0x70e69249 boot.oat!0xab249
[JNIEnv] GetStringUTFChars 返回: um_os

[JNIEnv] 调用: GetStringUTFChars
  参数: H\�p
调用栈:
0xe72e5e17 libandroid_runtime.so!0x121e17,0xe72e5b11 libandroid_runtime.so!0x121b11,0x71fb9a5b boot-framework.oat!0x185a5b

[JNIEnv] 调用: NewStringUTF
  参数: BOSCH
调用栈:
0xe72e5e51 libandroid_runtime.so!0x121e51,0xe72e5b11 libandroid_runtime.so!0x121b11,0x71fb9a5b boot-framework.oat!0x185a5b

[JNIEnv] 调用: NewStringUTF
  参数: BMI120 Gyroscope Uncalibrated
调用栈:
0xa54145e0 libcrashsdk.so!0x435e0,0xa53d7d18 libcrashsdk.so!0x6d18,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50ac560 libart.so!nterp_helper+0xb0,0xe50ac4ec libart.so!nterp_helper+0x3c,0xe50acfa4 libart.so!nterp_helper+0xaf4,0xe50b13d7 libart.so!art_quick_invoke_stub_internal+0x46,0xe54c48a9 libart.so!art_quick_invoke_static_stub+0x120,0xe51065b7 libart.so!_ZN3art9ArtMethod6InvokeEPNS_6ThreadEPjjPNS_6JValueEPKc+0x9e,0xe53c17bd libart.so!_ZN3art12InvokeMethodILNS_11PointerSizeE4EEEP8_jobjectRKNS_33ScopedObjectAccessAlreadyRunnableES3_S3_S3_j+0x358,0xe53562c3 libart.so!_ZN3artL13Method_invokeEP7_JNIEnvP8_jobjectS3_P13_jobjectArray+0x22,0x70e69249 boot.oat!0xab249
[JNIEnv] GetStringUTFChars 返回: android

[JNIEnv] 调用: GetStringUTFChars
  参数: ������
调用栈:
0xe72e5e17 libandroid_runtime.so!0x121e17,0xe72e5b11 libandroid_runtime.so!0x121b11,0x71fb9a5b boot-framework.oat!0x185a5b

[JNIEnv] 调用: NewStringUTF
  参数: BOSCH
调用栈:
0xe72e5e51 libandroid_runtime.so!0x121e51,0xe72e5b11 libandroid_runtime.so!0x121b11,0x71fb9a5b boot-framework.oat!0x185a5b

[JNIEnv] 调用: NewStringUTF
  参数: LTR579 ALSPS
调用栈:
0xe72e5e17 libandroid_runtime.so!0x121e17,0xe72e5b11 libandroid_runtime.so!0x121b11,0x71fb9a5b boot-framework.oat!0x185a5b

[JNIEnv] 调用: NewStringUTF
  参数: LiteOn
调用栈:
0xa54145e0 libcrashsdk.so!0x435e0,0xa53d7d08 libcrashsdk.so!0x6d08,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50ac560 libart.so!nterp_helper+0xb0,0xe50ac4ec libart.so!nterp_helper+0x3c,0xe50acfa4 libart.so!nterp_helper+0xaf4,0xe50b13d7 libart.so!art_quick_invoke_stub_internal+0x46,0xe54c48a9 libart.so!art_quick_invoke_static_stub+0x120,0xe51065b7 libart.so!_ZN3art9ArtMethod6InvokeEPNS_6ThreadEPjjPNS_6JValueEPKc+0x9e,0xe53c17bd libart.so!_ZN3art12InvokeMethodILNS_11PointerSizeE4EEEP8_jobjectRKNS_33ScopedObjectAccessAlreadyRunnableES3_S3_S3_j+0x358,0xe53562c3 libart.so!_ZN3artL13Method_invokeEP7_JNIEnvP8_jobjectS3_P13_jobjectArray+0x22,0x70e69249 boot.oat!0xab249
[JNIEnv] GetStringUTFChars 返回: um_crash_sdk_version

[JNIEnv] 调用: GetStringUTFChars
  参数: ���
调用栈:
0xe72e5e51 libandroid_runtime.so!0x121e51,0xe72e5b11 libandroid_runtime.so!0x121b11,0x71fb9a5b boot-framework.oat!0x185a5b

[JNIEnv] 调用: NewStringUTF
  参数: LTR579 ALSPS
调用栈:
0xe72e5e17 libandroid_runtime.so!0x121e17,0xe72e5b11 libandroid_runtime.so!0x121b11,0x71fb9a5b boot-framework.oat!0x185a5b

[JNIEnv] 调用: NewStringUTF
  参数: LiteOn
调用栈:
0xa54145e0 libcrashsdk.so!0x435e0,0xa53d7d18 libcrashsdk.so!0x6d18,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50ac560 libart.so!nterp_helper+0xb0,0xe50ac4ec libart.so!nterp_helper+0x3c,0xe50acfa4 libart.so!nterp_helper+0xaf4,0xe50b13d7 libart.so!art_quick_invoke_stub_internal+0x46,0xe54c48a9 libart.so!art_quick_invoke_static_stub+0x120,0xe51065b7 libart.so!_ZN3art9ArtMethod6InvokeEPNS_6ThreadEPjjPNS_6JValueEPKc+0x9e,0xe53c17bd libart.so!_ZN3art12InvokeMethodILNS_11PointerSizeE4EEEP8_jobjectRKNS_33ScopedObjectAccessAlreadyRunnableES3_S3_S3_j+0x358,0xe53562c3 libart.so!_ZN3artL13Method_invokeEP7_JNIEnvP8_jobjectS3_P13_jobjectArray+0x22,0x70e69249 boot.oat!0xab249
[JNIEnv] GetStringUTFChars 返回: 1.9.1

[JNIEnv] 调用: GetStringUTFChars
  参数: �L
调用栈:
0xe72e5e51 libandroid_runtime.so!0x121e51,0xe72e5b11 libandroid_runtime.so!0x121b11,0x71fb9a5b boot-framework.oat!0x185a5b

[JNIEnv] 调用: NewStringUTF
  参数: BMI120 Accelerometer -Wakeup Secondary
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.UMConfigure

[JNIEnv] 调用: GetStringUTFChars
  参数: H����
调用栈:
0xe72e5e17 libandroid_runtime.so!0x121e17,0xe72e5b11 libandroid_runtime.so!0x121b11,0x71fb9a5b boot-framework.oat!0x185a5b

[JNIEnv] 调用: NewStringUTF
  参数: BOSCH
调用栈:
0xa54145e0 libcrashsdk.so!0x435e0,0xa53d7d08 libcrashsdk.so!0x6d08,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50ac560 libart.so!nterp_helper+0xb0,0xe50ac4ec libart.so!nterp_helper+0x3c,0xe50acfa4 libart.so!nterp_helper+0xaf4,0xe50b13d7 libart.so!art_quick_invoke_stub_internal+0x46,0xe54c48a9 libart.so!art_quick_invoke_static_stub+0x120,0xe51065b7 libart.so!_ZN3art9ArtMethod6InvokeEPNS_6ThreadEPjjPNS_6JValueEPKc+0x9e,0xe53c17bd libart.so!_ZN3art12InvokeMethodILNS_11PointerSizeE4EEEP8_jobjectRKNS_33ScopedObjectAccessAlreadyRunnableES3_S3_S3_j+0x358,0xe53562c3 libart.so!_ZN3artL13Method_invokeEP7_JNIEnvP8_jobjectS3_P13_jobjectArray+0x22,0x70e69249 boot.oat!0xab249
[JNIEnv] GetStringUTFChars 返回: um_umid_header

[JNIEnv] 调用: GetStringUTFChars
  参数: ��
调用栈:
0xe72e5e51 libandroid_runtime.so!0x121e51,0xe72e5b11 libandroid_runtime.so!0x121b11,0x71fb9a5b boot-framework.oat!0x185a5b

[JNIEnv] 调用: NewStringUTF
  参数: BMI120 Accelerometer Uncalibrated -Wakeup Secondary
调用栈:
0xe72e5e17 libandroid_runtime.so!0x121e17,0xe72e5b11 libandroid_runtime.so!0x121b11,0x71fb9a5b boot-framework.oat!0x185a5b

[JNIEnv] 调用: NewStringUTF
  参数: BOSCH
调用栈:
0xa54145e0 libcrashsdk.so!0x435e0,0xa53d7d18 libcrashsdk.so!0x6d18,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50ac560 libart.so!nterp_helper+0xb0,0xe50ac4ec libart.so!nterp_helper+0x3c,0xe50acfa4 libart.so!nterp_helper+0xaf4,0xe50b13d7 libart.so!art_quick_invoke_stub_internal+0x46,0xe54c48a9 libart.so!art_quick_invoke_static_stub+0x120,0xe51065b7 libart.so!_ZN3art9ArtMethod6InvokeEPNS_6ThreadEPjjPNS_6JValueEPKc+0x9e,0xe53c17bd libart.so!_ZN3art12InvokeMethodILNS_11PointerSizeE4EEEP8_jobjectRKNS_33ScopedObjectAccessAlreadyRunnableES3_S3_S3_j+0x358,0xe53562c3 libart.so!_ZN3artL13Method_invokeEP7_JNIEnvP8_jobjectS3_P13_jobjectArray+0x22,0x70e69249 boot.oat!0xab249
[JNIEnv] GetStringUTFChars 返回: 23b77020f05756f5d86b8021bbc77fc9od

[JNIEnv] 调用: GetStringUTFChars
  参数: (�L
调用栈:
0xe72e5e51 libandroid_runtime.so!0x121e51,0xe72e5b11 libandroid_runtime.so!0x121b11,0x71fb9a5b boot-framework.oat!0x185a5b

[JNIEnv] 调用: NewStringUTF
  参数: AK09918 Magnetometer -Wakeup Secondary
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.utils.UMUtils

[JNIEnv] 调用: GetStringUTFChars
  参数: 0Q�
调用栈:
0xe72e5e17 libandroid_runtime.so!0x121e17,0xe72e5b11 libandroid_runtime.so!0x121b11,0x71fb9a5b boot-framework.oat!0x185a5b

[JNIEnv] 调用: NewStringUTF
  参数: AKM
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs

[JNIEnv] 调用: GetStringUTFChars
  参数: ��L
调用栈:
0xe72e5e51 libandroid_runtime.so!0x121e51,0xe72e5b11 libandroid_runtime.so!0x121b11,0x71fb9a5b boot-framework.oat!0x185a5b

[JNIEnv] 调用: NewStringUTF
  参数: AK09918 Magnetometer Uncalibrated -Wakeup Secondary
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/mobclick_agent_user_com.sytt.tzy.xml.bak

[JNIEnv] 调用: NewStringUTF
  参数: access
调用栈:
0xda7de385 libjavacore.so!0x17385,0x7116659b boot-core-libart.oat!0x1059b

[JNIEnv] 调用: GetStringUTFChars
  参数: ��L
调用栈:
0xe72e5e17 libandroid_runtime.so!0x121e17,0xe72e5b11 libandroid_runtime.so!0x121b11,0x71fb9a5b boot-framework.oat!0x185a5b

[JNIEnv] 调用: NewStringUTF
  参数: AKM
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/mobclick_agent_user_com.sytt.tzy.xml

[JNIEnv] 调用: NewStringUTF
  参数: access
调用栈:
0xe72e5e51 libandroid_runtime.so!0x121e51,0xe72e5b11 libandroid_runtime.so!0x121b11,0x71fb9a5b boot-framework.oat!0x185a5b

[JNIEnv] 调用: NewStringUTF
  参数: BMI120 Gyroscope -Wakeup Secondary
调用栈:
0xe72e5e17 libandroid_runtime.so!0x121e17,0xe72e5b11 libandroid_runtime.so!0x121b11,0x71fb9a5b boot-framework.oat!0x185a5b

[JNIEnv] 调用: NewStringUTF
  参数: BOSCH
调用栈:
0xda7de385 libjavacore.so!0x17385,0x7116659b boot-core-libart.oat!0x1059b

[JNIEnv] 调用: GetStringUTFChars
  参数: ��Lh_�p0Z�p(h�ph�Kq8h�ph�Kqh�Kq��ޤwu�pZ�p�5��5���Lh�Kq��ޤt�ޤ���q�Mtq�5���rp�L��L��ޤt�ޤ�K�p��L�5���L��qP��p�5���L��L@�L@�L��L�,r�xq
调用栈:
0xe72e5e51 libandroid_runtime.so!0x121e51,0xe72e5b11 libandroid_runtime.so!0x121b11,0x71fb9a5b boot-framework.oat!0x185a5b

[JNIEnv] 调用: NewStringUTF
  参数: BMI120 Gyroscope Uncalibrated -Wakeup Secondary
调用栈:
0xda7e8c87 libjavacore.so!0x21c87,0x7116694f boot-core-libart.oat!0x1094f
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/mobclick_agent_user_com.sytt.tzy.xml

[JNIEnv] 调用: NewStringUTF
  参数: stat
调用栈:
0xe72e5e17 libandroid_runtime.so!0x121e17,0xe72e5b11 libandroid_runtime.so!0x121b11,0x71fb9a5b boot-framework.oat!0x185a5b

[JNIEnv] 调用: NewStringUTF
  参数: BOSCH
调用栈:
0xda7e8d4f libjavacore.so!0x21d4f,0x7116694f boot-core-libart.oat!0x1094f

[JNIEnv] 调用: GetStringUTFChars
  参数: ��
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: android.content.Context

[JNIEnv] 调用: GetStringUTFChars
  参数: pOWq
调用栈:
0xe72e5e51 libandroid_runtime.so!0x121e51,0xe72e5b11 libandroid_runtime.so!0x121b11,0x71fb9a5b boot-framework.oat!0x185a5b

[JNIEnv] 调用: NewStringUTF
  参数: LTR579 ALSPS -Non Wakeup Secondary
调用栈:
0xe72e5e17 libandroid_runtime.so!0x121e17,0xe72e5b11 libandroid_runtime.so!0x121b11,0x71fb9a5b boot-framework.oat!0x185a5b

[JNIEnv] 调用: NewStringUTF
  参数: LiteOn
调用栈:
0xda7a9105 libopenjdk.so!Mock_getProperty+0x2c,0x70e653e3 boot.oat!0xa73e3
[JNIEnv] GetStringUTFChars 返回: persist.radio.default.data

[JNIEnv] 调用: NewStringUTF
  参数: 0
调用栈:
0xe72e5e51 libandroid_runtime.so!0x121e51,0xe72e5b11 libandroid_runtime.so!0x121b11,0x71fb9a5b boot-framework.oat!0x185a5b

[JNIEnv] 调用: NewStringUTF
  参数: LTR579 ALSPS -Wakeup Secondary
调用栈:
0xe72e5e17 libandroid_runtime.so!0x121e17,0xe72e5b11 libandroid_runtime.so!0x121b11,0x71fb9a5b boot-framework.oat!0x185a5b

[JNIEnv] 调用: NewStringUTF
  参数: LiteOn
调用栈:
0xda7a9141 libopenjdk.so!Mock_getProperty+0x68,0x70e653e3 boot.oat!0xa73e3

[JNIEnv] 调用: GetStringUTFChars
  参数: xWq���p
调用栈:
0xe72e5e51 libandroid_runtime.so!0x121e51,0xe72e5b11 libandroid_runtime.so!0x121b11,0x71fb9a5b boot-framework.oat!0x185a5b

[JNIEnv] 调用: NewStringUTF
  参数: Gravity
调用栈:
0xe723de83 libandroid_runtime.so!0x79e83,0x71fcdccb boot-framework.oat!0x199ccb
[JNIEnv] GetStringUTFChars 返回: gsm.operator.alpha

[JNIEnv] 调用: NewStringUTF
  参数: 中国联通,中国联通
调用栈:
0xe72e5e17 libandroid_runtime.so!0x121e17,0xe72e5b11 libandroid_runtime.so!0x121b11,0x71fb9a5b boot-framework.oat!0x185a5b

[JNIEnv] 调用: NewStringUTF
  参数: QTI
调用栈:
0xe723e443 libandroid_runtime.so!0x7a443,0xe633e5b5 libc.so!_ZN16SystemProperties12ReadCallbackEPK9prop_infoPFvPvPKcS5_jES3_+0xa8,0xe723de97 libandroid_runtime.so!0x79e97,0x71fcdccb boot-framework.oat!0x199ccb

[JNIEnv] 调用: GetStringUTFChars
  参数: @��ȚL�q4rIýLiU����
调用栈:
0xe72e5e51 libandroid_runtime.so!0x121e51,0xe72e5b11 libandroid_runtime.so!0x121b11,0x71fb9a5b boot-framework.oat!0x185a5b

[JNIEnv] 调用: NewStringUTF
  参数: Linear Acceleration

[JNIEnv] 调用: GetStringUTFChars
  参数: 8U�r
调用栈:
0xa54145e0 libcrashsdk.so!0x435e0,0xa53d7d08 libcrashsdk.so!0x6d08,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50ac560 libart.so!nterp_helper+0xb0,0xe50ac4ec libart.so!nterp_helper+0x3c,0xe50acfa4 libart.so!nterp_helper+0xaf4,0xe50b13d7 libart.so!art_quick_invoke_stub_internal+0x46,0xe54c48a9 libart.so!art_quick_invoke_static_stub+0x120,0xe51065b7 libart.so!_ZN3art9ArtMethod6InvokeEPNS_6ThreadEPjjPNS_6JValueEPKc+0x9e,0xe53c17bd libart.so!_ZN3art12InvokeMethodILNS_11PointerSizeE4EEEP8_jobjectRKNS_33ScopedObjectAccessAlreadyRunnableES3_S3_S3_j+0x358,0xe53562c3 libart.so!_ZN3artL13Method_invokeEP7_JNIEnvP8_jobjectS3_P13_jobjectArray+0x22,0x70e69249 boot.oat!0xab249
[JNIEnv] GetStringUTFChars 返回: um_app_carrier

[JNIEnv] 调用: GetStringUTFChars
  参数: ȚL�q4rIýLiU����
调用栈:
0xe72e5e17 libandroid_runtime.so!0x121e17,0xe72e5b11 libandroid_runtime.so!0x121b11,0x71fb9a5b boot-framework.oat!0x185a5b

[JNIEnv] 调用: NewStringUTF
  参数: QTI
调用栈:
0xe72e5e51 libandroid_runtime.so!0x121e51,0xe72e5b11 libandroid_runtime.so!0x121b11,0x71fb9a5b boot-framework.oat!0x185a5b

[JNIEnv] 调用: NewStringUTF
  参数: Rotation Vector
调用栈:
0xdc22e867 libicu_jni.so!0x8867,0x72677869 boot-core-icu4j.oat!0x2e869
[JNIEnv] GetStringUTFChars 返回: UTF-8
调用栈:
0xe72e5e17 libandroid_runtime.so!0x121e17,0xe72e5b11 libandroid_runtime.so!0x121b11,0x71fb9a5b boot-framework.oat!0x185a5b

[JNIEnv] 调用: NewStringUTF
  参数: QTI
调用栈:
0xa54145e0 libcrashsdk.so!0x435e0,0xa53d7d18 libcrashsdk.so!0x6d18,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50ac560 libart.so!nterp_helper+0xb0,0xe50ac4ec libart.so!nterp_helper+0x3c,0xe50acfa4 libart.so!nterp_helper+0xaf4,0xe50b13d7 libart.so!art_quick_invoke_stub_internal+0x46,0xe54c48a9 libart.so!art_quick_invoke_static_stub+0x120,0xe51065b7 libart.so!_ZN3art9ArtMethod6InvokeEPNS_6ThreadEPjjPNS_6JValueEPKc+0x9e,0xe53c17bd libart.so!_ZN3art12InvokeMethodILNS_11PointerSizeE4EEEP8_jobjectRKNS_33ScopedObjectAccessAlreadyRunnableES3_S3_S3_j+0x358,0xe53562c3 libart.so!_ZN3artL13Method_invokeEP7_JNIEnvP8_jobjectS3_P13_jobjectArray+0x22,0x70e69249 boot.oat!0xab249
[JNIEnv] GetStringUTFChars 返回: 中国联通

[JNIEnv] 调用: GetStringUTFChars
  参数: ��
调用栈:
0xe72e5e51 libandroid_runtime.so!0x121e51,0xe72e5b11 libandroid_runtime.so!0x121b11,0x71fb9a5b boot-framework.oat!0x185a5b

[JNIEnv] 调用: NewStringUTF
  参数: Step Detector
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: android.content.Context

[JNIEnv] 调用: GetStringUTFChars
  参数: @�Vq
调用栈:
0xe72e5e17 libandroid_runtime.so!0x121e17,0xe72e5b11 libandroid_runtime.so!0x121b11,0x71fb9a5b boot-framework.oat!0x185a5b

[JNIEnv] 调用: NewStringUTF
  参数: QTI
调用栈:
0xe723e147 libandroid_runtime.so!0x7a147,0x71fcdc41 boot-framework.oat!0x199c41
[JNIEnv] GetStringUTFChars 返回: cache_key.telephony.get_active_data_sub_id

[JNIEnv] 调用: GetStringUTFChars
  参数: �����L
调用栈:
0xe72e5e51 libandroid_runtime.so!0x121e51,0xe72e5b11 libandroid_runtime.so!0x121b11,0x71fb9a5b boot-framework.oat!0x185a5b

[JNIEnv] 调用: NewStringUTF
  参数: android.permission.ACTIVITY_RECOGNITION
调用栈:
0xa54145e0 libcrashsdk.so!0x435e0,0xa53d7d08 libcrashsdk.so!0x6d08,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50ac560 libart.so!nterp_helper+0xb0,0xe50ac4ec libart.so!nterp_helper+0x3c,0xe50acfa4 libart.so!nterp_helper+0xaf4,0xe50b13d7 libart.so!art_quick_invoke_stub_internal+0x46,0xe54c48a9 libart.so!art_quick_invoke_static_stub+0x120,0xe51065b7 libart.so!_ZN3art9ArtMethod6InvokeEPNS_6ThreadEPjjPNS_6JValueEPKc+0x9e,0xe53c17bd libart.so!_ZN3art12InvokeMethodILNS_11PointerSizeE4EEEP8_jobjectRKNS_33ScopedObjectAccessAlreadyRunnableES3_S3_S3_j+0x358,0xe53562c3 libart.so!_ZN3artL13Method_invokeEP7_JNIEnvP8_jobjectS3_P13_jobjectArray+0x22,0x70e69249 boot.oat!0xab249
[JNIEnv] GetStringUTFChars 返回: um_network_type

[JNIEnv] 调用: GetStringUTFChars
  参数: ��L
调用栈:
0xe72e5e8d libandroid_runtime.so!0x121e8d,0xe72e5b11 libandroid_runtime.so!0x121b11,0x71fb9a5b boot-framework.oat!0x185a5b

[JNIEnv] 调用: NewStringUTF
  参数: Step Counter
调用栈:
0xa54145e0 libcrashsdk.so!0x435e0,0xa53d7d18 libcrashsdk.so!0x6d18,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50ac560 libart.so!nterp_helper+0xb0,0xe50ac4ec libart.so!nterp_helper+0x3c,0xe50acfa4 libart.so!nterp_helper+0xaf4,0xe50b13d7 libart.so!art_quick_invoke_stub_internal+0x46,0xe54c48a9 libart.so!art_quick_invoke_static_stub+0x120,0xe51065b7 libart.so!_ZN3art9ArtMethod6InvokeEPNS_6ThreadEPjjPNS_6JValueEPKc+0x9e,0xe53c17bd libart.so!_ZN3art12InvokeMethodILNS_11PointerSizeE4EEEP8_jobjectRKNS_33ScopedObjectAccessAlreadyRunnableES3_S3_S3_j+0x358,0xe53562c3 libart.so!_ZN3artL13Method_invokeEP7_JNIEnvP8_jobjectS3_P13_jobjectArray+0x22,0x70e69249 boot.oat!0xab249
[JNIEnv] GetStringUTFChars 返回: 0

[JNIEnv] 调用: GetStringUTFChars
  参数: �L��Oq

[JNIEnv] 调用: GetStringUTFChars
  参数: 
调用栈:
0xe72e5e17 libandroid_runtime.so!0x121e17,0xe72e5b11 libandroid_runtime.so!0x121b11,0x71fb9a5b boot-framework.oat!0x185a5b

[JNIEnv] 调用: NewStringUTF
  参数: QTI
调用栈:
0xe72e5e51 libandroid_runtime.so!0x121e51,0xe72e5b11 libandroid_runtime.so!0x121b11,0x71fb9a5b boot-framework.oat!0x185a5b

[JNIEnv] 调用: NewStringUTF
  参数: android.permission.ACTIVITY_RECOGNITION
调用栈:
0xa54145e0 libcrashsdk.so!0x435e0,0xa53d7d08 libcrashsdk.so!0x6d08,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50ac560 libart.so!nterp_helper+0xb0,0xe50ac4ec libart.so!nterp_helper+0x3c,0xe50acfa4 libart.so!nterp_helper+0xaf4,0xe50b13d7 libart.so!art_quick_invoke_stub_internal+0x46,0xe54c48a9 libart.so!art_quick_invoke_static_stub+0x120,0xe51065b7 libart.so!_ZN3art9ArtMethod6InvokeEPNS_6ThreadEPjjPNS_6JValueEPKc+0x9e,0xe53c17bd libart.so!_ZN3art12InvokeMethodILNS_11PointerSizeE4EEEP8_jobjectRKNS_33ScopedObjectAccessAlreadyRunnableES3_S3_S3_j+0x358,0xe53562c3 libart.so!_ZN3artL13Method_invokeEP7_JNIEnvP8_jobjectS3_P13_jobjectArray+0x22,0x70e69249 boot.oat!0xab249
[JNIEnv] GetStringUTFChars 返回: others_OS

[JNIEnv] 调用: GetStringUTFChars
  参数: ��Oq
调用栈:
0xe72b6cfd libandroid_runtime.so!0xf2cfd,0x71fbaac7 boot-framework.oat!0x186ac7
[JNIEnv] GetStringUTFChars 返回: config_os_brand

[JNIEnv] 调用: GetStringUTFChars
  参数: X?OqH\�pX��rXրr
调用栈:
0xe72b6d1f libandroid_runtime.so!0xf2d1f,0x71fbaac7 boot-framework.oat!0x186ac7
[JNIEnv] GetStringUTFChars 返回: string

[JNIEnv] 调用: GetStringUTFChars
  参数: H\�pX��rXրr
调用栈:
0xe72e5e8d libandroid_runtime.so!0x121e8d,0xe72e5b11 libandroid_runtime.so!0x121b11,0x71fb9a5b boot-framework.oat!0x185a5b

[JNIEnv] 调用: NewStringUTF
  参数: Significant Motion Detector
调用栈:
0xe72e5e17 libandroid_runtime.so!0x121e17,0xe72e5b11 libandroid_runtime.so!0x121b11,0x71fb9a5b boot-framework.oat!0x185a5b

[JNIEnv] 调用: NewStringUTF
  参数: QTI
调用栈:
0xe72b6d59 libandroid_runtime.so!0xf2d59,0x71fbaac7 boot-framework.oat!0x186ac7
[JNIEnv] GetStringUTFChars 返回: android
调用栈:
0xa54145e0 libcrashsdk.so!0x435e0,0xa53d7d18 libcrashsdk.so!0x6d18,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50ac560 libart.so!nterp_helper+0xb0,0xe50ac4ec libart.so!nterp_helper+0x3c,0xe50acfa4 libart.so!nterp_helper+0xaf4,0xe50b13d7 libart.so!art_quick_invoke_stub_internal+0x46,0xe54c48a9 libart.so!art_quick_invoke_static_stub+0x120,0xe51065b7 libart.so!_ZN3art9ArtMethod6InvokeEPNS_6ThreadEPjjPNS_6JValueEPKc+0x9e,0xe53c17bd libart.so!_ZN3art12InvokeMethodILNS_11PointerSizeE4EEEP8_jobjectRKNS_33ScopedObjectAccessAlreadyRunnableES3_S3_S3_j+0x358,0xe53562c3 libart.so!_ZN3artL13Method_invokeEP7_JNIEnvP8_jobjectS3_P13_jobjectArray+0x22,0x70e69249 boot.oat!0xab249
[JNIEnv] GetStringUTFChars 返回: Android

[JNIEnv] 调用: GetStringUTFChars
  参数: ������
调用栈:
0xe72e5e51 libandroid_runtime.so!0x121e51,0xe72e5b11 libandroid_runtime.so!0x121b11,0x71fb9a5b boot-framework.oat!0x185a5b

[JNIEnv] 调用: NewStringUTF
  参数: Game Rotation Vector
调用栈:
0xa54145e0 libcrashsdk.so!0x435e0,0xa53d7de8 libcrashsdk.so!0x6de8,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50acc50 libart.so!nterp_helper+0x7a0,0xe50acc98 libart.so!nterp_helper+0x7e8,0xe50acfa4 libart.so!nterp_helper+0xaf4,0xe50b13d7 libart.so!art_quick_invoke_stub_internal+0x46,0xe54c48a9 libart.so!art_quick_invoke_static_stub+0x120,0xe51065b7 libart.so!_ZN3art9ArtMethod6InvokeEPNS_6ThreadEPjjPNS_6JValueEPKc+0x9e,0xe53c17bd libart.so!_ZN3art12InvokeMethodILNS_11PointerSizeE4EEEP8_jobjectRKNS_33ScopedObjectAccessAlreadyRunnableES3_S3_S3_j+0x358,0xe53562c3 libart.so!_ZN3artL13Method_invokeEP7_JNIEnvP8_jobjectS3_P13_jobjectArray+0x22,0x70e69249 boot.oat!0xab249
[JNIEnv] GetStringUTFChars 返回: um_umid

[JNIEnv] 调用: GetStringUTFChars
  参数: ������
调用栈:
0xe72e5e17 libandroid_runtime.so!0x121e17,0xe72e5b11 libandroid_runtime.so!0x121b11,0x71fb9a5b boot-framework.oat!0x185a5b

[JNIEnv] 调用: NewStringUTF
  参数: QTI
调用栈:
0xa54145e0 libcrashsdk.so!0x435e0,0xa53d7de8 libcrashsdk.so!0x6de8,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50acc50 libart.so!nterp_helper+0x7a0,0xe50acc98 libart.so!nterp_helper+0x7e8,0xe50acfa4 libart.so!nterp_helper+0xaf4,0xe50b13d7 libart.so!art_quick_invoke_stub_internal+0x46,0xe54c48a9 libart.so!art_quick_invoke_static_stub+0x120,0xe51065b7 libart.so!_ZN3art9ArtMethod6InvokeEPNS_6ThreadEPjjPNS_6JValueEPKc+0x9e,0xe53c17bd libart.so!_ZN3art12InvokeMethodILNS_11PointerSizeE4EEEP8_jobjectRKNS_33ScopedObjectAccessAlreadyRunnableES3_S3_S3_j+0x358,0xe53562c3 libart.so!_ZN3artL13Method_invokeEP7_JNIEnvP8_jobjectS3_P13_jobjectArray+0x22,0x70e69249 boot.oat!0xab249
[JNIEnv] GetStringUTFChars 返回: um_action_log

[JNIEnv] 调用: GetStringUTFChars
  参数: ������
调用栈:
0xe72e5e51 libandroid_runtime.so!0x121e51,0xe72e5b11 libandroid_runtime.so!0x121b11,0x71fb9a5b boot-framework.oat!0x185a5b

[JNIEnv] 调用: NewStringUTF
  参数: GeoMagnetic Rotation Vector
调用栈:
0xe72e5e17 libandroid_runtime.so!0x121e17,0xe72e5b11 libandroid_runtime.so!0x121b11,0x71fb9a5b boot-framework.oat!0x185a5b

[JNIEnv] 调用: NewStringUTF
  参数: QTI
调用栈:
0xa54145e0 libcrashsdk.so!0x435e0,0xa53d7de8 libcrashsdk.so!0x6de8,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50acc50 libart.so!nterp_helper+0x7a0,0xe50acc98 libart.so!nterp_helper+0x7e8,0xe50acfa4 libart.so!nterp_helper+0xaf4,0xe50b13d7 libart.so!art_quick_invoke_stub_internal+0x46,0xe54c48a9 libart.so!art_quick_invoke_static_stub+0x120,0xe51065b7 libart.so!_ZN3art9ArtMethod6InvokeEPNS_6ThreadEPjjPNS_6JValueEPKc+0x9e,0xe53c17bd libart.so!_ZN3art12InvokeMethodILNS_11PointerSizeE4EEEP8_jobjectRKNS_33ScopedObjectAccessAlreadyRunnableES3_S3_S3_j+0x358,0xe53562c3 libart.so!_ZN3artL13Method_invokeEP7_JNIEnvP8_jobjectS3_P13_jobjectArray+0x22,0x70e69249 boot.oat!0xab249
[JNIEnv] GetStringUTFChars 返回: um_session_id

[JNIEnv] 调用: GetStringUTFChars
  参数: �L

[JNIEnv] 调用: GetStringUTFChars
  参数: ��
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.UMConfigure

[JNIEnv] 调用: GetStringUTFChars
  参数: ��
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: android.content.Context

[JNIEnv] 调用: GetStringUTFChars
  参数: ���@rOq
调用栈:
0xe72e5e51 libandroid_runtime.so!0x121e51,0xe72e5b11 libandroid_runtime.so!0x121b11,0x71fb9a5b boot-framework.oat!0x185a5b

[JNIEnv] 调用: NewStringUTF
  参数: Orientation
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: android.content.Context

[JNIEnv] 调用: GetStringUTFChars
  参数: pOWq
调用栈:
0xe72e5e17 libandroid_runtime.so!0x121e17,0xe72e5b11 libandroid_runtime.so!0x121b11,0x71fb9a5b boot-framework.oat!0x185a5b

[JNIEnv] 调用: NewStringUTF
  参数: QTI
调用栈:
0xa54145e0 libcrashsdk.so!0x435e0,0xa53d7d08 libcrashsdk.so!0x6d08,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50ac560 libart.so!nterp_helper+0xb0,0xe50ac4ec libart.so!nterp_helper+0x3c,0xe50acfa4 libart.so!nterp_helper+0xaf4,0x70fb14f9 boot.oat!0x1f34f9
[JNIEnv] GetStringUTFChars 返回: um_access

[JNIEnv] 调用: GetStringUTFChars
  参数: @rOq
调用栈:
0xa54145e0 libcrashsdk.so!0x435e0,0xa53d7d18 libcrashsdk.so!0x6d18,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50ac560 libart.so!nterp_helper+0xb0,0xe50ac4ec libart.so!nterp_helper+0x3c,0xe50acfa4 libart.so!nterp_helper+0xaf4,0x70fb14f9 boot.oat!0x1f34f9
[JNIEnv] GetStringUTFChars 返回: wifi
调用栈:
0xda7a9105 libopenjdk.so!Mock_getProperty+0x2c,0x70e653e3 boot.oat!0xa73e3
[JNIEnv] GetStringUTFChars 返回: persist.radio.default.data

[JNIEnv] 调用: NewStringUTF
  参数: 0
调用栈:
0xe72e5e51 libandroid_runtime.so!0x121e51,0xe72e5b11 libandroid_runtime.so!0x121b11,0x71fb9a5b boot-framework.oat!0x185a5b

[JNIEnv] 调用: NewStringUTF
  参数: Tilt Detector
调用栈:
0xe72e5e17 libandroid_runtime.so!0x121e17,0xe72e5b11 libandroid_runtime.so!0x121b11,0x71fb9a5b boot-framework.oat!0x185a5b

[JNIEnv] 调用: NewStringUTF
  参数: QTI
调用栈:
0xda7a9141 libopenjdk.so!Mock_getProperty+0x68,0x70e653e3 boot.oat!0xa73e3

[JNIEnv] 调用: GetStringUTFChars
  参数: xWq���p
调用栈:
0xe723de83 libandroid_runtime.so!0x79e83,0x71fcdccb boot-framework.oat!0x199ccb
[JNIEnv] GetStringUTFChars 返回: gsm.operator.alpha

[JNIEnv] 调用: NewStringUTF
  参数: 中国联通,中国联通
调用栈:
0xe72e5e51 libandroid_runtime.so!0x121e51,0xe72e5b11 libandroid_runtime.so!0x121b11,0x71fb9a5b boot-framework.oat!0x185a5b

[JNIEnv] 调用: NewStringUTF
  参数: Gravity -Wakeup Secondary
调用栈:
0xe723e443 libandroid_runtime.so!0x7a443,0xe633e5b5 libc.so!_ZN16SystemProperties12ReadCallbackEPK9prop_infoPFvPvPKcS5_jES3_+0xa8,0xe723de97 libandroid_runtime.so!0x79e97,0x71fcdccb boot-framework.oat!0x199ccb

[JNIEnv] 调用: GetStringUTFChars
  参数: (�L
调用栈:
0xe72e5e17 libandroid_runtime.so!0x121e17,0xe72e5b11 libandroid_runtime.so!0x121b11,0x71fb9a5b boot-framework.oat!0x185a5b

[JNIEnv] 调用: NewStringUTF
  参数: QTI
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.utils.UMUtils

[JNIEnv] 调用: GetStringUTFChars
  参数: 

[JNIEnv] 调用: GetStringUTFChars
  参数: �h

[JNIEnv] 调用: GetStringUTFChars
  参数: h��

[JNIEnv] 调用: GetStringUTFChars
  参数: @�L

[JNIEnv] 调用: GetStringUTFChars
  参数: 
调用栈:
0xe72e5e51 libandroid_runtime.so!0x121e51,0xe72e5b11 libandroid_runtime.so!0x121b11,0x71fb9a5b boot-framework.oat!0x185a5b

[JNIEnv] 调用: NewStringUTF
  参数: Linear Acceleration -Wakeup Secondary
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/itconfig.sp.bak

[JNIEnv] 调用: GetStringUTFChars
  参数: h��A
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/paconfig.sp

[JNIEnv] 调用: GetStringUTFChars
  参数: 
调用栈:
0xe723df49 libandroid_runtime.so!0x79f49,0x71fc0ddd boot-framework.oat!0x18cddd
[JNIEnv] GetStringUTFChars 返回: log.looper.10150.efs-base.slow

[JNIEnv] 调用: GetStringUTFChars
  参数: �h
调用栈:
0xda7e2b8f libjavacore.so!0x1bb8f,0x71166d05 boot-core-libart.oat!0x10d05
[JNIEnv] GetStringUTFChars 返回: /proc/5547/cmdline

[JNIEnv] 调用: GetStringUTFChars
  参数: 8U�r8h�p�5�C0�	g8
调用栈:
0xe72b6cfd libandroid_runtime.so!0xf2cfd,0x71fbaac7 boot-framework.oat!0x186ac7
[JNIEnv] GetStringUTFChars 返回: config_os_brand

[JNIEnv] 调用: GetStringUTFChars
  参数: X?OqH\�pX��rXրr
调用栈:
0xe72e5e17 libandroid_runtime.so!0x121e17,0xe72e5b11 libandroid_runtime.so!0x121b11,0x71fb9a5b boot-framework.oat!0x185a5b

[JNIEnv] 调用: NewStringUTF
  参数: QTI
调用栈:
0xdc22e867 libicu_jni.so!0x8867,0x72677869 boot-core-icu4j.oat!0x2e869
[JNIEnv] GetStringUTFChars 返回: UTF-8

[JNIEnv] 调用: GetStringUTFChars
  参数: 0Q�
调用栈:
0xe72b6d1f libandroid_runtime.so!0xf2d1f,0x71fbaac7 boot-framework.oat!0x186ac7
[JNIEnv] GetStringUTFChars 返回: string

[JNIEnv] 调用: GetStringUTFChars
  参数: H\�pX��rXրr
调用栈:
0xda7e2b8f libjavacore.so!0x1bb8f,0x71166d05 boot-core-libart.oat!0x10d05
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/itconfig.sp.bak
调用栈:
0xda7e8c87 libjavacore.so!0x21c87,0x7116694f boot-core-libart.oat!0x1094f
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/paconfig.sp

[JNIEnv] 调用: GetStringUTFChars
  参数: 
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: ballack

[JNIEnv] 调用: GetStringUTFChars
  参数: 
调用栈:
0xe72e5e51 libandroid_runtime.so!0x121e51,0xe72e5b11 libandroid_runtime.so!0x121b11,0x71fb9a5b boot-framework.oat!0x185a5b

[JNIEnv] 调用: NewStringUTF
  参数: Rotation Vector -Wakeup Secondary
调用栈:
0xe72b6d59 libandroid_runtime.so!0xf2d59,0x71fbaac7 boot-framework.oat!0x186ac7
[JNIEnv] GetStringUTFChars 返回: android
调用栈:
0xda7e2b8f libjavacore.so!0x1bb8f,0x71166d05 boot-core-libart.oat!0x10d05
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/paconfig.sp

[JNIEnv] 调用: GetStringUTFChars
  参数: �4

[JNIEnv] 调用: GetStringUTFChars
  参数: �4h!4����l���`�
�ļp�84p��x���
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: initGlobalInfo called once.

[JNIEnv] 调用: GetStringUTFChars
  参数: �	h
调用栈:
0xe72e5e17 libandroid_runtime.so!0x121e17,0xe72e5b11 libandroid_runtime.so!0x121b11,0x71fb9a5b boot-framework.oat!0x185a5b

[JNIEnv] 调用: NewStringUTF
  参数: QTI
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs

[JNIEnv] 调用: GetStringUTFChars
  参数: ���hM�jU�`jU�`�
�������M

[JNIEnv] 调用: GetStringUTFChars
  参数: hl
调用栈:
0xda7e2b8f libjavacore.so!0x1bb8f,0x71166d05 boot-core-libart.oat!0x10d05
[JNIEnv] GetStringUTFChars 返回: /proc/5547/cmdline

[JNIEnv] 调用: GetStringUTFChars
  参数: 8U�r8h�p�5�
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: WpkPaConfig

[JNIEnv] 调用: GetStringUTFChars
  参数: h!4����l���`�
�ļp�84p��x���
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: UMCrash

[JNIEnv] 调用: GetStringUTFChars
  参数: hM�jU�`jU�`�
�������M
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/paconfig.sp.bak
调用栈:
0xe72e5e51 libandroid_runtime.so!0x121e51,0xe72e5b11 libandroid_runtime.so!0x121b11,0x71fb9a5b boot-framework.oat!0x185a5b

[JNIEnv] 调用: NewStringUTF
  参数: Step Detector -Wakeup Secondary
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: inner config : net rate is 0

[JNIEnv] 调用: GetStringUTFChars
  参数: ����M�jU�`jU�`�
�������M
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: random not check in!

[JNIEnv] 调用: GetStringUTFChars
  参数: �34x34����ع��`�
��p�iH��24
调用栈:
0xe72e5e17 libandroid_runtime.so!0x121e17,0xe72e5b11 libandroid_runtime.so!0x121b11,0x71fb9a5b boot-framework.oat!0x185a5b

[JNIEnv] 调用: NewStringUTF
  参数: QTI
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/efs_launch.xml.bak

[JNIEnv] 调用: NewStringUTF
  参数: access
调用栈:
0xdc22e867 libicu_jni.so!0x8867,0x72677869 boot-core-icu4j.oat!0x2e869
[JNIEnv] GetStringUTFChars 返回: UTF-8

[JNIEnv] 调用: GetStringUTFChars
  参数: p�
调用栈:
0xe72e5e51 libandroid_runtime.so!0x121e51,0xe72e5b11 libandroid_runtime.so!0x121b11,0x71fb9a5b boot-framework.oat!0x185a5b

[JNIEnv] 调用: NewStringUTF
  参数: android.permission.ACTIVITY_RECOGNITION
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: UMCrash

[JNIEnv] 调用: GetStringUTFChars
  参数: �M�jU�`jU�`�
�������M
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: Matrix.AnrTracer

[JNIEnv] 调用: GetStringUTFChars
  参数: x34����ع��`�
��p�iH��24
调用栈:
0xe72e5e8d libandroid_runtime.so!0x121e8d,0xe72e5b11 libandroid_runtime.so!0x121b11,0x71fb9a5b boot-framework.oat!0x185a5b

[JNIEnv] 调用: NewStringUTF
  参数: Step Counter -Wakeup Secondary
调用栈:
0xda7de385 libjavacore.so!0x17385,0x7116659b boot-core-libart.oat!0x1059b

[JNIEnv] 调用: GetStringUTFChars
  参数: 
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy

[JNIEnv] 调用: GetStringUTFChars
  参数: p/h
调用栈:
0xe72e5e17 libandroid_runtime.so!0x121e17,0xe72e5b11 libandroid_runtime.so!0x121b11,0x71fb9a5b boot-framework.oat!0x185a5b

[JNIEnv] 调用: NewStringUTF
  参数: QTI
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: inner config : net close.

[JNIEnv] 调用: GetStringUTFChars
  参数: ����M�jU�`jU�`�
������M
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: anrTrace, final mAnrBeatTime:400, mAnrBeatRate:400

[JNIEnv] 调用: GetStringUTFChars
  参数: Ht
调用栈:
0xe72e5e51 libandroid_runtime.so!0x121e51,0xe72e5b11 libandroid_runtime.so!0x121b11,0x71fb9a5b boot-framework.oat!0x185a5b

[JNIEnv] 调用: NewStringUTF
  参数: android.permission.ACTIVITY_RECOGNITION
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/efs_launch.xml

[JNIEnv] 调用: GetStringUTFChars
  参数: 
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/app_UApm

[JNIEnv] 调用: GetStringUTFChars
  参数: p/h
调用栈:
0xe72e5e8d libandroid_runtime.so!0x121e8d,0xe72e5b11 libandroid_runtime.so!0x121b11,0x71fb9a5b boot-framework.oat!0x185a5b

[JNIEnv] 调用: NewStringUTF
  参数: Game Rotation Vector -Wakeup Secondary
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: UMCrash

[JNIEnv] 调用: GetStringUTFChars
  参数: �M�jU�`jU�`�
������M

[JNIEnv] 调用: GetStringUTFChars
  参数: �4
调用栈:
0xe723df49 libandroid_runtime.so!0x79f49,0x71fc0ddd boot-framework.oat!0x18cddd
[JNIEnv] GetStringUTFChars 返回: log.looper.10150.ANR HANDLER THREAD.slow
调用栈:
0xe72e5e17 libandroid_runtime.so!0x121e17,0xe72e5b11 libandroid_runtime.so!0x121b11,0x71fb9a5b boot-framework.oat!0x185a5b

[JNIEnv] 调用: NewStringUTF
  参数: QTI
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/efs_launch.xml

[JNIEnv] 调用: GetStringUTFChars
  参数: 
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/app_UApm

[JNIEnv] 调用: GetStringUTFChars
  参数: �/h
调用栈:
0xe72e5e51 libandroid_runtime.so!0x121e51,0xe72e5b11 libandroid_runtime.so!0x121b11,0x71fb9a5b boot-framework.oat!0x185a5b

[JNIEnv] 调用: NewStringUTF
  参数: GeoMagnetic Rotation Vector -Wakeup Secondary
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: inner config : nativeH5Rate is 0

[JNIEnv] 调用: GetStringUTFChars
  参数: ����M�jU�`jU�`�
������M
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/paconfig.sp.bak

[JNIEnv] 调用: GetStringUTFChars
  参数: �4A
调用栈:
0xe72e5e17 libandroid_runtime.so!0x121e17,0xe72e5b11 libandroid_runtime.so!0x121b11,0x71fb9a5b boot-framework.oat!0x185a5b

[JNIEnv] 调用: NewStringUTF
  参数: QTI
调用栈:
0xda7e8c87 libjavacore.so!0x21c87,0x7116694f boot-core-libart.oat!0x1094f
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/efs_launch.xml

[JNIEnv] 调用: GetStringUTFChars
  参数: 
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/app_UApm/efsid

[JNIEnv] 调用: GetStringUTFChars
  参数: �/h
调用栈:
0xda7e2b8f libjavacore.so!0x1bb8f,0x71166d05 boot-core-libart.oat!0x10d05
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/paconfig.sp.bak
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: UMCrash

[JNIEnv] 调用: GetStringUTFChars
  参数: �M�jU�`jU�`�
������M
调用栈:
0xe72e5e51 libandroid_runtime.so!0x121e51,0xe72e5b11 libandroid_runtime.so!0x121b11,0x71fb9a5b boot-framework.oat!0x185a5b

[JNIEnv] 调用: NewStringUTF
  参数: Orientation -Wakeup Secondary
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/app_UApm/efsid

[JNIEnv] 调用: GetStringUTFChars
  参数: �/h
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/efs_launch.xml

[JNIEnv] 调用: GetStringUTFChars
  参数: 
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: inner config : h5 close.

[JNIEnv] 调用: GetStringUTFChars
  参数: ����M�jU�`jU�`�
������ M
调用栈:
0xe72e5e17 libandroid_runtime.so!0x121e17,0xe72e5b11 libandroid_runtime.so!0x121b11,0x71fb9a5b boot-framework.oat!0x185a5b

[JNIEnv] 调用: NewStringUTF
  参数: QTI
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: UMCrash

[JNIEnv] 调用: GetStringUTFChars
  参数: �M�jU�`jU�`�
������ M
调用栈:
0xda7e2b8f libjavacore.so!0x1bb8f,0x71166d05 boot-core-libart.oat!0x10d05
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/app_UApm/efsid

[JNIEnv] 调用: NewStringUTF
  参数: com.sytt.tzy
调用栈:
0xda7e2b8f libjavacore.so!0x1bb8f,0x71166d05 boot-core-libart.oat!0x10d05
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/efs_launch.xml

[JNIEnv] 调用: GetStringUTFChars
  参数: 8U�r��b
调用栈:
0xdc22e867 libicu_jni.so!0x8867,0x72677869 boot-core-icu4j.oat!0x2e869
[JNIEnv] GetStringUTFChars 返回: UTF-8

[JNIEnv] 调用: GetStringUTFChars
  参数: �lh!4����\���`�
���p�(
l�6�
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: 1.0.0
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: inner config : page rate is -1

[JNIEnv] 调用: GetStringUTFChars
  参数: ����M�jU�`jU�`�
������M
调用栈:
0xe72e5e51 libandroid_runtime.so!0x121e51,0xe72e5b11 libandroid_runtime.so!0x121b11,0x71fb9a5b boot-framework.oat!0x185a5b

[JNIEnv] 调用: NewStringUTF
  参数: AMD
调用栈:
0xe72e5e17 libandroid_runtime.so!0x121e17,0xe72e5b11 libandroid_runtime.so!0x121b11,0x71fb9a5b boot-framework.oat!0x185a5b

[JNIEnv] 调用: NewStringUTF
  参数: QTI
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: LaunchConfigManager

[JNIEnv] 调用: GetStringUTFChars
  参数: h!4����\���`�
���p�(
l�6�
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: com.sytt.tzy
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: UMCrash

[JNIEnv] 调用: GetStringUTFChars
  参数: �M�jU�`jU�`�
������M
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: com.sytt.tzy
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: random not check in!

[JNIEnv] 调用: GetStringUTFChars
  参数: 
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: inner config : power rate is -1

[JNIEnv] 调用: GetStringUTFChars
  参数: ����M kU�kU�`�
�\(p�
调用栈:
0xe72e5e51 libandroid_runtime.so!0x121e51,0xe72e5b11 libandroid_runtime.so!0x121b11,0x71fb9a5b boot-framework.oat!0x185a5b

[JNIEnv] 调用: NewStringUTF
  参数: com.qti.sensor.amd
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/efs_launch.xml

[JNIEnv] 调用: GetStringUTFChars
  参数: hl
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: UMLog

[JNIEnv] 调用: GetStringUTFChars
  参数: �M kU�kU�`�
�\(p�
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: com.sytt.tzy
调用栈:
0xe72e6035 libandroid_runtime.so!0x122035,0xe72e5b11 libandroid_runtime.so!0x121b11,0x71fb9a5b boot-framework.oat!0x185a5b

[JNIEnv] 调用: NewStringUTF
  参数: RMD
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /data/app/~~hYKtoZqlctb0dKGf8OSOKQ==/com.sytt.tzy-YAzL_LiSSbrdnOTT58XTsA==
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/efs_launch.xml.bak

[JNIEnv] 调用: NewStringUTF
  参数: access
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: APM SDK初始化成功

[JNIEnv] 调用: GetStringUTFChars
  参数: �M
调用栈:
0xe72e5e17 libandroid_runtime.so!0x121e17,0xe72e5b11 libandroid_runtime.so!0x121b11,0x71fb9a5b boot-framework.oat!0x185a5b

[JNIEnv] 调用: NewStringUTF
  参数: QTI
调用栈:
0xda7de385 libjavacore.so!0x17385,0x7116659b boot-core-libart.oat!0x1059b

[JNIEnv] 调用: GetStringUTFChars
  参数: 
调用栈:
0xe72e5e51 libandroid_runtime.so!0x121e51,0xe72e5b11 libandroid_runtime.so!0x121b11,0x71fb9a5b boot-framework.oat!0x185a5b

[JNIEnv] 调用: NewStringUTF
  参数: com.qti.sensor.rmd
调用栈:
0xda7e4391 libjavacore.so!0x1d391,0x711668e9 boot-core-libart.oat!0x108e9
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/efs_launch.xml

[JNIEnv] 调用: GetStringUTFChars
  参数: hlh_�p8h�p(h�p
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /data/app/~~hYKtoZqlctb0dKGf8OSOKQ==/com.sytt.tzy-YAzL_LiSSbrdnOTT58XTsA==
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.vt.facade.EventFacade

[JNIEnv] 调用: GetStringUTFChars
  参数: M
调用栈:
0xda7e43ab libjavacore.so!0x1d3ab,0x711668e9 boot-core-libart.oat!0x108e9
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/efs_launch.xml.bak

[JNIEnv] 调用: GetStringUTFChars
  参数: 
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /data/app/~~hYKtoZqlctb0dKGf8OSOKQ==/com.sytt.tzy-YAzL_LiSSbrdnOTT58XTsA==/base.apk
调用栈:
0xda7e2b8f libjavacore.so!0x1bb8f,0x71166d05 boot-core-libart.oat!0x10d05
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/efs_launch.xml

[JNIEnv] 调用: GetStringUTFChars
  参数: 8U�r
调用栈:
0xe72e6035 libandroid_runtime.so!0x122035,0xe72e5b11 libandroid_runtime.so!0x121b11,0x71fb9a5b boot-framework.oat!0x185a5b

[JNIEnv] 调用: NewStringUTF
  参数: Basic Gestures
调用栈:
0xdc22e867 libicu_jni.so!0x8867,0x72677869 boot-core-icu4j.oat!0x2e869
[JNIEnv] GetStringUTFChars 返回: UTF-8
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.vt.common.VTTracker

[JNIEnv] 调用: GetStringUTFChars
  参数: ��

[JNIEnv] 调用: GetStringUTFChars
  参数: 
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /data/app/~~hYKtoZqlctb0dKGf8OSOKQ==/com.sytt.tzy-YAzL_LiSSbrdnOTT58XTsA==/base.apk
调用栈:
0xe72e5e17 libandroid_runtime.so!0x121e17,0xe72e5b11 libandroid_runtime.so!0x121b11,0x71fb9a5b boot-framework.oat!0x185a5b

[JNIEnv] 调用: NewStringUTF
  参数: QTI
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /data/app/~~hYKtoZqlctb0dKGf8OSOKQ==/com.sytt.tzy-YAzL_LiSSbrdnOTT58XTsA==/lib/arm
调用栈:
0xda7df40d libjavacore.so!0x1840d,0x711669bb boot-core-libart.oat!0x109bb
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/efs_launch.xml

[JNIEnv] 调用: GetStringUTFChars
  参数: 
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/files

[JNIEnv] 调用: GetStringUTFChars
  参数: pM
调用栈:
0xe72e5e51 libandroid_runtime.so!0x121e51,0xe72e5b11 libandroid_runtime.so!0x121b11,0x71fb9a5b boot-framework.oat!0x185a5b

[JNIEnv] 调用: NewStringUTF
  参数: com.qti.sensor.basic_gestures
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/files/umeng_policy_result_flag

[JNIEnv] 调用: GetStringUTFChars
  参数: ��
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /data/app/~~hYKtoZqlctb0dKGf8OSOKQ==/com.sytt.tzy-YAzL_LiSSbrdnOTT58XTsA==/lib
调用栈:
0xda7e8c87 libjavacore.so!0x21c87,0x7116694f boot-core-libart.oat!0x1094f
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/efs_launch.xml

[JNIEnv] 调用: GetStringUTFChars
  参数: hlh_�p0Z�p(h�ph�Kq8h�ph�Kqh�Kq
调用栈:
0xe72e6035 libandroid_runtime.so!0x122035,0xe72e5b11 libandroid_runtime.so!0x121b11,0x71fb9a5b boot-framework.oat!0x185a5b

[JNIEnv] 调用: NewStringUTF
  参数: Facing
调用栈:
0xda7e4143 libjavacore.so!0x1d143,0x71164e9f boot-core-libart.oat!0xee9f
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/efs_launch.xml.bak

[JNIEnv] 调用: GetStringUTFChars
  参数: 
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/files

[JNIEnv] 调用: GetStringUTFChars
  参数: xM

[JNIEnv] 调用: GetStringUTFChars
  参数: ��X
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: armeabi-v7a
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/crashsdk/tags/up

[JNIEnv] 调用: NewStringUTF
  参数: access
调用栈:
0xe72e5e17 libandroid_runtime.so!0x121e17,0xe72e5b11 libandroid_runtime.so!0x121b11,0x71fb9a5b boot-framework.oat!0x185a5b

[JNIEnv] 调用: NewStringUTF
  参数: QTI
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/efs_launch.xml

[JNIEnv] 调用: GetStringUTFChars
  参数: hl
调用栈:
0xda7de385 libjavacore.so!0x17385,0x7116659b boot-core-libart.oat!0x1059b

[JNIEnv] 调用: GetStringUTFChars
  参数: ��
调用栈:
0xe72e5e51 libandroid_runtime.so!0x121e51,0xe72e5b11 libandroid_runtime.so!0x121b11,0x71fb9a5b boot-framework.oat!0x185a5b

[JNIEnv] 调用: NewStringUTF
  参数: com.qti.sensor.facing
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/files/umeng_zcfg_flag

[JNIEnv] 调用: GetStringUTFChars
  参数: ���

[JNIEnv] 调用: GetStringUTFChars
  参数: PM

[JNIEnv] 调用: GetStringUTFChars
  参数: 0Q�

[JNIEnv] 调用: GetStringUTFChars
  参数: ��
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: crashsdk

[JNIEnv] 调用: GetStringUTFChars
  参数: 
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /data/resource-cache/com.android.systemui-neutral-Bkw5.frro
调用栈:
0xe72e6035 libandroid_runtime.so!0x122035,0xe72e5b11 libandroid_runtime.so!0x121b11,0x71fb9a5b boot-framework.oat!0x185a5b

[JNIEnv] 调用: NewStringUTF
  参数: Pedometer
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs

[JNIEnv] 调用: GetStringUTFChars
  参数: ;p
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/efs_launch.xml.bak

[JNIEnv] 调用: NewStringUTF
  参数: access
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /data/resource-cache/com.android.systemui-accent-Mq6z.frro
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.cconfig.UMRemoteConfig

[JNIEnv] 调用: GetStringUTFChars
  参数: ����M�hU�xhU�`�
�����}���hU������ǽ�hU�
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/umeng_sp_oaid.xml.bak

[JNIEnv] 调用: NewStringUTF
  参数: access
调用栈:
0xda7de385 libjavacore.so!0x17385,0x7116659b boot-core-libart.oat!0x1059b

[JNIEnv] 调用: GetStringUTFChars
  参数: 
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: default:targetSdkVersion=29
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: ucc

[JNIEnv] 调用: GetStringUTFChars
  参数: �M�hU�xhU�`�
�����}���hU������ǽ�hU�
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: crashsdk uploading logs

[JNIEnv] 调用: GetStringUTFChars
  参数: ��X
调用栈:
0xda7e4391 libjavacore.so!0x1d391,0x711668e9 boot-core-libart.oat!0x108e9
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/efs_launch.xml

[JNIEnv] 调用: GetStringUTFChars
  参数: hlh_�p8h�p(h�p
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: :complete
调用栈:
0xda7de385 libjavacore.so!0x17385,0x7116659b boot-core-libart.oat!0x1059b

[JNIEnv] 调用: GetStringUTFChars
  参数: �7p
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.UMInnerImpl

[JNIEnv] 调用: GetStringUTFChars
  参数: ��

[JNIEnv] 调用: GetStringUTFChars
  参数: 0Q�

[JNIEnv] 调用: GetStringUTFChars
  参数: ��
调用栈:
0xda7e43ab libjavacore.so!0x1d3ab,0x711668e9 boot-core-libart.oat!0x108e9
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/efs_launch.xml.bak

[JNIEnv] 调用: GetStringUTFChars
  参数: 
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /system/framework/android.test.base.jar
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/crashsdk/logs

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x11
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/crashsdk/logs
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs

[JNIEnv] 调用: GetStringUTFChars
  参数: 
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.android.id.impl.IdProviderImpl

[JNIEnv] 调用: GetStringUTFChars
  参数: �)�
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: please set RemoteConfigSettings using UMRemoteConfig.getInstance().setConfigSettings

[JNIEnv] 调用: GetStringUTFChars
  参数: �u�8MoU�
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /system/framework/android.test.base.jar
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.umzid.ZIDManager

[JNIEnv] 调用: GetStringUTFChars
  参数: ���
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: android.content.Context

[JNIEnv] 调用: GetStringUTFChars
  参数: (	�
调用栈:
0xe72e5e17 libandroid_runtime.so!0x121e17,0xe72e5b11 libandroid_runtime.so!0x121b11,0x71fb9a5b boot-framework.oat!0x185a5b

[JNIEnv] 调用: NewStringUTF
  参数: QTI
调用栈:
0xda7e2b8f libjavacore.so!0x1bb8f,0x71166d05 boot-core-libart.oat!0x10d05
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/efs_launch.xml

[JNIEnv] 调用: GetStringUTFChars
  参数: 8U�r
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: umlog

[JNIEnv] 调用: GetStringUTFChars
  参数: 8MoU�
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: android.test.base
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/UM_PROBE_DATA.xml.bak

[JNIEnv] 调用: NewStringUTF
  参数: access
调用栈:
0xe72e5e51 libandroid_runtime.so!0x121e51,0xe72e5b11 libandroid_runtime.so!0x121b11,0x71fb9a5b boot-framework.oat!0x185a5b

[JNIEnv] 调用: NewStringUTF
  参数: com.qti.sensor.pedometer
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/umeng_sp_oaid.xml

[JNIEnv] 调用: GetStringUTFChars
  参数: �7p
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: android
调用栈:
0xda7de385 libjavacore.so!0x17385,0x7116659b boot-core-libart.oat!0x1059b

[JNIEnv] 调用: GetStringUTFChars
  参数: ��
调用栈:
0xdc22e867 libicu_jni.so!0x8867,0x72677869 boot-core-icu4j.oat!0x2e869
[JNIEnv] GetStringUTFChars 返回: UTF-8

[JNIEnv] 调用: GetStringUTFChars
  参数: 
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: Init: getoaid
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.umzid.IZIDCompletionCallback

[JNIEnv] 调用: GetStringUTFChars
  参数: (�L
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/files/.envelope

[JNIEnv] 调用: GetStringUTFChars
  参数: (	�

[JNIEnv] 调用: NewStringUTF
  参数: null
调用栈:
0xda7a9105 libopenjdk.so!Mock_getProperty+0x2c,0x70e653e3 boot.oat!0xa73e3
[JNIEnv] GetStringUTFChars 返回: lsp.Identifier.OAID

[JNIEnv] 调用: NewStringUTF
  参数: 739f0aa330ad82f9
调用栈:
0xe72e6035 libandroid_runtime.so!0x122035,0xe72e5b11 libandroid_runtime.so!0x121b11,0x71fb9a5b boot-framework.oat!0x185a5b

[JNIEnv] 调用: NewStringUTF
  参数: Motion Accel
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /data/user/0/com.sytt.tzy
调用栈:
0xda7a9141 libopenjdk.so!Mock_getProperty+0x68,0x70e653e3 boot.oat!0xa73e3

[JNIEnv] 调用: GetStringUTFChars
  参数: �)�
调用栈:
0xda7df40d libjavacore.so!0x1840d,0x711669bb boot-core-libart.oat!0x109bb
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/efs_launch.xml

[JNIEnv] 调用: GetStringUTFChars
  参数: 
调用栈:
0xda7a2c27 libopenjdk.so!Java_java_io_UnixFileSystem_getBooleanAttributes0+0x22,0x70e65c27 boot.oat!0xa7c27
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/files/.envelope

[JNIEnv] 调用: GetStringUTFChars
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/files/.envelope
Error: access violation accessing 0x15
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)

[JNIEnv] 调用: GetStringUTFChars
  参数: (	�
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/UM_PROBE_DATA.xml

[JNIEnv] 调用: GetStringUTFChars
  参数: ��
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/umeng_sp_oaid.xml

[JNIEnv] 调用: GetStringUTFChars
  参数: �7ph_�p0Z�p(h�ph�Kq8h�ph�Kqh�Kq�_j�wu�pZ�p�5��5��7ph�Kq�_j�t_j����q�Mtq�5���rX7pP9p�_j�t_j��A�p�7p�5�P9p��qP��p�5�
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.utils.UMUtils

[JNIEnv] 调用: GetStringUTFChars
  参数: 0Q�
调用栈:
0xe72e5e17 libandroid_runtime.so!0x121e17,0xe72e5b11 libandroid_runtime.so!0x121b11,0x71fb9a5b boot-framework.oat!0x185a5b

[JNIEnv] 调用: NewStringUTF
  参数: QTI

[JNIEnv] 调用: NewStringUTF
  参数: null
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /data/user_de/0/com.sytt.tzy
调用栈:
0xe5407303 libart.so!_ZN3art6Thread10CreatePeerEPKcbP8_jobject+0x4a,0xe5404f2b libart.so!_ZN3art6Thread6AttachEPKcbP8_jobjectb+0x16a,0xe53c7d4b libart.so!_ZN3art7Runtime19AttachCurrentThreadEPKcbP8_jobjectb+0x32,0xe52655e3 libart.so!_ZN3art3JII27AttachCurrentThreadInternalEP7_JavaVMPP7_JNIEnvPvb+0xea,0xb6a40c15 libunity.so!0x42fc15,0xb6a3d0ad libunity.so!0x42c0ad,0xb6a3d081 libunity.so!0x42c081,0xb6a45a17 libunity.so!0x434a17,0xb6eb5ba5 libunity.so!0x8a4ba5,0xb6eb3893 libunity.so!0x8a2893,0xb6eb4dd1 libunity.so!0x8a3dd1,0xb6eb4acf libunity.so!0x8a3acf,0xb6eb4a9b libunity.so!0x8a3a9b,0xb693febd libunity.so!0x32eebd,0xb694007f libunity.so!0x32f07f,0xb6940149 libunity.so!0x32f149

[JNIEnv] 调用: NewStringUTF
  参数: UTF-8
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs

[JNIEnv] 调用: GetStringUTFChars
  参数: ���
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/files/.envelope

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x15
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/files/.envelope
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /data/user/0/com.sytt.tzy
调用栈:
0xda7a9105 libopenjdk.so!Mock_getProperty+0x2c,0x70e653e3 boot.oat!0xa73e3
[JNIEnv] GetStringUTFChars 返回: lsp.Identifier.OAID

[JNIEnv] 调用: NewStringUTF
  参数: 739f0aa330ad82f9
调用栈:
0xda7e8c87 libjavacore.so!0x21c87,0x7116694f boot-core-libart.oat!0x1094f
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/efs_launch.xml

[JNIEnv] 调用: GetStringUTFChars
  参数: hlh_�p0Z�p(h�ph�Kq8h�ph�Kqh�Kq
调用栈:
0xb72d04f3 libunity.so!0xcbf4f3
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/UM_PROBE_DATA.xml

[JNIEnv] 调用: GetStringUTFChars
  参数: ��h_�p0Z�p(h�ph�Kq8h�ph�Kqh�Kq��/�wu�pZ�p�5��5���h�Kq��/�t�/����q�Mtq�5���r��8���/�t�/��A�p���5�8���qP��p�5�(�8��������,r�xq
调用栈:
0xda7e8c87 libjavacore.so!0x21c87,0x7116694f boot-core-libart.oat!0x1094f
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/umeng_sp_oaid.xml

[JNIEnv] 调用: GetStringUTFChars
  参数: �7p
调用栈:
0xe72e5e51 libandroid_runtime.so!0x121e51,0xe72e5b11 libandroid_runtime.so!0x121b11,0x71fb9a5b boot-framework.oat!0x185a5b

[JNIEnv] 调用: NewStringUTF
  参数: com.qti.sensor.motion_accel
调用栈:
0xda7e4143 libjavacore.so!0x1d143,0x71164e9f boot-core-libart.oat!0xee9f
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/efs_launch.xml.bak

[JNIEnv] 调用: GetStringUTFChars
  参数: 

[JNIEnv] 调用: NewStringUTF
  参数: ProgressVersion
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/umzid_general_config.xml.bak

[JNIEnv] 调用: NewStringUTF
  参数: access
调用栈:
0xe72e6035 libandroid_runtime.so!0x122035,0xe72e5b11 libandroid_runtime.so!0x121b11,0x71fb9a5b boot-framework.oat!0x185a5b

[JNIEnv] 调用: NewStringUTF
  参数: Coarse Motion Classifier
调用栈:
0xda7a9141 libopenjdk.so!Mock_getProperty+0x68,0x70e653e3 boot.oat!0xa73e3

[JNIEnv] 调用: GetStringUTFChars
  参数: �)�
调用栈:
0xb72d04f3 libunity.so!0xcbf4f3

[JNIEnv] 调用: NewStringUTF
  参数: SourceVersion
调用栈:
0xda7de385 libjavacore.so!0x17385,0x7116659b boot-core-libart.oat!0x1059b

[JNIEnv] 调用: GetStringUTFChars
  参数: @��
调用栈:
0xda7e8c87 libjavacore.so!0x21c87,0x7116694f boot-core-libart.oat!0x1094f
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/UM_PROBE_DATA.xml

[JNIEnv] 调用: GetStringUTFChars
  参数: ��
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/umeng_sp_oaid.xml

[JNIEnv] 调用: GetStringUTFChars
  参数: �7p
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/efs_launch.xml

[JNIEnv] 调用: GetStringUTFChars
  参数: hl
调用栈:
0xb72d04f3 libunity.so!0xcbf4f3

[JNIEnv] 调用: GetStringUTFChars
  参数: 8U�r ���&��R��N8q9�����h@��/�XWA��r8U�r�3
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/umzid_general_config.xml

[JNIEnv] 调用: GetStringUTFChars
  参数: @��
调用栈:
0xda7a9105 libopenjdk.so!Mock_getProperty+0x2c,0x70e653e3 boot.oat!0xa73e3
[JNIEnv] GetStringUTFChars 返回: lsp.Identifier.OAID

[JNIEnv] 调用: NewStringUTF
  参数: 739f0aa330ad82f9
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: 10
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/umzid_general_config.xml

[JNIEnv] 调用: GetStringUTFChars
  参数: @��h_�p0Z�p(h�ph�Kq8h�ph�Kqh�Kq����wu�pZ�p�5��5�@��h�Kq����t������q�Mtq�5���r����������t����A�p@���5������qP��p�5�������������@���,r�xq
调用栈:
0xda7e2b8f libjavacore.so!0x1bb8f,0x71166d05 boot-core-libart.oat!0x10d05
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/umeng_sp_oaid.xml

[JNIEnv] 调用: GetStringUTFChars
  参数: 8U�rPci
调用栈:
0xdc22e867 libicu_jni.so!0x8867,0x72677869 boot-core-icu4j.oat!0x2e869
[JNIEnv] GetStringUTFChars 返回: UTF-8

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x2226
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: 1009
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: android.hardware.location.gps

[JNIEnv] 调用: NewStringUTF
  参数: null
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/UM_PROBE_DATA.xml

[JNIEnv] 调用: GetStringUTFChars
  参数: ��
调用栈:
0xda7a9141 libopenjdk.so!Mock_getProperty+0x68,0x70e653e3 boot.oat!0xa73e3

[JNIEnv] 调用: GetStringUTFChars
  参数: �u�X�8�$�`�
���p���p���"!��L��u�X����M���u�X����M��@������?
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/efs_launch.xml.bak

[JNIEnv] 调用: NewStringUTF
  参数: access
调用栈:
0xe5407303 libart.so!_ZN3art6Thread10CreatePeerEPKcbP8_jobject+0x4a,0xe5404f2b libart.so!_ZN3art6Thread6AttachEPKcbP8_jobjectb+0x16a,0xe53c7d4b libart.so!_ZN3art7Runtime19AttachCurrentThreadEPKcbP8_jobjectb+0x32,0xe52655e3 libart.so!_ZN3art3JII27AttachCurrentThreadInternalEP7_JavaVMPP7_JNIEnvPvb+0xea,0xb4f36e69 libNetHTProtect.so!0xf6e69,0xb4f36f15 libNetHTProtect.so!0xf6f15,0xb4f37075 libNetHTProtect.so!0xf7075,0xb4fcfe29 libNetHTProtect.so!0x18fe29,0xb4fe49fb libNetHTProtect.so!0x1a49fb,0xb4fe3af3 libNetHTProtect.so!0x1a3af3,0xb4fe3077 libNetHTProtect.so!0x1a3077,0xb4f90935 libNetHTProtect.so!0x150935,0xb4f90af3 libNetHTProtect.so!0x150af3,0xb4fb876b libNetHTProtect.so!0x17876b,0xb4fb79bf libNetHTProtect.so!0x1779bf,0xb4fb7827 libNetHTProtect.so!0x177827

[JNIEnv] 调用: NewStringUTF
  参数: com.netease.htprotect.poly.a
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: umlog

[JNIEnv] 调用: GetStringUTFChars
  参数: X�8�$�`�
���p���p���"!��L��u�X����M���u�X����M��@������?
调用栈:
0xe72e5e17 libandroid_runtime.so!0x121e17,0xe72e5b11 libandroid_runtime.so!0x121b11,0x71fb9a5b boot-framework.oat!0x185a5b

[JNIEnv] 调用: NewStringUTF
  参数: QTI
调用栈:
0xda7e8c87 libjavacore.so!0x21c87,0x7116694f boot-core-libart.oat!0x1094f
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/umzid_general_config.xml

[JNIEnv] 调用: GetStringUTFChars
  参数: @��
调用栈:
0xda7e2b8f libjavacore.so!0x1bb8f,0x71166d05 boot-core-libart.oat!0x10d05
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/UM_PROBE_DATA.xml

[JNIEnv] 调用: GetStringUTFChars
  参数: 8U�r�j
调用栈:
0xdc22e867 libicu_jni.so!0x8867,0x72677869 boot-core-icu4j.oat!0x2e869
[JNIEnv] GetStringUTFChars 返回: UTF-8

[JNIEnv] 调用: GetStringUTFChars
  参数: �7p
调用栈:
0xda7de385 libjavacore.so!0x17385,0x7116659b boot-core-libart.oat!0x1059b

[JNIEnv] 调用: GetStringUTFChars
  参数: 
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: android.hardware.location
调用栈:
0xb4f38341 libNetHTProtect.so!0xf8341,0xb4edce8f libNetHTProtect.so!0x9ce8f,0xb4edc187 libNetHTProtect.so!0x9c187,0xb4fd006b libNetHTProtect.so!0x19006b,0xb4fe49fb libNetHTProtect.so!0x1a49fb,0xb4fe3af3 libNetHTProtect.so!0x1a3af3,0xb4fe3077 libNetHTProtect.so!0x1a3077,0xb4f90935 libNetHTProtect.so!0x150935,0xb4f90af3 libNetHTProtect.so!0x150af3,0xb4fb876b libNetHTProtect.so!0x17876b,0xb4fb79bf libNetHTProtect.so!0x1779bf,0xb4fb7827 libNetHTProtect.so!0x177827,0xb4fb777d libNetHTProtect.so!0x17777d,0xe6387139 libc.so!_ZL15__pthread_startPv+0x2a,0xe633fd57 libc.so!__start_thread+0x20

[JNIEnv] 调用: GetStringUTFChars
  参数: �
��Z�h����q�h����рr�
����
调用栈:
0xdc22e867 libicu_jni.so!0x8867,0x72677869 boot-core-icu4j.oat!0x2e869
[JNIEnv] GetStringUTFChars 返回: UTF-8

[JNIEnv] 调用: GetStringUTFChars
  参数: �)M

[JNIEnv] 调用: NewStringUTF
  参数: zh-CN
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: onGetOaid: 739f0aa330ad82f9
调用栈:
0xda7e4391 libjavacore.so!0x1d391,0x711668e9 boot-core-libart.oat!0x108e9
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/efs_launch.xml

[JNIEnv] 调用: GetStringUTFChars
  参数: hlh_�p8h�p(h�p
调用栈:
0xe534c0fd libart.so!_ZN3artL29VMClassLoader_findLoadedClassEP7_JNIEnvP7_jclassP8_jobjectP8_jstring+0x40,0x711656bb boot-core-libart.oat!0xf6bb
[JNIEnv] GetStringUTFChars 返回: com.netease.htprotect.poly.a

[JNIEnv] 调用: GetStringUTFChars
  参数: �
�
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/umzid_general_config.xml

[JNIEnv] 调用: GetStringUTFChars
  参数: @��
调用栈:
0xe72e5e51 libandroid_runtime.so!0x121e51,0xe72e5b11 libandroid_runtime.so!0x121b11,0x71fb9a5b boot-framework.oat!0x185a5b

[JNIEnv] 调用: NewStringUTF
  参数: com.qti.sensor.cmc
调用栈:
0xe534c0fd libart.so!_ZN3artL29VMClassLoader_findLoadedClassEP7_JNIEnvP7_jclassP8_jobjectP8_jstring+0x40,0x711656bb boot-core-libart.oat!0xf6bb
[JNIEnv] GetStringUTFChars 返回: com.netease.htprotect.poly.a

[JNIEnv] 调用: GetStringUTFChars
  参数: �
�
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: java.lang.String

[JNIEnv] 调用: GetStringUTFChars
  参数: (,M
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/umeng_sp_oaid.xml

[JNIEnv] 调用: GetStringUTFChars
  参数: ;p
调用栈:
0xda7e43ab libjavacore.so!0x1d3ab,0x711668e9 boot-core-libart.oat!0x108e9
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/efs_launch.xml.bak

[JNIEnv] 调用: GetStringUTFChars
  参数: 
调用栈:
0xe72e6035 libandroid_runtime.so!0x122035,0xe72e5b11 libandroid_runtime.so!0x121b11,0x71fb9a5b boot-framework.oat!0x185a5b

[JNIEnv] 调用: NewStringUTF
  参数: BU52061NVX ROHM_Hall_Effect
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: zh-CN
调用栈:
0xe5407303 libart.so!_ZN3art6Thread10CreatePeerEPKcbP8_jobject+0x4a,0xe5404f2b libart.so!_ZN3art6Thread6AttachEPKcbP8_jobjectb+0x16a,0xe53c7d4b libart.so!_ZN3art7Runtime19AttachCurrentThreadEPKcbP8_jobjectb+0x32,0xe52655e3 libart.so!_ZN3art3JII27AttachCurrentThreadInternalEP7_JavaVMPP7_JNIEnvPvb+0xea,0xb6a40c15 libunity.so!0x42fc15,0xb67a56f5 libunity.so!0x1946f5,0xaa1346a8
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: android.hardware.camera
调用栈:
0xda7e2b8f libjavacore.so!0x1bb8f,0x71166d05 boot-core-libart.oat!0x10d05
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/efs_launch.xml

[JNIEnv] 调用: GetStringUTFChars
  参数: 8U�r
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.netease.htprotect.poly.a

[JNIEnv] 调用: GetStringUTFChars
  参数: �
��рr0��r
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /storage/emulated/0/Android/data/com.sytt.tzy/files/Audio

[JNIEnv] 调用: NewStringUTF
  参数: UnityGraphicsQuality
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/umeng_sp_oaid.xml.bak

[JNIEnv] 调用: NewStringUTF
  参数: access
调用栈:
0xda7e2b8f libjavacore.so!0x1bb8f,0x71166d05 boot-core-libart.oat!0x10d05
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/umzid_general_config.xml

[JNIEnv] 调用: GetStringUTFChars
  参数: 8U�r��l
调用栈:
0xe72e5e17 libandroid_runtime.so!0x121e17,0xe72e5b11 libandroid_runtime.so!0x121b11,0x71fb9a5b boot-framework.oat!0x185a5b

[JNIEnv] 调用: NewStringUTF
  参数: ROHM_SEMICONDUCTOR
调用栈:
0xb72d04f3 libunity.so!0xcbf4f3

[JNIEnv] 调用: NewStringUTF
  参数: lastLoginAccount
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: android.hardware.camera.autofocus
调用栈:
0xdc22e867 libicu_jni.so!0x8867,0x72677869 boot-core-icu4j.oat!0x2e869
[JNIEnv] GetStringUTFChars 返回: UTF-8

[JNIEnv] 调用: GetStringUTFChars
  参数: H=�
调用栈:
0xe533390b libart.so!_ZN3artL25DexFile_defineClassNativeEP7_JNIEnvP7_jclassP8_jstringP8_jobjectS7_S7_+0x52,0x711641b3 boot-core-libart.oat!0xe1b3
[JNIEnv] GetStringUTFChars 返回: com.netease.htprotect.poly.a

[JNIEnv] 调用: GetStringUTFChars
  参数: �
� �p��@���рr

[JNIEnv] 调用: GetStringUTFChars
  参数: 
调用栈:
0xb72d04f3 libunity.so!0xcbf4f3

[JNIEnv] 调用: NewStringUTF
  参数: lastLoginPassword
调用栈:
0xda7de385 libjavacore.so!0x17385,0x7116659b boot-core-libart.oat!0x1059b

[JNIEnv] 调用: GetStringUTFChars
  参数: �7p;ph_�p8h�p(h�p
调用栈:
0xdc22e867 libicu_jni.so!0x8867,0x72677869 boot-core-icu4j.oat!0x2e869
[JNIEnv] GetStringUTFChars 返回: UTF-8

[JNIEnv] 调用: GetStringUTFChars
  参数: @��
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: zh-CN
调用栈:
0xda7df40d libjavacore.so!0x1840d,0x711669bb boot-core-libart.oat!0x109bb
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/efs_launch.xml

[JNIEnv] 调用: GetStringUTFChars
  参数: 
调用栈:
0xb72d04f3 libunity.so!0xcbf4f3

[JNIEnv] 调用: NewStringUTF
  参数: lastLoginDeviceUUID
调用栈:
0xda7e4391 libjavacore.so!0x1d391,0x711668e9 boot-core-libart.oat!0x108e9
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/umeng_sp_oaid.xml

[JNIEnv] 调用: GetStringUTFChars
  参数: ;ph_�p8h�p(h�p
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/umzid_general_config.xml
[*] JSONObject.put called with key: model, value: M2012K11AC

[JNIEnv] 调用: NewStringUTF
  参数: model

[JNIEnv] 调用: GetStringUTFChars
  参数: h��
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: com.sytt.tzy/com.sytt.tzy.UnityPlayerActivity
调用栈:
0xda7e8c87 libjavacore.so!0x21c87,0x7116694f boot-core-libart.oat!0x1094f
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/efs_launch.xml

[JNIEnv] 调用: GetStringUTFChars
  参数: hlh_�p0Z�p(h�ph�Kq8h�ph�Kqh�Kq
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: android.hardware.camera.front
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/com.sytt.tzy.v2.playerprefs.xml
调用栈:
0xe533390b libart.so!_ZN3artL25DexFile_defineClassNativeEP7_JNIEnvP7_jclassP8_jstringP8_jobjectS7_S7_+0x52,0x711641b3 boot-core-libart.oat!0xe1b3
[JNIEnv] GetStringUTFChars 返回: com.netease.htprotect.poly.a
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.a

[JNIEnv] 调用: GetStringUTFChars
  参数: ���
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: Surface(name=4c456cf StatusBar)/@0xa0c72a - animation-leash of insets_animation
调用栈:
0xda7e4143 libjavacore.so!0x1d143,0x71164e9f boot-core-libart.oat!0xee9f
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/efs_launch.xml.bak

[JNIEnv] 调用: GetStringUTFChars
  参数: �!l�!l�G�q
调用栈:
0xda7e43ab libjavacore.so!0x1d3ab,0x711668e9 boot-core-libart.oat!0x108e9
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/umeng_sp_oaid.xml.bak

[JNIEnv] 调用: GetStringUTFChars
  参数: �7pA
调用栈:
0xe72e5e51 libandroid_runtime.so!0x121e51,0xe72e5b11 libandroid_runtime.so!0x121b11,0x71fb9a5b boot-framework.oat!0x185a5b

[JNIEnv] 调用: NewStringUTF
  参数: com.qti.sensor.hall_effect
调用栈:
0xb72d04f3 libunity.so!0xcbf4f3

[JNIEnv] 调用: NewStringUTF
  参数: slua
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: Surface(name=75cdafa InputMethod)/@0x88c92a1 - animation-leash of insets_animation
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq � ����Ur�g�q
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: android.hardware.microphone
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.AnalyticsConfig

[JNIEnv] 调用: GetStringUTFChars
  参数: ��
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数:  � ����Ur�g�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: LaunchTrace

[JNIEnv] 调用: GetStringUTFChars
  参数: �!l�G�q
调用栈:
0xda7e2b8f libjavacore.so!0x1bb8f,0x71166d05 boot-core-libart.oat!0x10d05
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/umeng_sp_oaid.xml

[JNIEnv] 调用: GetStringUTFChars
  参数: 8U�r
调用栈:
0xe72e6035 libandroid_runtime.so!0x122035,0xe72e5b11 libandroid_runtime.so!0x121b11,0x71fb9a5b boot-framework.oat!0x185a5b

[JNIEnv] 调用: GetStringUTFChars
  参数: pe.
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: model, value: M2012K11AC
[*] JSONObject.put called with key: zts, value: 1753607531054

[JNIEnv] 调用: NewStringUTF
  参数: zts
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: begin sendLaunchCache

[JNIEnv] 调用: GetStringUTFChars
  参数: �L
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.b

[JNIEnv] 调用: GetStringUTFChars
  参数: @��
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: android.hardware.sensor.accelerometer
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.UMConfigure
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.c

[JNIEnv] 调用: GetStringUTFChars
  参数: ���
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: android.hardware.touchscreen
调用栈:
0xdc22e867 libicu_jni.so!0x8867,0x72677869 boot-core-icu4j.oat!0x2e869
[JNIEnv] GetStringUTFChars 返回: UTF-8

[JNIEnv] 调用: GetStringUTFChars
  参数: �7p�
调用栈:
0xb72d04f3 libunity.so!0xcbf4f3

[JNIEnv] 调用: GetStringUTFChars
  参数: /M
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/local/lsp/sensor/sensor

[JNIEnv] 调用: GetStringUTFChars
  参数: pe.
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.CoreProtocol

[JNIEnv] 调用: GetStringUTFChars
  参数: ��
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: android.hardware.touchscreen.multitouch
调用栈:
0xda7e2b8f libjavacore.so!0x1bb8f,0x71166d05 boot-core-libart.oat!0x10d05
[JNIEnv] GetStringUTFChars 返回: /data/app/~~hYKtoZqlctb0dKGf8OSOKQ==/com.sytt.tzy-YAzL_LiSSbrdnOTT58XTsA==/lib/arm/libslua.so

[JNIEnv] 调用: GetStringUTFChars
  参数: /M �
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.filter.a

[JNIEnv] 调用: GetStringUTFChars
  参数: 8��
调用栈:
0xda745fcd libopenjdkjvm.so!JVM_NativeLoad+0x2c,0x70e65741 boot.oat!0xa7741
[JNIEnv] GetStringUTFChars 返回: /data/app/~~hYKtoZqlctb0dKGf8OSOKQ==/com.sytt.tzy-YAzL_LiSSbrdnOTT58XTsA==/lib/arm/libslua.so

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x232a
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: /data/app/~~hYKtoZqlctb0dKGf8OSOKQ==/com.sytt.tzy-YAzL_LiSSbrdnOTT58XTsA==/lib/arm/libslua.so
调用栈:
0xda7df40d libjavacore.so!0x1840d,0x711669bb boot-core-libart.oat!0x109bb
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/umeng_sp_oaid.xml

[JNIEnv] 调用: GetStringUTFChars
  参数: �7ph_�p0Z�p(h�ph�Kq8h�ph�Kqh�Kq
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: android.hardware.touchscreen.multitouch.distinct
调用栈:
0xda7e2b8f libjavacore.so!0x1bb8f,0x71166d05 boot-core-libart.oat!0x10d05
[JNIEnv] GetStringUTFChars 返回: /data/local/lsp/sensor/sensor

[JNIEnv] 调用: GetStringUTFChars
  参数: q.
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.filter.b

[JNIEnv] 调用: GetStringUTFChars
  参数: h��
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: 10
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�����Ur�g�q
调用栈:
0xda7e8c87 libjavacore.so!0x21c87,0x7116694f boot-core-libart.oat!0x1094f
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/umeng_sp_oaid.xml

[JNIEnv] 调用: GetStringUTFChars
  参数: ;ph_�p0Z�p(h�ph�Kq8h�ph�Kqh�Kq
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: java.util.ArrayList

[JNIEnv] 调用: GetStringUTFChars
  参数: �v.
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �����Ur�g�q
调用栈:
0xda7e4143 libjavacore.so!0x1d143,0x71164e9f boot-core-libart.oat!0xee9f
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/umeng_sp_oaid.xml.bak

[JNIEnv] 调用: GetStringUTFChars
  参数: �7p
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: java.lang.LSPSensor

[JNIEnv] 调用: GetStringUTFChars
  参数: (wx
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: zts, value: 1753607531054

[JNIEnv] 调用: GetStringUTFChars
  参数: ��
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/umeng_sp_oaid.xml
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/local/lsp/sensor/dynamic

[JNIEnv] 调用: NewStringUTF
  参数: access
调用栈:
0xda7e2b8f libjavacore.so!0x1bb8f,0x71166d05 boot-core-libart.oat!0x10d05
[JNIEnv] GetStringUTFChars 返回: /data/app/~~hYKtoZqlctb0dKGf8OSOKQ==/com.sytt.tzy-YAzL_LiSSbrdnOTT58XTsA==/lib/arm/libumeng-spy.so

[JNIEnv] 调用: NewStringUTF
  参数: open
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: GetStringUTFChars
  参数: ��
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.filter.c

[JNIEnv] 调用: GetStringUTFChars
  参数: ���
调用栈:
0xda7de385 libjavacore.so!0x17385,0x7116659b boot-core-libart.oat!0x1059b

[JNIEnv] 调用: GetStringUTFChars
[JNIEnv] GetStringUTFChars 返回: /sys/devices/system/cpu

[JNIEnv] 调用: NewStringUTF
Error: access violation accessing 0x11
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
  参数: cpuidle
调用栈:
0xda7e2bc3 libjavacore.so!0x1bbc3,0x71166d05 boot-core-libart.oat!0x10d05

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x11
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: /data/app/~~hYKtoZqlctb0dKGf8OSOKQ==/com.sytt.tzy-YAzL_LiSSbrdnOTT58XTsA==/base.apk

[JNIEnv] 调用: GetStringUTFChars
  参数: p��
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: android.content.Context

[JNIEnv] 调用: GetStringUTFChars
  参数: ��
调用栈:
0xda7a2fa9 libopenjdk.so!Java_java_io_UnixFileSystem_list0+0x9c,0x70e65bbf boot.oat!0xa7bbf

[JNIEnv] 调用: NewStringUTF
  参数: offline
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.filter.d

[JNIEnv] 调用: GetStringUTFChars
  参数: ���
调用栈:
0xda79c369 libopenjdk.so!ZipFile_open+0x24,0x70e69a47 boot.oat!0xaba47
[JNIEnv] GetStringUTFChars 返回: /data/app/~~hYKtoZqlctb0dKGf8OSOKQ==/com.sytt.tzy-YAzL_LiSSbrdnOTT58XTsA==/base.apk

[JNIEnv] 调用: GetStringUTFChars
  参数: p��;L�pp��� �
调用栈:
0xda7a2fa9 libopenjdk.so!Java_java_io_UnixFileSystem_list0+0x9c,0x70e65bbf boot.oat!0xa7bbf

[JNIEnv] 调用: NewStringUTF
  参数: cpu7
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: android.content.Context

[JNIEnv] 调用: GetStringUTFChars
  参数: �Th
调用栈:
0xda7a2fa9 libopenjdk.so!Java_java_io_UnixFileSystem_list0+0x9c,0x70e65bbf boot.oat!0xa7bbf

[JNIEnv] 调用: NewStringUTF
  参数: online
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.filter.EventList

[JNIEnv] 调用: GetStringUTFChars
  参数: ���
调用栈:
0xda7a2c27 libopenjdk.so!Java_java_io_UnixFileSystem_getBooleanAttributes0+0x22,0x70e65c27 boot.oat!0xa7c27
[JNIEnv] GetStringUTFChars 返回: /data/app/~~hYKtoZqlctb0dKGf8OSOKQ==/com.sytt.tzy-YAzL_LiSSbrdnOTT58XTsA==/base.apk

[JNIEnv] 调用: GetStringUTFChars
  参数: 8U�r0%�0
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: efs.send_log

[JNIEnv] 调用: GetStringUTFChars
  参数: 
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.Gender

[JNIEnv] 调用: GetStringUTFChars
  参数: 0��
调用栈:
0xda7a2fa9 libopenjdk.so!Java_java_io_UnixFileSystem_list0+0x9c,0x70e65bbf boot.oat!0xa7bbf

[JNIEnv] 调用: NewStringUTF
  参数: present
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: tryFileLock start! 

[JNIEnv] 调用: GetStringUTFChars
  参数: p�

[JNIEnv] 调用: NewStringUTF
  参数: android.net.conn.CONNECTIVITY_CHANGE

[JNIEnv] 调用: NewStringUTF
  参数: android.net.conn.CONNECTIVITY_CHANGE
调用栈:
0xda7a2fa9 libopenjdk.so!Java_java_io_UnixFileSystem_list0+0x9c,0x70e65bbf boot.oat!0xa7bbf

[JNIEnv] 调用: NewStringUTF
  参数: cpu5
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy

[JNIEnv] 调用: GetStringUTFChars
  参数: 
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: GetStringUTFChars
  参数: �	d�	d��ͤx�ͤ`�
���p���p�ڦ��
调用栈:
0xdc22e867 libicu_jni.so!0x8867,0x72677869 boot-core-icu4j.oat!0x2e869
[JNIEnv] GetStringUTFChars 返回: UTF-8

[JNIEnv] 调用: GetStringUTFChars
  参数: �'�
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: GetStringUTFChars
  参数: p�
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.MobclickAgent

[JNIEnv] 调用: GetStringUTFChars
  参数: 
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: efs.info.manager

[JNIEnv] 调用: GetStringUTFChars
  参数: �	d��ͤx�ͤ`�
���p���p�ڦ��
调用栈:
0xda7e2b8f libjavacore.so!0x1bb8f,0x71166d05 boot-core-libart.oat!0x10d05
[JNIEnv] GetStringUTFChars 返回: /system/lib/libumeng-spy.so

[JNIEnv] 调用: NewStringUTF
  参数: open
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy

[JNIEnv] 调用: GetStringUTFChars
  参数: zh
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: network change: wifi
调用栈:
0xda7e2bc3 libjavacore.so!0x1bbc3,0x71166d05 boot-core-libart.oat!0x10d05

[JNIEnv] 调用: GetStringUTFChars
  参数: �)�
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/app_UApm

[JNIEnv] 调用: GetStringUTFChars
  参数: zh
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/app_UApm

[JNIEnv] 调用: GetStringUTFChars
  参数: 
调用栈:
0xda7e2b8f libjavacore.so!0x1bb8f,0x71166d05 boot-core-libart.oat!0x10d05
[JNIEnv] GetStringUTFChars 返回: /system/system_ext/lib/libumeng-spy.so

[JNIEnv] 调用: NewStringUTF
  参数: open
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.pro.a

[JNIEnv] 调用: GetStringUTFChars
  参数: 0��
调用栈:
0xda7a2fa9 libopenjdk.so!Java_java_io_UnixFileSystem_list0+0x9c,0x70e65bbf boot.oat!0xa7bbf

[JNIEnv] 调用: NewStringUTF
  参数: cpu3
调用栈:
0xda7e2bc3 libjavacore.so!0x1bbc3,0x71166d05 boot-core-libart.oat!0x10d05

[JNIEnv] 调用: GetStringUTFChars
  参数: �+�
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/app_UApm

[JNIEnv] 调用: GetStringUTFChars
  参数: 
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/app_UApm

[JNIEnv] 调用: GetStringUTFChars
  参数: �zh
调用栈:
0xda7e2b8f libjavacore.so!0x1bb8f,0x71166d05 boot-core-libart.oat!0x10d05
[JNIEnv] GetStringUTFChars 返回: /system/product/lib/libumeng-spy.so

[JNIEnv] 调用: NewStringUTF
  参数: open
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/app_UApm

[JNIEnv] 调用: GetStringUTFChars
  参数: �4|
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/app_UApm/656436ae58a9eb5b0a11a63e

[JNIEnv] 调用: GetStringUTFChars
  参数: @{h
调用栈:
0xda7e2bc3 libjavacore.so!0x1bbc3,0x71166d05 boot-core-libart.oat!0x10d05

[JNIEnv] 调用: GetStringUTFChars
  参数: H-� �
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/app_UApm/sendlock

[JNIEnv] 调用: GetStringUTFChars
  参数: �4|A
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/app_UApm/656436ae58a9eb5b0a11a63e/efs_config

[JNIEnv] 调用: NewStringUTF
  参数: access
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.pro.aa

[JNIEnv] 调用: GetStringUTFChars
  参数: `��
调用栈:
0xda7a2fa9 libopenjdk.so!Java_java_io_UnixFileSystem_list0+0x9c,0x70e65bbf boot.oat!0xa7bbf

[JNIEnv] 调用: NewStringUTF
  参数: power
调用栈:
0xda7de385 libjavacore.so!0x17385,0x7116659b boot-core-libart.oat!0x1059b

[JNIEnv] 调用: GetStringUTFChars
  参数: Xyh�|h(,��,��`�
��p���p�����
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.pro.ab

[JNIEnv] 调用: GetStringUTFChars
  参数: ���
调用栈:
0xda745fcd libopenjdkjvm.so!JVM_NativeLoad+0x2c,0x70e65741 boot.oat!0xa7741
[JNIEnv] GetStringUTFChars 返回: libumeng-spy.so

[JNIEnv] 调用: NewStringUTF
  参数: dlopen failed: library "libumeng-spy.so" not found
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: efs.config

[JNIEnv] 调用: GetStringUTFChars
  参数: �|h(,��,��`�
��p���p�����
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.pro.ac

[JNIEnv] 调用: GetStringUTFChars
  参数: ���
调用栈:
0xda7e2b8f libjavacore.so!0x1bb8f,0x71166d05 boot-core-libart.oat!0x10d05
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/app_UApm/sendlock

[JNIEnv] 调用: GetStringUTFChars
  参数: �Th�8|����x���`�
���p���p�ڦ��
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: delete old config is false

[JNIEnv] 调用: GetStringUTFChars
  参数: p�h
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.pro.ad

[JNIEnv] 调用: GetStringUTFChars
  参数: ���
调用栈:
0xda7a2fa9 libopenjdk.so!Java_java_io_UnixFileSystem_list0+0x9c,0x70e65bbf boot.oat!0xa7bbf

[JNIEnv] 调用: NewStringUTF
  参数: possible
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/Y29uZmlnXzY1NjQzNmFlNThhOWViNWIwYTExYTYzZQ.sp

[JNIEnv] 调用: GetStringUTFChars
  参数: p�hh_�p0Z�p(h�ph�Kq8h�ph�Kqh�Kq
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.pro.ae

[JNIEnv] 调用: GetStringUTFChars
  参数:  ��
调用栈:
0xda7460d9 libopenjdkjvm.so!JVM_NativeLoad+0x138,0x70e65741 boot.oat!0xa7741

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq 7� 7��Xq�Ur�d�q
调用栈:
0xda7e8c87 libjavacore.so!0x21c87,0x7116694f boot-core-libart.oat!0x1094f
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/Y29uZmlnXzY1NjQzNmFlNThhOWViNWIwYTExYTYzZQ.sp

[JNIEnv] 调用: GetStringUTFChars
  参数: p�hB
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.pro.af

[JNIEnv] 调用: GetStringUTFChars
  参数: P��
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: efs.send_log

[JNIEnv] 调用: GetStringUTFChars
  参数: �8|����x���`�
���p���p�ڦ��
调用栈:
0xda7e2b8f libjavacore.so!0x1bb8f,0x71166d05 boot-core-libart.oat!0x10d05
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/Y29uZmlnXzY1NjQzNmFlNThhOWViNWIwYTExYTYzZQ.sp

[JNIEnv] 调用: GetStringUTFChars
  参数: H�h

[JNIEnv] 调用: GetStringUTFChars
  参数: H�h
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.pro.ag

[JNIEnv] 调用: GetStringUTFChars
  参数: ���
调用栈:
0xda7a2fa9 libopenjdk.so!Java_java_io_UnixFileSystem_list0+0x9c,0x70e65bbf boot.oat!0xa7bbf

[JNIEnv] 调用: NewStringUTF
  参数: cpu1
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/Y29uZmlnXzY1NjQzNmFlNThhOWViNWIwYTExYTYzZQ.sp.bak

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x19
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/Y29uZmlnXzY1NjQzNmFlNThhOWViNWIwYTExYTYzZQ.sp.bak

[JNIEnv] 调用: GetStringUTFChars
  参数: Xyh��h�+��x+��`�
��p���p�����
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.err

[JNIEnv] 调用: GetStringUTFChars
  参数:  7� 7��Xq�Ur�d�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: tryFileLock sendlock sucess! processname: com.sytt.tzy
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/Y29uZmlnXzY1NjQzNmFlNThhOWViNWIwYTExYTYzZQ.sp.bak
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: java.lang.UnsatisfiedLinkError: dlopen failed: library "libumeng-spy.so" not found

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�@��@��Xq�Ur�d�q
调用栈:
0xda7a2fa9 libopenjdk.so!Java_java_io_UnixFileSystem_list0+0x9c,0x70e65bbf boot.oat!0xa7bbf

[JNIEnv] 调用: NewStringUTF
  参数: hotplug
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.pro.ah

[JNIEnv] 调用: GetStringUTFChars
  参数: ���
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: efs.config

[JNIEnv] 调用: GetStringUTFChars
  参数: ��h�+��x+��`�
��p���p�����
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.err

[JNIEnv] 调用: GetStringUTFChars
  参数: �@��@��Xq�Ur�d�q
调用栈:
0xda7a2fa9 libopenjdk.so!Java_java_io_UnixFileSystem_list0+0x9c,0x70e65bbf boot.oat!0xa7bbf

[JNIEnv] 调用: NewStringUTF
  参数: core_ctl_isolated
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: current config version (-1) is older than another (1735614866)

[JNIEnv] 调用: GetStringUTFChars
  参数: Xyhh�h(,��,��`�
��p��dh�

[JNIEnv] 调用: GetStringUTFChars
  参数: Xyh�[��`���`��`�
��p���p�����
调用栈:
0xda7a2fa9 libopenjdk.so!Java_java_io_UnixFileSystem_list0+0x9c,0x70e65bbf boot.oat!0xa7bbf

[JNIEnv] 调用: NewStringUTF
  参数: kernel_max
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: efs.config

[JNIEnv] 调用: GetStringUTFChars
  参数: h�h(,��,��`�
��p��dh�
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 	at java.lang.Runtime.loadLibrary0(Runtime.java:1077)

[JNIEnv] 调用: GetStringUTFChars
  参数: �XqxC�xC��Xq�Ur�d�q
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.pro.ai

[JNIEnv] 调用: GetStringUTFChars
  参数: ��
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: efs.config

[JNIEnv] 调用: GetStringUTFChars
  参数: �[��`���`��`�
��p���p�����
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.err

[JNIEnv] 调用: GetStringUTFChars
  参数: xC�xC��Xq�Ur�d�q
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.pro.aj

[JNIEnv] 调用: GetStringUTFChars
  参数: @��
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: --->>> configCallback key is apm_net_state ## value is 0

[JNIEnv] 调用: GetStringUTFChars
  参数: Xyh�e��`���`��`�
��p�pa�����
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 	at java.lang.Runtime.loadLibrary0(Runtime.java:998)

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq0F�0F��Xq�Ur�d�q
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.pro.ak

[JNIEnv] 调用: GetStringUTFChars
  参数: p��
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: efs.config

[JNIEnv] 调用: GetStringUTFChars
  参数: �e��`���`��`�
��p�pa�����
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.err

[JNIEnv] 调用: GetStringUTFChars
  参数: 0F�0F��Xq�Ur�d�q
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.pro.al

[JNIEnv] 调用: GetStringUTFChars
  参数: ���
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: --->>> configCallback key is apm_native_h5_state ## value is 0

[JNIEnv] 调用: GetStringUTFChars
  参数: Xyh�o��`���`��`�
��p��k�����
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: load config from storage and notify observer
调用栈:
0xda7a2fa9 libopenjdk.so!Java_java_io_UnixFileSystem_list0+0x9c,0x70e65bbf boot.oat!0xa7bbf

[JNIEnv] 调用: NewStringUTF
  参数: cpufreq
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 	at java.lang.System.loadLibrary(System.java:1656)

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�H��H��Xq�Ur�d�q
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.pro.am

[JNIEnv] 调用: GetStringUTFChars
  参数: 
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.err

[JNIEnv] 调用: GetStringUTFChars
  参数: �H��H��Xq�Ur�d�q
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.pro.an

[JNIEnv] 调用: GetStringUTFChars
  参数: ���
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: efs.config

[JNIEnv] 调用: GetStringUTFChars
  参数: �o��`���`��`�
��p��k�����
调用栈:
0xda7a2fa9 libopenjdk.so!Java_java_io_UnixFileSystem_list0+0x9c,0x70e65bbf boot.oat!0xa7bbf

[JNIEnv] 调用: NewStringUTF
  参数: modalias
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.pro.ao

[JNIEnv] 调用: GetStringUTFChars
  参数: ���
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: --->>> configCallback key is apm_crash_user_max_count ## value is 20

[JNIEnv] 调用: GetStringUTFChars
  参数: Xyhz��`���`��`�
��p��u�����
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 	at com.umeng.umzid.Spy.<clinit>(Unknown Source:2)

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�K��K��Xq�Ur�d�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: efs.config

[JNIEnv] 调用: GetStringUTFChars
  参数: z��`���`��`�
��p��u�����
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.err

[JNIEnv] 调用: GetStringUTFChars
  参数: �K��K��Xq�Ur�d�q
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.pro.ap

[JNIEnv] 调用: GetStringUTFChars
  参数: ���
调用栈:
0xda7a2fa9 libopenjdk.so!Java_java_io_UnixFileSystem_list0+0x9c,0x70e65bbf boot.oat!0xa7bbf

[JNIEnv] 调用: NewStringUTF
  参数: isolated
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 	at com.umeng.umzid.Spy.getID(Unknown Source:0)

[JNIEnv] 调用: GetStringUTFChars
  参数: �XqxM�xM��Xq�Ur�d�q
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.pro.aq

[JNIEnv] 调用: GetStringUTFChars
  参数: P��
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: --->>> configCallback key is apm_crash_user_upload_type ## value is 1

[JNIEnv] 调用: GetStringUTFChars
  参数: Xyh{�Da��a��`�
�\�p�X�h�D(a��ɽ|a����LػL
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.pro.ar

[JNIEnv] 调用: GetStringUTFChars
  参数: ���
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: efs.config

[JNIEnv] 调用: GetStringUTFChars
  参数: {�Da��a��`�
�\�p�X�h�D(a��ɽ|a����LػL
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.err

[JNIEnv] 调用: GetStringUTFChars
  参数: xM�xM��Xq�Ur�d�q
调用栈:
0xda7a2fa9 libopenjdk.so!Java_java_io_UnixFileSystem_list0+0x9c,0x70e65bbf boot.oat!0xa7bbf

[JNIEnv] 调用: NewStringUTF
  参数: cpu6
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: callback netRate is 0

[JNIEnv] 调用: GetStringUTFChars
  参数: ���
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 	at com.umeng.umzid.ZIDManager.b(:4)

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�O��O��Xq�Ur�d�q
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.pro.as

[JNIEnv] 调用: GetStringUTFChars
  参数: @��
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.err

[JNIEnv] 调用: GetStringUTFChars
  参数: �O��O��Xq�Ur�d�q
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.pro.at

[JNIEnv] 调用: GetStringUTFChars
  参数: p��
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 	at com.umeng.umzid.ZIDManager$b.run(:1)

[JNIEnv] 调用: GetStringUTFChars
  参数: �XqPS�PS��Xq�Ur�d�q
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.pro.au

[JNIEnv] 调用: GetStringUTFChars
  参数: ���
调用栈:
0xda7a2fa9 libopenjdk.so!Java_java_io_UnixFileSystem_list0+0x9c,0x70e65bbf boot.oat!0xa7bbf

[JNIEnv] 调用: NewStringUTF
  参数: cpu4
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.err

[JNIEnv] 调用: GetStringUTFChars
  参数: PS�PS��Xq�Ur�d�q
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.pro.av

[JNIEnv] 调用: GetStringUTFChars
  参数: ���
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/um_umcrash.xml

[JNIEnv] 调用: GetStringUTFChars
  参数: XyhH}�Da��a��`�
�\�p�X�h`$D(a��~ɽ|a����LػL
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:462)

[JNIEnv] 调用: GetStringUTFChars
  参数: �XqHV�HV��Xq�Ur�d�q
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.pro.aw

[JNIEnv] 调用: GetStringUTFChars
  参数: 
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.err

[JNIEnv] 调用: GetStringUTFChars
  参数: HV�HV��Xq�Ur�d�q
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.pro.ax

[JNIEnv] 调用: GetStringUTFChars
  参数: ���
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: efs.config

[JNIEnv] 调用: GetStringUTFChars
  参数: H}�Da��a��`�
�\�p�X�h`$D(a��~ɽ|a����LػL
调用栈:
0xda7a2fa9 libopenjdk.so!Java_java_io_UnixFileSystem_list0+0x9c,0x70e65bbf boot.oat!0xa7bbf

[JNIEnv] 调用: NewStringUTF
  参数: uevent
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.pro.ay

[JNIEnv] 调用: GetStringUTFChars
  参数: ���
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: callback nativeH5Rate is 0

[JNIEnv] 调用: GetStringUTFChars
  参数: ���
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 	at java.util.concurrent.FutureTask.run(FutureTask.java:266)

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq0\�0\��Xq�Ur�d�q
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.pro.az

[JNIEnv] 调用: GetStringUTFChars
  参数: ���
调用栈:
0xda7a2fa9 libopenjdk.so!Java_java_io_UnixFileSystem_list0+0x9c,0x70e65bbf boot.oat!0xa7bbf

[JNIEnv] 调用: NewStringUTF
  参数: cpu2
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/um_umcrash.xml

[JNIEnv] 调用: GetStringUTFChars
  参数: Xyh���_���_��`�
�������'D
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.err

[JNIEnv] 调用: GetStringUTFChars
  参数: 0\�0\��Xq�Ur�d�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: efs.config

[JNIEnv] 调用: GetStringUTFChars
  参数: ���_���_��`�
�������'D
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:301)

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�_��_��Xq�Ur�d�q
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.pro.b

[JNIEnv] 调用: GetStringUTFChars
  参数: ���
调用栈:
0xda7a2fa9 libopenjdk.so!Java_java_io_UnixFileSystem_list0+0x9c,0x70e65bbf boot.oat!0xa7bbf

[JNIEnv] 调用: NewStringUTF
  参数: cpu0
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.err

[JNIEnv] 调用: GetStringUTFChars
  参数: �_��_��Xq�Ur�d�q
调用栈:
0xda7a2fa9 libopenjdk.so!Java_java_io_UnixFileSystem_list0+0x9c,0x70e65bbf boot.oat!0xa7bbf

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq��x��x���Ur�g�q�yRq

[JNIEnv] 调用: GetStringUTFChars
  参数: 
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1167)

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�c��c��Xq�Ur�d�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: callback crashMaxUserCount is 20

[JNIEnv] 调用: GetStringUTFChars
  参数: Xyh���Da��a��`�
�\�p�X�h +D(a��
ɽ|a����LػL
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.pro.ba

[JNIEnv] 调用: GetStringUTFChars
  参数: ���
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/app_UApm/656436ae58a9eb5b0a11a63e

[JNIEnv] 调用: GetStringUTFChars
  参数: ��h
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: ��x��x���Ur�g�q�yRq
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.pro.bb

[JNIEnv] 调用: GetStringUTFChars
  参数: ��
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.pro.bc
[JNIEnv] GetStringUTFChars 返回: efs.config

[JNIEnv] 调用: GetStringUTFChars
  参数: �"�Da��a��`�
�\�p�X�h +D(a��
ɽ|a��0&�P&�p&��&��"�0"��&��&��&��&�'�0&�P&�p&��&��"�0"��&��&��&��&�'��p
[JNIEnv] GetStringUTFChars 返回: System.err

[JNIEnv] 调用: GetStringUTFChars
  参数: �-��-��Xq�Ur�d�q

[JNIEnv] 调用: GetStringUTFChars
  参数: �V�
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/app_UApm/656436ae58a9eb5b0a11a63e/efs_cst
[JNIEnv] GetStringUTFChars 返回: put name: n, value: 8

[JNIEnv] 调用: NewStringUTF
  参数: access

[JNIEnv] 调用: GetStringUTFChars
  参数: p
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: callback uploadType is 1

[JNIEnv] 调用: GetStringUTFChars
  参数: H��
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.pro.bd

[JNIEnv] 调用: GetStringUTFChars
  参数: 0��
调用栈:
0xda7e2b8f libjavacore.so!0x1bb8f,0x71166d05 boot-core-libart.oat!0x10d05
[JNIEnv] GetStringUTFChars 返回: /proc/cpuinfo

[JNIEnv] 调用: GetStringUTFChars
  参数: 8U�r
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/um_umcrash.xml

[JNIEnv] 调用: GetStringUTFChars
  参数: 0"����`���`��`�
��p���p�����
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.pro.be

[JNIEnv] 调用: GetStringUTFChars
  参数: @��
调用栈:
0xdc22e867 libicu_jni.so!0x8867,0x72677869 boot-core-icu4j.oat!0x2e869
[JNIEnv] GetStringUTFChars 返回: UTF-8
[*] JSONObject.put called with key: na, value: AArch64 Processor rev 0 (aarch64)Processor : AArch64 Processor rev 4 (aarch64) 

[JNIEnv] 调用: NewStringUTF
  参数: na
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: efs.config

[JNIEnv] 调用: GetStringUTFChars
  参数: ���`���`��`�
��p���p�����
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.pro.bf

[JNIEnv] 调用: GetStringUTFChars
  参数: 
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: --->>> configCallback key is apm_memperf_sampling_rate ## value is 0

[JNIEnv] 调用: GetStringUTFChars
  参数: 0"����`���`��`�
��p�4R�b��{�H�쥻��`��
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:641)

[JNIEnv] 调用: GetStringUTFChars
  参数: �XqP�P��Xq�Ur�d�q
调用栈:
0xda7de385 libjavacore.so!0x17385,0x7116659b boot-core-libart.oat!0x1059b

[JNIEnv] 调用: GetStringUTFChars
  参数: 0"�0�(,��,��`�
��p��dh�9
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.pro.bg

[JNIEnv] 调用: GetStringUTFChars
  参数: 0��
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.pro.bh
[JNIEnv] GetStringUTFChars 返回: efs.config

[JNIEnv] 调用: GetStringUTFChars
  参数: 0�(,��,��`�
��p��dh�9
[JNIEnv] GetStringUTFChars 返回: System.err
[JNIEnv] GetStringUTFChars 返回: efs.config

[JNIEnv] 调用: GetStringUTFChars
  参数: ���`���`��`�
��p�4R�b��{�H�쥻��`��

[JNIEnv] 调用: GetStringUTFChars
  参数: P�P��Xq�Ur�d�q

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�@��@��D��Ur�g�q

[JNIEnv] 调用: GetStringUTFChars
  参数: ���
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: No update is required, less than 8h since the last update
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 	at java.lang.Thread.run(Thread.java:920)
[*] JSONObject.put called with key: z, value: null

[JNIEnv] 调用: NewStringUTF
  参数: z
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.pro.bi

[JNIEnv] 调用: GetStringUTFChars
  参数: ���
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �@��@��D��Ur�g�q
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.pro.bj

[JNIEnv] 调用: GetStringUTFChars
  参数: 诙
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: na, value: AArch64 Processor rev 0 (aarch64)Processor : AArch64 Processor rev 4 (aarch64) 
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: --->>> configCallback key is apm_memperf_collect_interval ## value is 5

[JNIEnv] 调用: GetStringUTFChars
  参数: 0"����`���`��`�
��p���b��{�H�쥻��`��
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259
[*] JSONObject.put called with key: o_z, value: null

[JNIEnv] 调用: NewStringUTF
  参数: o_z

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�����D��Ur�g�q���
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.pro.bk

[JNIEnv] 调用: GetStringUTFChars
  参数: 0��
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: efs.config

[JNIEnv] 调用: GetStringUTFChars
  参数: ���`���`��`�
��p���b��{�H�쥻��`��
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �����D��Ur�g�q���
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: --->>> configCallback key is apm_memperf_collect_max_period_sec ## value is 600

[JNIEnv] 调用: GetStringUTFChars
  参数: 0"��*��`���`��`�
��p�h&��`��
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: fn, value: 710

[JNIEnv] 调用: GetStringUTFChars
  参数: p�
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.pro.bl

[JNIEnv] 调用: GetStringUTFChars
  参数: ���
调用栈:
0xda7e2b8f libjavacore.so!0x1bb8f,0x71166d05 boot-core-libart.oat!0x10d05
[JNIEnv] GetStringUTFChars 返回: /proc/meminfo

[JNIEnv] 调用: GetStringUTFChars
  参数: 8U�r
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.pro.bm

[JNIEnv] 调用: GetStringUTFChars
  参数: ���
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: efs.config

[JNIEnv] 调用: GetStringUTFChars
  参数: �*��`���`��`�
��p�h&��`��
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.pro.bn

[JNIEnv] 调用: GetStringUTFChars
  参数: ఙ
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: --->>> configCallback key is apm_startperf_sampling_rate ## value is 5

[JNIEnv] 调用: GetStringUTFChars
  参数: 0��
调用栈:
0xdc22e867 libicu_jni.so!0x8867,0x72677869 boot-core-icu4j.oat!0x2e869
[JNIEnv] GetStringUTFChars 返回: UTF-8

[JNIEnv] 调用: GetStringUTFChars
  参数:  o�rh_�p
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �ɚ
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/efs_launch.xml

[JNIEnv] 调用: GetStringUTFChars
  参数: 0"��6��`���`��`�
��p�X2��+���쥻��`��
调用栈:
0xda7e65b7 libjavacore.so!0x1f5b7,0x7116694f boot-core-libart.oat!0x1094f
[JNIEnv] GetStringUTFChars 返回: /data

[JNIEnv] 调用: GetStringUTFChars
  参数: �D�
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.pro.bo

[JNIEnv] 调用: GetStringUTFChars
  参数: ��
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.statistics.common.DeviceConfig
[*] JSONObject.put called with key: o_o, value: 739f0aa330ad82f9

[JNIEnv] 调用: NewStringUTF
  参数: o_o
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: efs.config

[JNIEnv] 调用: GetStringUTFChars
  参数: �6��`���`��`�
��p�X2��+���쥻��`��
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.pro.bp

[JNIEnv] 调用: GetStringUTFChars
  参数: @��
调用栈:
0xda7a9105 libopenjdk.so!Mock_getProperty+0x2c,0x70e653e3 boot.oat!0xa73e3
[JNIEnv] GetStringUTFChars 返回: lsp.statfs.data.blockCountLong

[JNIEnv] 调用: NewStringUTF
  参数: 27864567
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: --->>> configCallback key is apm_patrace_switch_rate ## value is 5
调用栈:
0xda7a9141 libopenjdk.so!Mock_getProperty+0x68,0x70e653e3 boot.oat!0xa73e3

[JNIEnv] 调用: GetStringUTFChars
  参数: hP�
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.pro.bq

[JNIEnv] 调用: GetStringUTFChars
  参数: p��
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.pro.br

[JNIEnv] 调用: GetStringUTFChars
  参数: ���
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �XqH�H��D��Ur�g�q
调用栈:
0xda7a9105 libopenjdk.so!Mock_getProperty+0x2c,0x70e653e3 boot.oat!0xa73e3
[JNIEnv] GetStringUTFChars 返回: lsp.statfs.data.blockSizeLong

[JNIEnv] 调用: NewStringUTF
  参数: 4096
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.pro.bs

[JNIEnv] 调用: GetStringUTFChars
  参数: 8��
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: H�H��D��Ur�g�q
调用栈:
0xda7a9141 libopenjdk.so!Mock_getProperty+0x68,0x70e653e3 boot.oat!0xa73e3

[JNIEnv] 调用: GetStringUTFChars
  参数: \�
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: o_o, value: 739f0aa330ad82f9
[*] JSONObject.put called with key: o, value: 739f0aa330ad82f9

[JNIEnv] 调用: NewStringUTF
  参数: o
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.pro.bt

[JNIEnv] 调用: GetStringUTFChars
  参数: ��
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.pro.bu

[JNIEnv] 调用: GetStringUTFChars
  参数: P��
调用栈:
0xda7a9105 libopenjdk.so!Mock_getProperty+0x2c,0x70e653e3 boot.oat!0xa73e3
[JNIEnv] GetStringUTFChars 返回: lsp.statfs.data.freeBlocksLong

[JNIEnv] 调用: NewStringUTF
  参数: 13591666
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.pro.bv

[JNIEnv] 调用: GetStringUTFChars
  参数: ���
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.pro.bw

[JNIEnv] 调用: GetStringUTFChars
  参数: ���
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq
调用栈:
0xda7a9141 libopenjdk.so!Mock_getProperty+0x68,0x70e653e3 boot.oat!0xa73e3

[JNIEnv] 调用: GetStringUTFChars
  参数: �g�
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.pro.bx

[JNIEnv] 调用: GetStringUTFChars
  参数: ���
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: 
调用栈:
0xda7a9105 libopenjdk.so!Mock_getProperty+0x2c,0x70e653e3 boot.oat!0xa73e3
[JNIEnv] GetStringUTFChars 返回: lsp.statfs.data.freeBlocksLong.origin

[JNIEnv] 调用: NewStringUTF
  参数: 13539353
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.pro.by

[JNIEnv] 调用: GetStringUTFChars
  参数: ���
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.pro.bz

[JNIEnv] 调用: GetStringUTFChars
  参数: (��
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: o, value: 739f0aa330ad82f9

[JNIEnv] 调用: GetStringUTFChars
  参数: �ɚ
调用栈:
0xda7a9141 libopenjdk.so!Mock_getProperty+0x68,0x70e653e3 boot.oat!0xa73e3

[JNIEnv] 调用: GetStringUTFChars
  参数: �s�
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.statistics.common.DeviceConfig
[*] JSONObject.put called with key: mc, value: 

[JNIEnv] 调用: NewStringUTF
  参数: mc
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.pro.c

[JNIEnv] 调用: GetStringUTFChars
  参数: ങ
调用栈:
0xda7a9105 libopenjdk.so!Mock_getProperty+0x2c,0x70e653e3 boot.oat!0xa73e3
[JNIEnv] GetStringUTFChars 返回: lsp.statfs.data.availableBlocksLong.origin

[JNIEnv] 调用: NewStringUTF
  参数: 13396179
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.pro.ca

[JNIEnv] 调用: GetStringUTFChars
  参数: ��
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.pro.cb

[JNIEnv] 调用: GetStringUTFChars
  参数: @��
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq*�*��D��Ur�g�q
调用栈:
0xda7a9141 libopenjdk.so!Mock_getProperty+0x68,0x70e653e3 boot.oat!0xa73e3

[JNIEnv] 调用: GetStringUTFChars
  参数: @�
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.pro.cc

[JNIEnv] 调用: GetStringUTFChars
  参数: ���
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: *�*��D��Ur�g�q
调用栈:
0xda7a9105 libopenjdk.so!Mock_getProperty+0x2c,0x70e653e3 boot.oat!0xa73e3
[JNIEnv] GetStringUTFChars 返回: lsp.statfs.data.availableBlocksLong

[JNIEnv] 调用: NewStringUTF
  参数: 13558898
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.pro.cd

[JNIEnv] 调用: GetStringUTFChars
  参数: ص�

[JNIEnv] 调用: GetStringUTFChars
  参数: 8�
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: mc, value: 
[*] JSONObject.put called with key: o_mc, value: 

[JNIEnv] 调用: NewStringUTF
  参数: o_mc
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/paconfig.sp.bak

[JNIEnv] 调用: GetStringUTFChars
  参数: 8�A
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.pro.ce

[JNIEnv] 调用: GetStringUTFChars
  参数: ���
调用栈:
0xda7a9141 libopenjdk.so!Mock_getProperty+0x68,0x70e653e3 boot.oat!0xa73e3

[JNIEnv] 调用: GetStringUTFChars
  参数:  o�rh_�p
调用栈:
0xda7e2b8f libjavacore.so!0x1bb8f,0x71166d05 boot-core-libart.oat!0x10d05
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/paconfig.sp.bak
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.pro.cf

[JNIEnv] 调用: GetStringUTFChars
  参数: ض�
调用栈:
0xda7e65b7 libjavacore.so!0x1f5b7,0x7116694f boot-core-libart.oat!0x1094f
[JNIEnv] GetStringUTFChars 返回: /data

[JNIEnv] 调用: GetStringUTFChars
  参数: ���
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�0��0��D��Ur�g�q
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.pro.cg

[JNIEnv] 调用: GetStringUTFChars
  参数: ��
调用栈:
0xda7a9105 libopenjdk.so!Mock_getProperty+0x2c,0x70e653e3 boot.oat!0xa73e3
[JNIEnv] GetStringUTFChars 返回: lsp.statfs.data.blockCountLong

[JNIEnv] 调用: NewStringUTF
  参数: 27864567
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �0��0��D��Ur�g�q
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.pro.ch

[JNIEnv] 调用: GetStringUTFChars
  参数: з�
调用栈:
0xda7a9141 libopenjdk.so!Mock_getProperty+0x68,0x70e653e3 boot.oat!0xa73e3

[JNIEnv] 调用: GetStringUTFChars
  参数: X��
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: o_mc, value: 

[JNIEnv] 调用: GetStringUTFChars
  参数: �ɚ
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.pro.ci

[JNIEnv] 调用: GetStringUTFChars
  参数: (��
调用栈:
0xda7a9105 libopenjdk.so!Mock_getProperty+0x2c,0x70e653e3 boot.oat!0xa73e3
[JNIEnv] GetStringUTFChars 返回: lsp.statfs.data.blockSizeLong

[JNIEnv] 调用: NewStringUTF
  参数: 4096
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.statistics.common.DeviceConfig
[*] JSONObject.put called with key: a_id, value: fecb58963d1adc9d

[JNIEnv] 调用: NewStringUTF
  参数: a_id
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.pro.cj

[JNIEnv] 调用: GetStringUTFChars
  参数: P��
调用栈:
0xda7a9141 libopenjdk.so!Mock_getProperty+0x68,0x70e653e3 boot.oat!0xa73e3

[JNIEnv] 调用: GetStringUTFChars
  参数: ���
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.pro.ck

[JNIEnv] 调用: GetStringUTFChars
  参数: ���
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�9��9��D��Ur�g�q
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.pro.cl

[JNIEnv] 调用: GetStringUTFChars
  参数: й�
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �9��9��D��Ur�g�q
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.pro.cm

[JNIEnv] 调用: GetStringUTFChars
  参数: ��
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: a_id, value: fecb58963d1adc9d
[*] JSONObject.put called with key: os_v, value: 12

[JNIEnv] 调用: NewStringUTF
  参数: os_v
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.pro.cn

[JNIEnv] 调用: GetStringUTFChars
  参数: Ⱥ�
调用栈:
0xda7a9105 libopenjdk.so!Mock_getProperty+0x2c,0x70e653e3 boot.oat!0xa73e3
[JNIEnv] GetStringUTFChars 返回: lsp.statfs.data.freeBlocksLong

[JNIEnv] 调用: NewStringUTF
  参数: 13591666
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.pro.co

[JNIEnv] 调用: GetStringUTFChars
  参数: ���
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.pro.cp

[JNIEnv] 调用: GetStringUTFChars
  参数: (��
调用栈:
0xda7a9141 libopenjdk.so!Mock_getProperty+0x68,0x70e653e3 boot.oat!0xa73e3

[JNIEnv] 调用: GetStringUTFChars
  参数: ���
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.pro.cq

[JNIEnv] 调用: GetStringUTFChars
  参数: ���
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�A��A��D��Ur�g�q
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.pro.cr

[JNIEnv] 调用: GetStringUTFChars
  参数: ��
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �A��A��D��Ur�g�q
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.pro.cs

[JNIEnv] 调用: GetStringUTFChars
  参数: ���
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: os_v, value: 12

[JNIEnv] 调用: GetStringUTFChars
  参数: �L�p
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.pro.ct

[JNIEnv] 调用: GetStringUTFChars
  参数: ȼ�
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: android.os.ParcelFileDescriptor

[JNIEnv] 调用: GetStringUTFChars
  参数: 8	Rq���ph�r
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.pro.cu

[JNIEnv] 调用: GetStringUTFChars
  参数: ���
调用栈:
0xe723de83 libandroid_runtime.so!0x79e83,0x71fcdccb boot-framework.oat!0x199ccb
[JNIEnv] GetStringUTFChars 返回: debug.force_rtl

[JNIEnv] 调用: NewStringUTF
  参数: false
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.pro.cv

[JNIEnv] 调用: GetStringUTFChars
  参数: (��
调用栈:
0xe723e443 libandroid_runtime.so!0x7a443,0xe633e5b5 libc.so!_ZN16SystemProperties12ReadCallbackEPK9prop_infoPFvPvPKcS5_jES3_+0xa8,0xe723de97 libandroid_runtime.so!0x79e97,0x71fcdccb boot-framework.oat!0x199ccb
[*] JSONObject.put called with key: tz, value: 8

[JNIEnv] 调用: NewStringUTF
  参数: tz
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.pro.cw

[JNIEnv] 调用: GetStringUTFChars
  参数: X��
调用栈:
0xda7a9105 libopenjdk.so!Mock_getProperty+0x2c,0x70e653e3 boot.oat!0xa73e3
[JNIEnv] GetStringUTFChars 返回: lsp.statfs.data.freeBlocksLong.origin

[JNIEnv] 调用: NewStringUTF
  参数: 13539353
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.pro.cx

[JNIEnv] 调用: GetStringUTFChars
  参数: ���
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�T��T��D��Ur�g�q
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.pro.cy

[JNIEnv] 调用: GetStringUTFChars
  参数: 轙
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �T��T��D��Ur�g�q
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.pro.cz

[JNIEnv] 调用: GetStringUTFChars
  参数: x��
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: tz, value: 8
[*] JSONObject.put called with key: m, value: M2012K11AC

[JNIEnv] 调用: NewStringUTF
  参数: m
调用栈:
0xda7a9141 libopenjdk.so!Mock_getProperty+0x68,0x70e653e3 boot.oat!0xa73e3

[JNIEnv] 调用: GetStringUTFChars
  参数: p��
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.pro.d

[JNIEnv] 调用: GetStringUTFChars
  参数: ��
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.pro.da

[JNIEnv] 调用: GetStringUTFChars
  参数: ���
调用栈:
0xda7a9105 libopenjdk.so!Mock_getProperty+0x2c,0x70e653e3 boot.oat!0xa73e3
[JNIEnv] GetStringUTFChars 返回: lsp.statfs.data.availableBlocksLong.origin

[JNIEnv] 调用: NewStringUTF
  参数: 13396179
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.pro.e

[JNIEnv] 调用: GetStringUTFChars
  参数: 
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq`\�`\��D��Ur�g�q
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.pro.f

[JNIEnv] 调用: GetStringUTFChars
  参数: �
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: `\�`\��D��Ur�g�q
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.pro.g

[JNIEnv] 调用: GetStringUTFChars
  参数: �

[JNIEnv] 调用: NewStringUTF
  参数: SourceVersion
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: m, value: M2012K11AC

[JNIEnv] 调用: GetStringUTFChars
  参数: �ɚ

[JNIEnv] 调用: GetStringUTFChars
  参数: ��
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.pro.h

[JNIEnv] 调用: GetStringUTFChars
  参数: Ú
调用栈:
0xda7a9141 libopenjdk.so!Mock_getProperty+0x68,0x70e653e3 boot.oat!0xa73e3

[JNIEnv] 调用: GetStringUTFChars
  参数: 0ƥ
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.statistics.common.DeviceConfig

[JNIEnv] 调用: GetStringUTFChars
  参数: �|�
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/app_UApm/656436ae58a9eb5b0a11a63e

[JNIEnv] 调用: GetStringUTFChars
  参数: H	�
调用栈:
0xb72d04f3 libunity.so!0xcbf4f3

[JNIEnv] 调用: GetStringUTFChars
  参数: 8U�r ���&��R��N8q9������K��K�
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: android.content.Context

[JNIEnv] 调用: GetStringUTFChars
  参数: pOWq
调用栈:
0xda7a9105 libopenjdk.so!Mock_getProperty+0x2c,0x70e653e3 boot.oat!0xa73e3
[JNIEnv] GetStringUTFChars 返回: lsp.statfs.data.availableBlocksLong

[JNIEnv] 调用: NewStringUTF
  参数: 13558898
调用栈:
0xdc22e867 libicu_jni.so!0x8867,0x72677869 boot-core-icu4j.oat!0x2e869
[JNIEnv] GetStringUTFChars 返回: UTF-8

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x2156
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: 1009
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/app_UApm/656436ae58a9eb5b0a11a63e/ready

[JNIEnv] 调用: GetStringUTFChars
  参数: H	�
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.pro.i

[JNIEnv] 调用: GetStringUTFChars
  参数: HÚ
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/app_UApm/656436ae58a9eb5b0a11a63e/ready

[JNIEnv] 调用: GetStringUTFChars
  参数: H	�
调用栈:
0xda7a9105 libopenjdk.so!Mock_getProperty+0x2c,0x70e653e3 boot.oat!0xa73e3
[JNIEnv] GetStringUTFChars 返回: persist.radio.default.data

[JNIEnv] 调用: NewStringUTF
  参数: 0
调用栈:
0xda7a9141 libopenjdk.so!Mock_getProperty+0x68,0x70e653e3 boot.oat!0xa73e3

[JNIEnv] 调用: NewStringUTF
  参数: com.android.launcher3.uioverrides.QuickstepLauncher
调用栈:
0xda7a2c27 libopenjdk.so!Java_java_io_UnixFileSystem_getBooleanAttributes0+0x22,0x70e65c27 boot.oat!0xa7c27
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/app_UApm/656436ae58a9eb5b0a11a63e/ready

[JNIEnv] 调用: GetStringUTFChars
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/app_UApm/656436ae58a9eb5b0a11a63e/ready
Error: access violation accessing 0x19
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)

[JNIEnv] 调用: GetStringUTFChars
  参数: p
�
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.pro.j

[JNIEnv] 调用: GetStringUTFChars
  参数: xÚ
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: com.miui.home
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.pro.k

[JNIEnv] 调用: GetStringUTFChars
  参数: �Ú
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/app_UApm/656436ae58a9eb5b0a11a63e

[JNIEnv] 调用: GetStringUTFChars
  参数: �
�
调用栈:
0xda7a9141 libopenjdk.so!Mock_getProperty+0x68,0x70e653e3 boot.oat!0xa73e3
[*] JSONObject.put called with key: im, value: 

[JNIEnv] 调用: NewStringUTF
  参数: im
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.pro.l

[JNIEnv] 调用: GetStringUTFChars
  参数: �Ú
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/app_UApm/656436ae58a9eb5b0a11a63e/ready

[JNIEnv] 调用: GetStringUTFChars
  参数: �
�
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: com.android.launcher3
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/app_UApm/656436ae58a9eb5b0a11a63e/ready

[JNIEnv] 调用: GetStringUTFChars
  参数: �
�
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: com.android.launcher3
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.pro.m

[JNIEnv] 调用: GetStringUTFChars
  参数: Ě
调用栈:
0xda7a2c27 libopenjdk.so!Java_java_io_UnixFileSystem_getBooleanAttributes0+0x22,0x70e65c27 boot.oat!0xa7c27
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/app_UApm/656436ae58a9eb5b0a11a63e/ready

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x11
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/app_UApm/656436ae58a9eb5b0a11a63e/ready

[JNIEnv] 调用: GetStringUTFChars
  参数: �
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: com.android.launcher3
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.pro.n

[JNIEnv] 调用: GetStringUTFChars
  参数: 8Ě
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�s��s��D��Ur�g�q
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /system/system_ext/priv-app/TrebuchetQuickStep
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.pro.o

[JNIEnv] 调用: GetStringUTFChars
  参数: hĚ
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/app_UApm/656436ae58a9eb5b0a11a63e

[JNIEnv] 调用: GetStringUTFChars
  参数: ��
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �s��s��D��Ur�g�q
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /system/system_ext/priv-app/TrebuchetQuickStep
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.pro.p

[JNIEnv] 调用: GetStringUTFChars
  参数: �Ě
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/app_UApm/656436ae58a9eb5b0a11a63e/upload

[JNIEnv] 调用: GetStringUTFChars
  参数: ��
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: im, value: 

[JNIEnv] 调用: GetStringUTFChars
  参数: �t��gOqq 
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /system/system_ext/priv-app/TrebuchetQuickStep/TrebuchetQuickStep.apk
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.pro.q

[JNIEnv] 调用: GetStringUTFChars
  参数: �Ě
调用栈:
0xe723de83 libandroid_runtime.so!0x79e83,0x71fcdccb boot-framework.oat!0x199ccb
[JNIEnv] GetStringUTFChars 返回: net.hostname
[*] JSONObject.put called with key: hn, value: ad921d6048636625889553a3db49a4a

[JNIEnv] 调用: NewStringUTF
  参数: hn
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/app_UApm/656436ae58a9eb5b0a11a63e/upload

[JNIEnv] 调用: GetStringUTFChars
  参数: ��
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /system/system_ext/priv-app/TrebuchetQuickStep/TrebuchetQuickStep.apk
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.pro.r

[JNIEnv] 调用: GetStringUTFChars
  参数:  Ś
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.pro.s

[JNIEnv] 调用: GetStringUTFChars
  参数: PŚ
调用栈:
0xda7a2c27 libopenjdk.so!Java_java_io_UnixFileSystem_getBooleanAttributes0+0x22,0x70e65c27 boot.oat!0xa7c27
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/app_UApm/656436ae58a9eb5b0a11a63e/upload

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x15
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/app_UApm/656436ae58a9eb5b0a11a63e/upload
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /system/system_ext/priv-app/TrebuchetQuickStep/lib/arm64
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�����D��Ur�g�q
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.pro.t

[JNIEnv] 调用: GetStringUTFChars
  参数: �Ś
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /system/system_ext/priv-app/TrebuchetQuickStep/lib
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.pro.u

[JNIEnv] 调用: GetStringUTFChars
  参数: �Ś
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /system/product/overlay/TrebuchetOverlay.apk
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �����D��Ur�g�q
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.pro.v

[JNIEnv] 调用: GetStringUTFChars
  参数: �Ś
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /data/resource-cache/com.android.systemui-neutral-Bkw5.frro
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.pro.w

[JNIEnv] 调用: GetStringUTFChars
  参数: ƚ
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /data/resource-cache/com.android.systemui-accent-Mq6z.frro
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.pro.x

[JNIEnv] 调用: GetStringUTFChars
  参数: @ƚ
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /system/product/overlay/TrebuchetOverlay.apk
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.pro.y

[JNIEnv] 调用: GetStringUTFChars
  参数: pƚ
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: hn, value: ad921d6048636625889553a3db49a4a
[*] JSONObject.put called with key: s_v, value: 1.8.0

[JNIEnv] 调用: NewStringUTF
  参数: s_v
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: default:privapp:targetSdkVersion=31
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.pro.z

[JNIEnv] 调用: GetStringUTFChars
  参数: H��
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: :complete
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.process.a

[JNIEnv] 调用: GetStringUTFChars
  参数: x��
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /data/user/0/com.android.launcher3
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.process.b

[JNIEnv] 调用: GetStringUTFChars
  参数: ���
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.process.c

[JNIEnv] 调用: GetStringUTFChars
  参数: ��
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq8��8���D��Ur�g�q
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /data/user_de/0/com.android.launcher3
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: 8��8���D��Ur�g�q
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.process.DBFileTraversalUtil

[JNIEnv] 调用: GetStringUTFChars
  参数: `��
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /data/user/0/com.android.launcher3
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.process.UMProcessDBDatasSender

[JNIEnv] 调用: GetStringUTFChars
  参数: `��
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: com.android.launcher3.LauncherBackupAgent
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.process.UMProcessDBHelper

[JNIEnv] 调用: GetStringUTFChars
  参数: ��

[JNIEnv] 调用: NewStringUTF
  参数: SourceVersion
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: 12
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: s_v, value: 1.8.0
[*] JSONObject.put called with key: pkg, value: com.sytt.tzy

[JNIEnv] 调用: NewStringUTF
  参数: pkg
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: androidx.core.app.CoreComponentFactory
调用栈:
0xb72d04f3 libunity.so!0xcbf4f3

[JNIEnv] 调用: GetStringUTFChars
  参数: 8U�r ���&��R��N8q9������K��K�
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.vshelper.a

[JNIEnv] 调用: GetStringUTFChars
  参数: (	�
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: com.android.launcher3
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.vshelper.b

[JNIEnv] 调用: GetStringUTFChars
  参数: ��
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27
[*] JSONObject.put called with key: ky, value: AWXOPwx172d33a51236cfbc

[JNIEnv] 调用: NewStringUTF
  参数: ky
调用栈:
0xdc22e867 libicu_jni.so!0x8867,0x72677869 boot-core-icu4j.oat!0x2e869
[JNIEnv] GetStringUTFChars 返回: UTF-8

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x2306
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: 1009
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�����D��Ur�g�q
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.vshelper.PageNameMonitor

[JNIEnv] 调用: GetStringUTFChars
  参数: �*�
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �����D��Ur�g�q
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.ccg.a

[JNIEnv] 调用: GetStringUTFChars
  参数: 
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: pkg, value: com.sytt.tzy

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�����D��Ur�g�q
[*] JSONObject.put called with key: s_t, value: Android

[JNIEnv] 调用: NewStringUTF
  参数: s_t
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.ccg.b

[JNIEnv] 调用: GetStringUTFChars
  参数:  +�

[JNIEnv] 调用: GetStringUTFChars
  参数: ��
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.ccg.c

[JNIEnv] 调用: GetStringUTFChars
  参数: �ƚ
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: java.lang.String

[JNIEnv] 调用: GetStringUTFChars
  参数: @�
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.ccg.CcgAgent

[JNIEnv] 调用: GetStringUTFChars
  参数: �̚
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.ccg.ConfigListener

[JNIEnv] 调用: GetStringUTFChars
  参数:  ��
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �����D��Ur�g�q
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: java.lang.String

[JNIEnv] 调用: GetStringUTFChars
  参数: 0H����oU��oU�`�
�L���&����
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.common.a

[JNIEnv] 调用: GetStringUTFChars
  参数: �	�
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: umlog

[JNIEnv] 调用: GetStringUTFChars
  参数: ���oU��oU�`�
�L���&����
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: ky, value: AWXOPwx172d33a51236cfbc

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�����D��Ur�g�q
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.common.AnalyticsSdkVersion

[JNIEnv] 调用: GetStringUTFChars
  参数: h��

[JNIEnv] 调用: NewStringUTF
  参数: android.intent.action.BATTERY_CHANGED
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: Event: openUI--Waiting
[*] JSONObject.put called with key: id, value: openUI

[JNIEnv] 调用: NewStringUTF
  参数: id
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.common.b

[JNIEnv] 调用: GetStringUTFChars
  参数: @��
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: GetStringUTFChars
  参数: `
�
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �����D��Ur�g�q
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.common.ISysListener

[JNIEnv] 调用: GetStringUTFChars
  参数: (��
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: s_t, value: Android

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�	��	��D��Ur�g�q�
[*] JSONObject.put called with key: uid, value: 89de5ac2-c86f-4e8a-b3f2-1be5bb16ae98

[JNIEnv] 调用: NewStringUTF
  参数: uid
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.BuildConfig

[JNIEnv] 调用: GetStringUTFChars
  参数: PL�
调用栈:
0xa54145e0 libcrashsdk.so!0x435e0,0xa53d811c libcrashsdk.so!0x711c,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50acc50 libart.so!nterp_helper+0x7a0,0xe50ac4ec libart.so!nterp_helper+0x3c,0xe50ac4ec libart.so!nterp_helper+0x3c,0x720f285f boot-framework.oat!0x2be85f
[JNIEnv] GetStringUTFChars 返回: level: 98
scale: 100
health: 2 (Good)
pluged: 1 (AC charger)
status: 5 (Full)
voltage: 4308
temperature: 295
technology: Li-poly
battery low: false

调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �	��	��D��Ur�g�q�
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.config.a

[JNIEnv] 调用: GetStringUTFChars
  参数: �L�
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: et, value: 2

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq8�8��D��Ur�g�q
[*] JSONObject.put called with key: ui, value: 1496280065

[JNIEnv] 调用: NewStringUTF
  参数: ui
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: 8�8��D��Ur�g�q
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.config.b

[JNIEnv] 调用: GetStringUTFChars
  参数: �L�
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: id, value: openUI

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�����D��Ur�g�q
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.config.c

[JNIEnv] 调用: GetStringUTFChars
  参数: �M�
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �����D��Ur�g�q
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.config.d

[JNIEnv] 调用: GetStringUTFChars
  参数: �N�
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: uid, value: 89de5ac2-c86f-4e8a-b3f2-1be5bb16ae98

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�����D��Ur�g�q�|Wq�D�
[*] JSONObject.put called with key: s_id, value: umeng

[JNIEnv] 调用: NewStringUTF
  参数: s_id
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.config.e

[JNIEnv] 调用: GetStringUTFChars
  参数: �N�
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �����D��Ur�g�q�|Wq�D�
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.config.f

[JNIEnv] 调用: GetStringUTFChars
  参数: H��
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: ts, value: 1753607931595

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq@�@��D��Ur�g�q���
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.config.FieldManager

[JNIEnv] 调用: GetStringUTFChars
  参数: �N�
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: @�@��D��Ur�g�q���
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.config.g

[JNIEnv] 调用: GetStringUTFChars
  参数: ��
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: __t, value: 2049

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�����D��Ur�g�q
[*] JSONObject.put called with key: openUI, value: Waiting

[JNIEnv] 调用: NewStringUTF
  参数: openUI
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �����D��Ur�g�q
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.debug.D

[JNIEnv] 调用: GetStringUTFChars
  参数:  �
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: ui, value: 1496280065

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq0��0���D��Ur�g�q
[*] JSONObject.put called with key: mc, value: 02:00:00:00:00:00

[JNIEnv] 调用: NewStringUTF
  参数: mc
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: 0��0���D��Ur�g�q
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.debug.E

[JNIEnv] 调用: GetStringUTFChars
  参数: P�
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: s_id, value: umeng
[*] JSONObject.put called with key: a_v, value: 1.0.0

[JNIEnv] 调用: NewStringUTF
  参数: a_v
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.debug.I

[JNIEnv] 调用: GetStringUTFChars
  参数: �:�
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �XqP�P��D��Ur�g�q
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.debug.SelfChecker

[JNIEnv] 调用: GetStringUTFChars
  参数: 6�
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: P�P��D��Ur�g�q
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.debug.UInterface

[JNIEnv] 调用: GetStringUTFChars
  参数: ࢚
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: mc, value: 02:00:00:00:00:00

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�%��%��D��Ur�g�q
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.debug.UMLog

[JNIEnv] 调用: GetStringUTFChars
  参数: ���
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.debug.UMLogCommon

[JNIEnv] 调用: GetStringUTFChars
  参数: G�
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �%��%��D��Ur�g�q
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.debug.UMLogUtils

[JNIEnv] 调用: GetStringUTFChars
  参数: �
�
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: openUI, value: Waiting

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq8��8���D��Ur�g�q
[*] JSONObject.put called with key: __i, value: 267A00E061645180845BBD7794F3239E

[JNIEnv] 调用: NewStringUTF
  参数: __i
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: 8��8���D��Ur�g�q
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.debug.UMRTLog

[JNIEnv] 调用: GetStringUTFChars
  参数:  �
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: a_v, value: 1.0.0

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�����D��Ur�g�q���p
[*] JSONObject.put called with key: a_n, value: 神域天堂

[JNIEnv] 调用: NewStringUTF
  参数: a_n
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.debug.W

[JNIEnv] 调用: GetStringUTFChars
  参数: �
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �����D��Ur�g�q���p
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.framework.a

[JNIEnv] 调用: GetStringUTFChars
  参数: `q�
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: ut, value: 0

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�.��.��D��Ur�g�q
[*] JSONObject.put called with key: mid, value: 0

[JNIEnv] 调用: NewStringUTF
  参数: mid
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �.��.��D��Ur�g�q
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.framework.UMEnvelopeBuild

[JNIEnv] 调用: GetStringUTFChars
  参数: ࿙
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: __i, value: 267A00E061645180845BBD7794F3239E

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq@��@���D��Ur�g�q
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.framework.UMFrUtils

[JNIEnv] 调用: GetStringUTFChars
  参数: �
�
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: @��@���D��Ur�g�q
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.framework.UMLogDataProtocol

[JNIEnv] 调用: GetStringUTFChars
  参数: h��
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: a_n, value: 神域天堂

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�/��/��D��Ur�g�qp��
[*] JSONObject.put called with key: c, value: CN

[JNIEnv] 调用: NewStringUTF
  参数: c
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �/��/��D��Ur�g�qp��
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.framework.UMModuleRegister

[JNIEnv] 调用: GetStringUTFChars
  参数: 0��
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: ds, value: 0
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�����D��Ur�g�q
[*] JSONObject.put called with key: pn, value: com.sytt.tzy

[JNIEnv] 调用: NewStringUTF
  参数: pn
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.framework.UMSenderStateNotify

[JNIEnv] 调用: GetStringUTFChars
  参数: ՙ
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �����D��Ur�g�q
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.framework.UMWorkDispatch

[JNIEnv] 调用: GetStringUTFChars
  参数: �C�
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: mid, value: 0
[*] JSONObject.put called with key: cch, value: wxop

[JNIEnv] 调用: NewStringUTF
  参数: cch
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq0ô0ô�D��Ur�g�q
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: 0ô0ô�D��Ur�g�q
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.internal.a

[JNIEnv] 调用: GetStringUTFChars
  参数: D�
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: c, value: CN

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq8�8��D��Ur�g�q
[*] JSONObject.put called with key: ak, value: 656436ae58a9eb5b0a11a63e

[JNIEnv] 调用: NewStringUTF
  参数: ak
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.internal.b

[JNIEnv] 调用: GetStringUTFChars
  参数: `D�
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: 8�8��D��Ur�g�q
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.internal.c

[JNIEnv] 调用: GetStringUTFChars
  参数: ���
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: pn, value: com.sytt.tzy

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�$��$��D��Ur�g�q

[JNIEnv] 调用: NewStringUTF
  参数: accountServerLoginContent
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.internal.crash.a

[JNIEnv] 调用: GetStringUTFChars
  参数: 0
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �$��$��D��Ur�g�q
调用栈:
0xb72d04f3 libunity.so!0xcbf4f3

[JNIEnv] 调用: GetStringUTFChars
  参数: 0H��9�loU�XoU�`�
�L���
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.internal.crash.UMCrashManager

[JNIEnv] 调用: GetStringUTFChars
  参数: �D�
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: cch, value: wxop

[JNIEnv] 调用: GetStringUTFChars
  参数: �XqP%�P%��D��Ur�g�q8%��
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.internal.d

[JNIEnv] 调用: GetStringUTFChars
  参数: 0��
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: P%�P%��D��Ur�g�q8%��
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.internal.UMInternalManagerAgent

[JNIEnv] 调用: GetStringUTFChars
  参数: ��
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: idx, value: 1001

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�˴�˴�D��Ur�g�q
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.internal.UMOplus

[JNIEnv] 调用: GetStringUTFChars
  参数: ���
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: umlog

[JNIEnv] 调用: GetStringUTFChars
  参数: �9�loU�XoU�`�
�L���
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �˴�˴�D��Ur�g�q
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.internal.utils.a

[JNIEnv] 调用: GetStringUTFChars
  参数: H3�
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: ak, value: 656436ae58a9eb5b0a11a63e

[JNIEnv] 调用: GetStringUTFChars
  参数: �ɚ

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�%��%��D��Ur�g�q��Rq��e
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.internal.utils.ApplicationLayerUtilAgent

[JNIEnv] 调用: GetStringUTFChars
  参数: ��
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.statistics.common.DeviceConfig

[JNIEnv] 调用: NewStringUTF
  参数: com.android.vending
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: Event: openUI--LoginInputWin
[*] JSONObject.put called with key: id, value: openUI

[JNIEnv] 调用: NewStringUTF
  参数: id
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �%��%��D��Ur�g�q��Rq��e
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.internal.utils.b

[JNIEnv] 调用: GetStringUTFChars
  参数: H��
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: 20.7.23-all [2] [PR] 320711808
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.internal.utils.c

[JNIEnv] 调用: GetStringUTFChars
  参数: ���
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: com.android.vending
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: si, value: 1696123386

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq&�&��D��Ur�g�q�|Wq�D�
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.internal.utils.d

[JNIEnv] 调用: GetStringUTFChars
  参数: ���
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: com.android.vending
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: &�&��D��Ur�g�q�|Wq�D�
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: GetStringUTFChars
  参数: ���
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: ts, value: 1753607877

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�&��&��D��Ur�g�qp&�
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.android.org.conscrypt.OpenSSLRSAPublicKey

[JNIEnv] 调用: GetStringUTFChars
  参数: x�
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �&��&��D��Ur�g�qp&�
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: java.math.BigInteger

[JNIEnv] 调用: GetStringUTFChars
  参数: @�
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: dts, value: 0

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�&��&��D��Ur�g�q���p
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: java.lang.Number

[JNIEnv] 调用: GetStringUTFChars
  参数: X��
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �&��&��D��Ur�g�q���p
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: [B
[*] JSONObject.put called with key: gd, value: 

[JNIEnv] 调用: NewStringUTF
  参数: gd
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: ut, value: 0

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�C��C��D��Ur�g�q
[*] JSONObject.put called with key: cfg, value: {"1":{},"2":{}}

[JNIEnv] 调用: NewStringUTF
  参数: cfg
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �C��C��D��Ur�g�q
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.internal.utils.e

[JNIEnv] 调用: GetStringUTFChars
  参数: ���
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: id, value: openUI

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�������D��Ur�g�q

[JNIEnv] 调用: NewStringUTF
  参数: android.intent.action.BATTERY_CHANGED
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.internal.utils.f

[JNIEnv] 调用: GetStringUTFChars
  参数: (
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �������D��Ur�g�q
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: gd, value: 

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq@D�@D��D��Ur�g�q�|Wq�D�
[*] JSONObject.put called with key: aaid, value: AV5Cu-QsVOYzKtbOt49QLtLurU_d3uzdfWGvKB0VG8BIWmNK2gwKBREWw8TA8zqbglTDKSix-ARO_qaB-dCIS-ST6hlRk0sJMItIm61AF4VcWfv36e8=

[JNIEnv] 调用: NewStringUTF
  参数: aaid
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.internal.utils.g

[JNIEnv] 调用: GetStringUTFChars
  参数: `
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: @D�@D��D��Ur�g�q�|Wq�D�
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.internal.utils.h

[JNIEnv] 调用: GetStringUTFChars
  参数: �
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: ts, value: 1753607935240

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�D��D��D��Ur�g�q���
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.internal.utils.i

[JNIEnv] 调用: GetStringUTFChars
  参数: @�
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �D��D��D��Ur�g�q���
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: __t, value: 2049

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xqh0�h0��D��Ur�g�q
[*] JSONObject.put called with key: openUI, value: LoginInputWin

[JNIEnv] 调用: NewStringUTF
  参数: openUI
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.internal.utils.InfoPreferenceAgent

[JNIEnv] 调用: GetStringUTFChars
  参数: �
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: h0�h0��D��Ur�g�q
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.internal.utils.j

[JNIEnv] 调用: GetStringUTFChars
  参数: �
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: cfg, value: {"1":{},"2":{}}

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�1��1��D��Ur�g�q�1�
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.internal.utils.k

[JNIEnv] 调用: GetStringUTFChars
  参数: �9�
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �1��1��D��Ur�g�q�1�
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.internal.utils.UMInternalUtilsAgent

[JNIEnv] 调用: GetStringUTFChars
  参数: PU�
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: ncts, value: 1

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�������D��Ur�g�q
[*] JSONObject.put called with key: sr, value: 1080*1920

[JNIEnv] 调用: NewStringUTF
  参数: sr
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �������D��Ur�g�q
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.listener.OnGetOaidListener

[JNIEnv] 调用: GetStringUTFChars
  参数: 8��
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: aaid, value: AV5Cu-QsVOYzKtbOt49QLtLurU_d3uzdfWGvKB0VG8BIWmNK2gwKBREWw8TA8zqbglTDKSix-ARO_qaB-dCIS-ST6hlRk0sJMItIm61AF4VcWfv36e8=

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�M��M��D��Ur�g�q
[*] JSONObject.put called with key: uabc, value: {"model":"M2012K11AC","zts":1753607531054}

[JNIEnv] 调用: NewStringUTF
  参数: uabc
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �M��M��D��Ur�g�q
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.service.UMGlobalContext

[JNIEnv] 调用: GetStringUTFChars
  参数: ��
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.stateless.a

[JNIEnv] 调用: GetStringUTFChars
  参数:  �
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: openUI, value: LoginInputWin

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�:��:��D��Ur�g�q
[*] JSONObject.put called with key: __i, value: 267A00E061645180845BBD7794F3239E

[JNIEnv] 调用: NewStringUTF
  参数: __i
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �:��:��D��Ur�g�q
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.stateless.b

[JNIEnv] 调用: GetStringUTFChars
  参数: P�
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: sr, value: 1080*1920
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�V��V��D��Ur�g�q
[*] JSONObject.put called with key: dpi, value: 397.565*399.737

[JNIEnv] 调用: NewStringUTF
  参数: dpi
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �V��V��D��Ur�g�q
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.stateless.c

[JNIEnv] 调用: GetStringUTFChars
  参数: ��
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: __i, value: 267A00E061645180845BBD7794F3239E

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xqh��h���D��Ur�g�q
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.stateless.d

[JNIEnv] 调用: GetStringUTFChars
  参数: 
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.stateless.UMSLEnvelopeBuild

[JNIEnv] 调用: GetStringUTFChars
  参数: ��
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: h��h���D��Ur�g�q
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.statistics.a

[JNIEnv] 调用: GetStringUTFChars
  参数: ��
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.statistics.AnalyticsConstants

[JNIEnv] 调用: GetStringUTFChars
  参数: �
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: uabc, value: {"model":"M2012K11AC","zts":1753607531054}

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�W��W��D��Ur�g�qp��
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.statistics.b

[JNIEnv] 调用: GetStringUTFChars
  参数: 8�
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �W��W��D��Ur�g�qp��
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.statistics.c

[JNIEnv] 调用: GetStringUTFChars
  参数: �њ
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: ds, value: 0

[JNIEnv] 调用: GetStringUTFChars
  参数: �XqpD�pD��D��Ur�g�q
[*] JSONObject.put called with key: pn, value: com.sytt.tzy

[JNIEnv] 调用: NewStringUTF
  参数: pn
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: pD�pD��D��Ur�g�q
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.statistics.common.a

[JNIEnv] 调用: GetStringUTFChars
  参数:  Қ
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: dpi, value: 397.565*399.737

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�������D��Ur�g�qH��

[JNIEnv] 调用: GetStringUTFChars
  参数: H�
[*] JSONObject.put called with key: bs, value: ea:f3:69:d5:21:cc

[JNIEnv] 调用: NewStringUTF
  参数: bs
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.statistics.common.b

[JNIEnv] 调用: GetStringUTFChars
  参数: XҚ
调用栈:
0xe723df49 libandroid_runtime.so!0x79f49,0x71fc0ddd boot-framework.oat!0x18cddd
[JNIEnv] GetStringUTFChars 返回: log.looper.10150.WifiManagerThread.slow
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �������D��Ur�g�qH��
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.statistics.common.c

[JNIEnv] 调用: GetStringUTFChars
  参数: �Қ
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: vpn_pxy, value: false

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq `� `��D��Ur�g�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数:  `� `��D��Ur�g�q
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.statistics.common.d

[JNIEnv] 调用: GetStringUTFChars
  参数: Pҙ
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: pn, value: com.sytt.tzy

[JNIEnv] 调用: GetStringUTFChars
  参数: �XqPe�Pe��D��Ur�g�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: Pe�Pe��D��Ur�g�q
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.statistics.common.DataHelper

[JNIEnv] 调用: GetStringUTFChars
  参数: �ɚ
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: bs, value: ea:f3:69:d5:21:cc

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�������D��Ur�g�q���

[JNIEnv] 调用: GetStringUTFChars
  参数: 8U�rp��
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.statistics.common.DeviceConfig

[JNIEnv] 调用: GetStringUTFChars
  参数: p��
调用栈:
0xdc22e867 libicu_jni.so!0x8867,0x72677869 boot-core-icu4j.oat!0x2e869
[JNIEnv] GetStringUTFChars 返回: UTF-8
[*] JSONObject.put called with key: ss, value: "b306bdba-b"

[JNIEnv] 调用: NewStringUTF
  参数: ss
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.statistics.common.DeviceTypeEnum

[JNIEnv] 调用: GetStringUTFChars
  参数: ��

[JNIEnv] 调用: NewStringUTF
  参数: allUser
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �������D��Ur�g�q���
调用栈:
0xb72d04f3 libunity.so!0xcbf4f3
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.statistics.common.HelperUtils

[JNIEnv] 调用: GetStringUTFChars
  参数: (w�
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: wifi_pxy, value: false

[JNIEnv] 调用: GetStringUTFChars
  参数: xF�
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�q��q��D��Ur�g�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �q��q��D��Ur�g�q
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/files
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.statistics.common.MLog

[JNIEnv] 调用: GetStringUTFChars
  参数: �<�
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: ss, value: "b306bdba-b"

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq
[*] JSONObject.put called with key: wf, value: {"bs":"ea:f3:69:d5:21:cc","ss":"\"b306bdba-b\""}

[JNIEnv] 调用: NewStringUTF
  参数: wf
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: 
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.statistics.common.ReportPolicy

[JNIEnv] 调用: GetStringUTFChars
  参数: ϙ
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: double, value: false
[*] JSONObject.put called with key: anti, value: {"vpn_pxy":false,"wifi_pxy":false,"double":false}

[JNIEnv] 调用: NewStringUTF
  参数: anti
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.statistics.common.ULog

[JNIEnv] 调用: GetStringUTFChars
  参数: �O�
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.statistics.idtracking.a

[JNIEnv] 调用: GetStringUTFChars
  参数: 0P�
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.statistics.idtracking.b

[JNIEnv] 调用: GetStringUTFChars
  参数: pP�
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�|��|��D��Ur�g�q
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.statistics.idtracking.c

[JNIEnv] 调用: GetStringUTFChars
  参数: �P�
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �|��|��D��Ur�g�q
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.statistics.idtracking.d

[JNIEnv] 调用: GetStringUTFChars
  参数: �P�
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: wf, value: {"bs":"ea:f3:69:d5:21:cc","ss":"\"b306bdba-b\""}

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�������D��Ur�g�q
[*] JSONObject.put called with key: sen, value: 1,35,2,14,4,16,8,5,5,9,10,11,18,19,17,15,20,3,22,18,19,33171007,33171039,33171039,33171031,33171045,33171045,33171085,33171089,29,29,27,27,33171038,33171036,33171038,33171032,33171036,33171055,33171055,33171030,33171032,33171030,33171097,30,33171097,30,33171027,33171029,33171027,33171088,33171088,33171029

[JNIEnv] 调用: NewStringUTF
  参数: sen
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �������D��Ur�g�q
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.statistics.idtracking.e

[JNIEnv] 调用: GetStringUTFChars
  参数: �Ϛ
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: anti, value: {"vpn_pxy":false,"wifi_pxy":false,"double":false}

[JNIEnv] 调用: GetStringUTFChars
  参数: 8U�r
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.statistics.idtracking.Envelope

[JNIEnv] 调用: GetStringUTFChars
  参数: 0Q�

[JNIEnv] 调用: GetStringUTFChars
  参数: ��
调用栈:
0xdc22e867 libicu_jni.so!0x8867,0x72677869 boot-core-icu4j.oat!0x2e869
[JNIEnv] GetStringUTFChars 返回: UTF-8

[JNIEnv] 调用: GetStringUTFChars
  参数: ���P��
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.statistics.idtracking.f

[JNIEnv] 调用: GetStringUTFChars
  参数: pQ�
调用栈:
0xda7de4d5 libjavacore.so!0x174d5,0x711667f3 boot-core-libart.oat!0x107f3
[JNIEnv] GetStringUTFChars 返回: utoken.umeng.com

[JNIEnv] 调用: NewStringUTF
  参数: android_getaddrinfo
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.statistics.idtracking.g

[JNIEnv] 调用: GetStringUTFChars
  参数: @R�
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/app_UApm/656436ae58a9eb5b0a11a63e

[JNIEnv] 调用: GetStringUTFChars
  参数: 
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.statistics.idtracking.h

[JNIEnv] 调用: GetStringUTFChars
  参数: �R�
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/app_UApm/656436ae58a9eb5b0a11a63e/ready

[JNIEnv] 调用: GetStringUTFChars
  参数: 
调用栈:
0xda7e783d libjavacore.so!0x2083d,0xda7de5ad libjavacore.so!0x175ad,0x711667f3 boot-core-libart.oat!0x107f3

[JNIEnv] 调用: GetStringUTFChars
  参数: ���h��
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/app_UApm/656436ae58a9eb5b0a11a63e/ready

[JNIEnv] 调用: GetStringUTFChars
  参数: 
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�������D��Ur�g�q
调用栈:
0xda7de4d5 libjavacore.so!0x174d5,0x711667f3 boot-core-libart.oat!0x107f3
[JNIEnv] GetStringUTFChars 返回: utoken.umeng.com
调用栈:
0xda7a2c27 libopenjdk.so!Java_java_io_UnixFileSystem_getBooleanAttributes0+0x22,0x70e65c27 boot.oat!0xa7c27
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/app_UApm/656436ae58a9eb5b0a11a63e/ready

[JNIEnv] 调用: GetStringUTFChars
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/app_UApm/656436ae58a9eb5b0a11a63e/ready
Error: access violation accessing 0x19
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)

[JNIEnv] 调用: GetStringUTFChars
  参数: (�
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.statistics.idtracking.i

[JNIEnv] 调用: GetStringUTFChars
  参数: (��
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/app_UApm/656436ae58a9eb5b0a11a63e

[JNIEnv] 调用: GetStringUTFChars
  参数: ��
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.statistics.idtracking.ImprintHandler

[JNIEnv] 调用: GetStringUTFChars
  参数: �R�

[JNIEnv] 调用: NewStringUTF
  参数: connect
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/app_UApm/656436ae58a9eb5b0a11a63e/ready

[JNIEnv] 调用: GetStringUTFChars
  参数: ��
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.statistics.idtracking.j

[JNIEnv] 调用: GetStringUTFChars
  参数: p��
调用栈:
0xda7df827 libjavacore.so!0x18827,0x71166873 boot-core-libart.oat!0x10873
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �������D��Ur�g�q

[JNIEnv] 调用: GetStringUTFChars
[JNIEnv] GetStringUTFChars 返回: TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
Error: access violation accessing 0x11
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x15
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x19
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x11
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x15
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x19
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x11
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x15
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x19
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x11
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x15
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: TLS_RSA_WITH_AES_128_GCM_SHA256

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x19
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: TLS_RSA_WITH_AES_256_GCM_SHA384

[JNIEnv] 调用: GetStringUTFChars
[JNIEnv] GetStringUTFChars 返回: TLS_RSA_WITH_AES_128_CBC_SHA

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x11
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
Error: access violation accessing 0x15
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: TLS_RSA_WITH_AES_256_CBC_SHA

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x19
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x11
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x15
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x19
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x11
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x15
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x19
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x11
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/app_UApm/656436ae58a9eb5b0a11a63e/ready

[JNIEnv] 调用: GetStringUTFChars
  参数: ��

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x15
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x19
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x11
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: TLS_RSA_WITH_AES_128_GCM_SHA256

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x15
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: TLS_RSA_WITH_AES_256_GCM_SHA384

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x19
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: TLS_RSA_WITH_AES_128_CBC_SHA

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x11
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: TLS_RSA_WITH_AES_256_CBC_SHA

[JNIEnv] 调用: GetStringUTFChars
  参数: �
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: sen, value: 1,35,2,14,4,16,8,5,5,9,10,11,18,19,17,15,20,3,22,18,19,33171007,33171039,33171039,33171031,33171045,33171045,33171085,33171089,29,29,27,27,33171038,33171036,33171038,33171032,33171036,33171055,33171055,33171030,33171032,33171030,33171097,30,33171097,30,33171027,33171029,33171027,33171088,33171088,33171029
[*] JSONObject.put called with key: pcn, value: com.sytt.tzy

[JNIEnv] 调用: NewStringUTF
  参数: pcn
调用栈:
0xda7a2c27 libopenjdk.so!Java_java_io_UnixFileSystem_getBooleanAttributes0+0x22,0x70e65c27 boot.oat!0xa7c27
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/app_UApm/656436ae58a9eb5b0a11a63e/ready

[JNIEnv] 调用: GetStringUTFChars
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/app_UApm/656436ae58a9eb5b0a11a63e/ready
Error: access violation accessing 0x11
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)

[JNIEnv] 调用: GetStringUTFChars
  参数: ��

[JNIEnv] 调用: NewStringUTF
  参数: android.intent.action.BATTERY_CHANGED
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.statistics.internal.a

[JNIEnv] 调用: GetStringUTFChars
  参数: ���
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/app_UApm/656436ae58a9eb5b0a11a63e

[JNIEnv] 调用: GetStringUTFChars
  参数: P�
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �XqБ�Б��D��Ur�g�q
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: GetStringUTFChars
  参数: 0�
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.statistics.internal.b

[JNIEnv] 调用: GetStringUTFChars
  参数: ���

[JNIEnv] 调用: NewStringUTF
  参数: null
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/app_UApm/656436ae58a9eb5b0a11a63e/upload

[JNIEnv] 调用: GetStringUTFChars
  参数: P�
调用栈:
0xd04307ed libjavacrypto.so!0x287ed,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50acc50 libart.so!nterp_helper+0x7a0,0xe50acfa4 libart.so!nterp_helper+0xaf4,0xe50acfa4 libart.so!nterp_helper+0xaf4,0xe50acfa4 libart.so!nterp_helper+0xaf4,0x711d6317 boot-okhttp.oat!0x33317
[JNIEnv] GetStringUTFChars 返回: utoken.umeng.com
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/app_UApm/656436ae58a9eb5b0a11a63e/upload

[JNIEnv] 调用: GetStringUTFChars
  参数: P�
调用栈:
0xa54145e0 libcrashsdk.so!0x435e0,0xa53d811c libcrashsdk.so!0x711c,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50acc50 libart.so!nterp_helper+0x7a0,0xe50ac4ec libart.so!nterp_helper+0x3c,0xe50ac4ec libart.so!nterp_helper+0x3c,0x720f285f boot-framework.oat!0x2be85f
[JNIEnv] GetStringUTFChars 返回: level: 98
scale: 100
health: 2 (Good)
pluged: 1 (AC charger)
status: 5 (Full)
voltage: 4381
temperature: 295
technology: Li-poly
battery low: false

调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.statistics.internal.c

[JNIEnv] 调用: GetStringUTFChars
  参数: P��
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.statistics.internal.d

[JNIEnv] 调用: GetStringUTFChars
  参数: ���
调用栈:
0xda7a2c27 libopenjdk.so!Java_java_io_UnixFileSystem_getBooleanAttributes0+0x22,0x70e65c27 boot.oat!0xa7c27
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/app_UApm/656436ae58a9eb5b0a11a63e/upload

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x15
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/app_UApm/656436ae58a9eb5b0a11a63e/upload
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: Б�Б��D��Ur�g�q

[JNIEnv] 调用: NewStringUTF
  参数: gameValue
调用栈:
0xe5407303 libart.so!_ZN3art6Thread10CreatePeerEPKcbP8_jobject+0x4a,0xe5404f2b libart.so!_ZN3art6Thread6AttachEPKcbP8_jobjectb+0x16a,0xe53c7d4b libart.so!_ZN3art7Runtime19AttachCurrentThreadEPKcbP8_jobjectb+0x32,0xe52655e3 libart.so!_ZN3art3JII27AttachCurrentThreadInternalEP7_JavaVMPP7_JNIEnvPvb+0xea,0xb4f36e69 libNetHTProtect.so!0xf6e69,0xb4f36f15 libNetHTProtect.so!0xf6f15,0xb4f37075 libNetHTProtect.so!0xf7075,0xb4fcfe29 libNetHTProtect.so!0x18fe29,0xb4fe49fb libNetHTProtect.so!0x1a49fb,0xb4fe3af3 libNetHTProtect.so!0x1a3af3,0xb4fe3077 libNetHTProtect.so!0x1a3077,0xb4f90935 libNetHTProtect.so!0x150935,0xb4f90af3 libNetHTProtect.so!0x150af3,0xb4fb876b libNetHTProtect.so!0x17876b,0xb4fb79bf libNetHTProtect.so!0x1779bf,0xb4fb7827 libNetHTProtect.so!0x177827

[JNIEnv] 调用: NewStringUTF
  参数: com.netease.htprotect.poly.a
调用栈:
0xb72d04f3 libunity.so!0xcbf4f3

[JNIEnv] 调用: GetStringUTFChars
  参数: 0H�0f��fU��fU�`�
�L���e��e�
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.statistics.internal.PreferenceWrapper

[JNIEnv] 调用: GetStringUTFChars
  参数:  O�
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: pcn, value: com.sytt.tzy
[*] JSONObject.put called with key: osn, value: 12

[JNIEnv] 调用: NewStringUTF
  参数: osn
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: umlog

[JNIEnv] 调用: GetStringUTFChars
  参数: 0f��fU��fU�`�
�L���e��e�
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�����D��Ur�g�q
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.statistics.internal.StatTracer

[JNIEnv] 调用: GetStringUTFChars
  参数: �
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.statistics.internal.UMImprintChangeCallback

[JNIEnv] 调用: GetStringUTFChars
  参数: `��
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: Event: ClickWX--null
[*] JSONObject.put called with key: id, value: ClickWX

[JNIEnv] 调用: NewStringUTF
  参数: id
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �����D��Ur�g�q
调用栈:
0xb4f38341 libNetHTProtect.so!0xf8341,0xb4edce8f libNetHTProtect.so!0x9ce8f,0xb4edc187 libNetHTProtect.so!0x9c187,0xb4fd006b libNetHTProtect.so!0x19006b,0xb4fe49fb libNetHTProtect.so!0x1a49fb,0xb4fe3af3 libNetHTProtect.so!0x1a3af3,0xb4fe3077 libNetHTProtect.so!0x1a3077,0xb4f90935 libNetHTProtect.so!0x150935,0xb4f90af3 libNetHTProtect.so!0x150af3,0xb4fb876b libNetHTProtect.so!0x17876b,0xb4fb79bf libNetHTProtect.so!0x1779bf,0xb4fb7827 libNetHTProtect.so!0x177827,0xb4fb777d libNetHTProtect.so!0x17777d,0xe6387139 libc.so!_ZL15__pthread_startPv+0x2a,0xe633fd57 libc.so!__start_thread+0x20

[JNIEnv] 调用: GetStringUTFChars
  参数: �
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.statistics.internal.UMImprintPreProcessCallback

[JNIEnv] 调用: GetStringUTFChars
  参数: Xv�
调用栈:
0xe534c0fd libart.so!_ZN3artL29VMClassLoader_findLoadedClassEP7_JNIEnvP7_jclassP8_jobjectP8_jstring+0x40,0x711656bb boot-core-libart.oat!0xf6bb
[JNIEnv] GetStringUTFChars 返回: com.netease.htprotect.poly.a

[JNIEnv] 调用: GetStringUTFChars
  参数: �
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.statistics.noise.ABTest

[JNIEnv] 调用: GetStringUTFChars
  参数: �ߚ
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: osn, value: 12
[*] JSONObject.put called with key: av, value: 1.0.0

[JNIEnv] 调用: NewStringUTF
  参数: av
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.statistics.noise.Defcon

[JNIEnv] 调用: GetStringUTFChars
  参数: ���
调用栈:
0xe534c0fd libart.so!_ZN3artL29VMClassLoader_findLoadedClassEP7_JNIEnvP7_jclassP8_jobjectP8_jstring+0x40,0x711656bb boot-core-libart.oat!0xf6bb
[JNIEnv] GetStringUTFChars 返回: com.netease.htprotect.poly.a

[JNIEnv] 调用: GetStringUTFChars
  参数: �
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�o��o��D��Ur�g�q
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.netease.htprotect.poly.a

[JNIEnv] 调用: GetStringUTFChars
  参数: �
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.statistics.noise.ImLatent

[JNIEnv] 调用: GetStringUTFChars
  参数: H�
调用栈:
0xe533390b libart.so!_ZN3artL25DexFile_defineClassNativeEP7_JNIEnvP7_jclassP8_jstringP8_jobjectS7_S7_+0x52,0x711641b3 boot-core-libart.oat!0xe1b3
[JNIEnv] GetStringUTFChars 返回: com.netease.htprotect.poly.a

[JNIEnv] 调用: GetStringUTFChars
  参数: �
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �o��o��D��Ur�g�q
调用栈:
0xe533390b libart.so!_ZN3artL25DexFile_defineClassNativeEP7_JNIEnvP7_jclassP8_jstringP8_jobjectS7_S7_+0x52,0x711641b3 boot-core-libart.oat!0xe1b3
[JNIEnv] GetStringUTFChars 返回: com.netease.htprotect.poly.a
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: id, value: ClickWX

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq8��8���D��Ur�g�q

[JNIEnv] 调用: NewStringUTF
  参数: ECDHE_ECDSA
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.statistics.proto.a

[JNIEnv] 调用: GetStringUTFChars
  参数: ��
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: 8��8���D��Ur�g�q
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.statistics.proto.b

[JNIEnv] 调用: GetStringUTFChars
  参数: 
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: av, value: 1.0.0

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�p��p��D��Ur�g�q�|Wq�D�
[*] JSONObject.put called with key: ch, value: Wechat_Sdk

[JNIEnv] 调用: NewStringUTF
  参数: ch
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �p��p��D��Ur�g�q�|Wq�D�
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.statistics.proto.c

[JNIEnv] 调用: GetStringUTFChars
  参数: 8�
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: ts, value: 1753607941950

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�p��p��D��Ur�g�q���
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.statistics.proto.d

[JNIEnv] 调用: GetStringUTFChars
  参数: p�
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �p��p��D��Ur�g�q���
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.statistics.proto.e

[JNIEnv] 调用: GetStringUTFChars
  参数: 8˚
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: __t, value: 2049

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq`��`���D��Ur�g�q
[*] JSONObject.put called with key: ClickWX, value: null

[JNIEnv] 调用: NewStringUTF
  参数: ClickWX
调用栈:
0xd0437f4f libjavacrypto.so!0x2ff4f,0xd02d8cf5 libssl.so!0x12cf5,0xd02da027 libssl.so!0x14027,0xd02d940f libssl.so!0x1340f,0xd02e6c87 libssl.so!SSL_do_handshake+0x42,0xd02e70ef libssl.so!0x210ef,0xd02e6f89 libssl.so!SSL_read+0x30,0xd043360b libjavacrypto.so!0x2b60b,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50acf5c libart.so!nterp_helper+0xaac,0xe50acfa4 libart.so!nterp_helper+0xaf4,0xe50acfa4 libart.so!nterp_helper+0xaf4,0xe50acfa4 libart.so!nterp_helper+0xaf4,0xe50ad6ac libart.so!nterp_helper+0x11fc,0xe50acfa4 libart.so!nterp_helper+0xaf4,0xe50acfa4 libart.so!nterp_helper+0xaf4

[JNIEnv] 调用: GetStringUTFChars
  参数: ���
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: `��`���D��Ur�g�q
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /system/etc/security/cacerts/991d3bb7.0

[JNIEnv] 调用: NewStringUTF
  参数: access
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.statistics.proto.Gender

[JNIEnv] 调用: GetStringUTFChars
  参数: 讚
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: ch, value: Wechat_Sdk
[*] JSONObject.put called with key: mf, value: Xiaomi

[JNIEnv] 调用: NewStringUTF
  参数: mf
调用栈:
0xda7de385 libjavacore.so!0x17385,0x7116659b boot-core-libart.oat!0x1059b

[JNIEnv] 调用: GetStringUTFChars
  参数: pض
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xqpy�py��D��Ur�g�q
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.statistics.proto.Response

[JNIEnv] 调用: GetStringUTFChars
  参数: /�
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /system/etc/security/cacerts/303f36aa.0

[JNIEnv] 调用: NewStringUTF
  参数: access
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259
调用栈:
0xda7de385 libjavacore.so!0x17385,0x7116659b boot-core-libart.oat!0x1059b

[JNIEnv] 调用: NewStringUTF
  参数: 1.2.840.113549.1.1.11
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.statistics.SdkVersion

[JNIEnv] 调用: GetStringUTFChars
  参数:  ��
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: py�py��D��Ur�g�q
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.statistics.TagHelper

[JNIEnv] 调用: GetStringUTFChars
  参数: b�
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: ClickWX, value: null

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�������D��Ur�g�q
[*] JSONObject.put called with key: __i, value: 267A00E061645180845BBD7794F3239E

[JNIEnv] 调用: NewStringUTF
  参数: __i
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.statistics.UMErrorCode

[JNIEnv] 调用: GetStringUTFChars
  参数: 
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �������D��Ur�g�q
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.statistics.UMServerURL

[JNIEnv] 调用: GetStringUTFChars
  参数: �{�
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: mf, value: Xiaomi
[*] JSONObject.put called with key: sv, value: 2.0.4

[JNIEnv] 调用: NewStringUTF
  参数: sv
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�������D��Ur�g�q
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.UMConfigure

[JNIEnv] 调用: GetStringUTFChars
  参数: 
调用栈:
0xd0428f17 libjavacrypto.so!0x20f17,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50acc50 libart.so!nterp_helper+0x7a0,0xe50acfa4 libart.so!nterp_helper+0xaf4,0xe50ac4ec libart.so!nterp_helper+0x3c,0xe50ac4ec libart.so!nterp_helper+0x3c,0xe50ad6ac libart.so!nterp_helper+0x11fc,0xe50ad6ac libart.so!nterp_helper+0x11fc,0xe50ad6ac libart.so!nterp_helper+0x11fc,0x722d5e3d boot-framework.oat!0x4a1e3d

[JNIEnv] 调用: GetStringUTFChars
  参数: �M�
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.UMConfigureImpl

[JNIEnv] 调用: GetStringUTFChars
  参数: �ۙ
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �������D��Ur�g�q
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /system/etc/security/cacerts/1e8e7201.0

[JNIEnv] 调用: GetStringUTFChars
  参数:  N�
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.UMConfigureInternation

[JNIEnv] 调用: GetStringUTFChars
  参数: ���
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/misc/user/0/cacerts-removed/1e8e7201.0

[JNIEnv] 调用: NewStringUTF
  参数: access
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: __i, value: 267A00E061645180845BBD7794F3239E

[JNIEnv] 调用: GetStringUTFChars
  参数: �XqȺ�Ⱥ��D��Ur�g�q
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.UMInnerImpl

[JNIEnv] 调用: GetStringUTFChars
  参数: ��
调用栈:
0xda7de385 libjavacore.so!0x17385,0x7116659b boot-core-libart.oat!0x1059b

[JNIEnv] 调用: GetStringUTFChars
  参数:  R�
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: Ⱥ�Ⱥ��D��Ur�g�q
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.UMInnerManager

[JNIEnv] 调用: GetStringUTFChars
  参数: ~�
调用栈:
0xda7e2b8f libjavacore.so!0x1bb8f,0x71166d05 boot-core-libart.oat!0x10d05
[JNIEnv] GetStringUTFChars 返回: /system/etc/security/cacerts/1e8e7201.0

[JNIEnv] 调用: GetStringUTFChars
  参数: x��
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: sv, value: 2.0.4

[JNIEnv] 调用: GetStringUTFChars
  参数: �XqP��P���D��Ur�g�qp��
[*] JSONObject.put called with key: osd, value: SKQ1.211006.001 test-keys

[JNIEnv] 调用: NewStringUTF
  参数: osd
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: P��P���D��Ur�g�qp��
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.utils.a

[JNIEnv] 调用: GetStringUTFChars
  参数:  �
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /system/etc/security/cacerts/1e8e7201.1

[JNIEnv] 调用: NewStringUTF
  参数: access
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: ds, value: 0
[*] JSONObject.put called with key: pn, value: com.sytt.tzy

[JNIEnv] 调用: NewStringUTF
  参数: pn
调用栈:
0xda7de385 libjavacore.so!0x17385,0x7116659b boot-core-libart.oat!0x1059b

[JNIEnv] 调用: NewStringUTF
  参数: prime256v1
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.utils.b

[JNIEnv] 调用: GetStringUTFChars
  参数: P�
调用栈:
0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50ac560 libart.so!nterp_helper+0xb0,0xe50acfa4 libart.so!nterp_helper+0xaf4,0xe50ad950 libart.so!nterp_helper+0x14a0,0xe50ac4ec libart.so!nterp_helper+0x3c,0xe50ac4ec libart.so!nterp_helper+0x3c,0xe50ac4ec libart.so!nterp_helper+0x3c,0xe50ad6ac libart.so!nterp_helper+0x11fc,0xe50ad6ac libart.so!nterp_helper+0x11fc,0xe50ad6ac libart.so!nterp_helper+0x11fc,0xe50ad6ac libart.so!nterp_helper+0x11fc,0xe50ad6ac libart.so!nterp_helper+0x11fc,0xe50ad6ac libart.so!nterp_helper+0x11fc,0x722d5e3d boot-framework.oat!0x4a1e3d

[JNIEnv] 调用: NewStringUTF
  参数: 1.2.840.113549.1.1.11
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.utils.c

[JNIEnv] 调用: GetStringUTFChars
  参数: ��
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.utils.d

[JNIEnv] 调用: GetStringUTFChars
  参数: 
调用栈:
0xd0428f17 libjavacrypto.so!0x20f17,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50acc50 libart.so!nterp_helper+0x7a0,0xe50acfa4 libart.so!nterp_helper+0xaf4,0xe50ac4ec libart.so!nterp_helper+0x3c,0xe50ac4ec libart.so!nterp_helper+0x3c,0xe50ac4ec libart.so!nterp_helper+0x3c,0xe50ad6ac libart.so!nterp_helper+0x11fc,0xe50ad6ac libart.so!nterp_helper+0x11fc,0xe50ad6ac libart.so!nterp_helper+0x11fc,0xe50ad6ac libart.so!nterp_helper+0x11fc,0xe50ad6ac libart.so!nterp_helper+0x11fc,0xe50ad6ac libart.so!nterp_helper+0x11fc,0x722d5e3d boot-framework.oat!0x4a1e3d

[JNIEnv] 调用: NewStringUTF
  参数: 1.2.840.113549.1.1.11
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�������D��Ur�g�q
调用栈:
0xd0428f17 libjavacrypto.so!0x20f17,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50acc50 libart.so!nterp_helper+0x7a0,0xe50acfa4 libart.so!nterp_helper+0xaf4,0xe50ac4ec libart.so!nterp_helper+0x3c,0xe50ac4ec libart.so!nterp_helper+0x3c,0xe50ac4ec libart.so!nterp_helper+0x3c,0xe50ad6ac libart.so!nterp_helper+0x11fc,0xe50ad6ac libart.so!nterp_helper+0x11fc,0xe50ad6ac libart.so!nterp_helper+0x11fc,0xe50ad6ac libart.so!nterp_helper+0x11fc,0xe50ad6ac libart.so!nterp_helper+0x11fc,0xe50ad6ac libart.so!nterp_helper+0x11fc,0x722d5e3d boot-framework.oat!0x4a1e3d

[JNIEnv] 调用: GetStringUTFChars
  参数: 8��pt���l�V�
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.utils.FileLockCallback

[JNIEnv] 调用: GetStringUTFChars
  参数: �Ӛ
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �������D��Ur�g�q
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259
调用栈:
0xd042969f libjavacrypto.so!0x2169f,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50acc50 libart.so!nterp_helper+0x7a0,0x710e00c3 boot.oat!0x3220c3
[JNIEnv] GetStringUTFChars 返回: 2.5.29.14

[JNIEnv] 调用: NewStringUTF
  参数: 2.5.29.15
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.utils.FileLockUtil

[JNIEnv] 调用: GetStringUTFChars
  参数: 
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: osd, value: SKQ1.211006.001 test-keys

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�������D��Ur�g�q
[*] JSONObject.put called with key: prod, value: alioth

[JNIEnv] 调用: NewStringUTF
  参数: prod
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.utils.JSONArraySortUtil

[JNIEnv] 调用: GetStringUTFChars
  参数: `��
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �������D��Ur�g�q
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.utils.onMessageSendListener

[JNIEnv] 调用: GetStringUTFChars
  参数: Ț
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: pn, value: com.sytt.tzy

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�������D��Ur�g�q

[JNIEnv] 调用: GetStringUTFChars
  参数: 8U�r�Z�rS+q0�p�}���1�p��C0�	
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �������D��Ur�g�q
调用栈:
0xd042a6bb libjavacrypto.so!0x226bb,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50acc50 libart.so!nterp_helper+0x7a0,0x70f036a3 boot.oat!0x1456a3

[JNIEnv] 调用: NewStringUTF
  参数: 2.5.29.19
调用栈:
0xdc22e867 libicu_jni.so!0x8867,0x72677869 boot-core-icu4j.oat!0x2e869
[JNIEnv] GetStringUTFChars 返回: UTF-8

[JNIEnv] 调用: GetStringUTFChars
  参数: P9�
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: prod, value: alioth
[*] JSONObject.put called with key: tags, value: release-keys

[JNIEnv] 调用: NewStringUTF
  参数: tags
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.utils.UMUtils

[JNIEnv] 调用: GetStringUTFChars
  参数: pf�
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /system/app/Superuser.apk

[JNIEnv] 调用: NewStringUTF
  参数: access
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.vchannel.a

[JNIEnv] 调用: GetStringUTFChars
  参数: �f�
调用栈:
0xda7de385 libjavacore.so!0x17385,0x7116659b boot-core-libart.oat!0x1059b

[JNIEnv] 调用: GetStringUTFChars
  参数: 9��:��aU�taU�`�
�t�q�&��C
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: com.sytt.tzy.CheckRoot

[JNIEnv] 调用: GetStringUTFChars
  参数: �:��aU�taU�`�
�t�q�&��C
调用栈:
0xd042a6bb libjavacrypto.so!0x226bb,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50acc50 libart.so!nterp_helper+0x7a0,0x70f036a3 boot.oat!0x1456a3

[JNIEnv] 调用: NewStringUTF
  参数: 1.2.840.113549.1.1.11
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.vchannel.b

[JNIEnv] 调用: GetStringUTFChars
  参数: ��
调用栈:
0xd0428f17 libjavacrypto.so!0x20f17,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50acc50 libart.so!nterp_helper+0x7a0,0xe50acfa4 libart.so!nterp_helper+0xaf4,0x71074701 boot.oat!0x2b6701

[JNIEnv] 调用: NewStringUTF
  参数: 1.2.840.113549.1.1.11
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.vchannel.Sender

[JNIEnv] 调用: GetStringUTFChars
  参数: �
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: to exec busybox df

[JNIEnv] 调用: GetStringUTFChars
  参数: 9�x;��`U��`U�`�
���q�&��C
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�������D��Ur�g�q
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.tunnel.UMChannelAgent

[JNIEnv] 调用: GetStringUTFChars
  参数: ��
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: com.sytt.tzy.CheckRoot

[JNIEnv] 调用: GetStringUTFChars
  参数: x;��`U��`U�`�
���q�&��C
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.vchannel.Sender

[JNIEnv] 调用: GetStringUTFChars
  参数: pݚ
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: to shell exec which for find su :

[JNIEnv] 调用: NewStringUTF
  参数: error=2, No such file or directory
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �������D��Ur�g�q
调用栈:
0xd0428f17 libjavacrypto.so!0x20f17,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50acc50 libart.so!nterp_helper+0x7a0,0xe50acfa4 libart.so!nterp_helper+0xaf4,0x70f0c7c9 boot.oat!0x14e7c9

[JNIEnv] 调用: NewStringUTF
  参数: 2.5.29.15
调用栈:
0xda7a98ad libopenjdk.so!0x1d8ad,0xda7a97c5 libopenjdk.so!UNIXProcess_forkAndExec+0x344,0x70e68a29 boot.oat!0xaaa29

[JNIEnv] 调用: GetStringUTFChars
  参数: 9�PA��aU�taU�`�
�t�q�&��C
调用栈:
0xd042a6bb libjavacrypto.so!0x226bb,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50acc50 libart.so!nterp_helper+0x7a0,0x70f036a3 boot.oat!0x1456a3

[JNIEnv] 调用: NewStringUTF
  参数: 2.5.29.19
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.vt.diff.Channel

[JNIEnv] 调用: GetStringUTFChars
  参数: H��
调用栈:
0xd042a6bb libjavacrypto.so!0x226bb,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50acc50 libart.so!nterp_helper+0x7a0,0x70f036a3 boot.oat!0x1456a3

[JNIEnv] 调用: NewStringUTF
  参数: 1.2.840.113549.1.1.11
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.vt.diff.Event

[JNIEnv] 调用: GetStringUTFChars
  参数: К
调用栈:
0xd0428f17 libjavacrypto.so!0x20f17,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50acc50 libart.so!nterp_helper+0x7a0,0xe50acfa4 libart.so!nterp_helper+0xaf4,0x71074701 boot.oat!0x2b6701

[JNIEnv] 调用: NewStringUTF
  参数: 1.2.840.113549.1.1.11
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: com.sytt.tzy.CheckRoot

[JNIEnv] 调用: GetStringUTFChars
  参数: PA��aU�taU�`�
�t�q�&��C
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.vt.diff.util.ClassLoadUtil

[JNIEnv] 调用: GetStringUTFChars
  参数: 蟚
调用栈:
0xd0428f17 libjavacrypto.so!0x20f17,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50acc50 libart.so!nterp_helper+0x7a0,0xe50acfa4 libart.so!nterp_helper+0xaf4,0x70f0c7c9 boot.oat!0x14e7c9

[JNIEnv] 调用: NewStringUTF
  参数: prime256v1
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: tags, value: release-keys
[*] JSONObject.put called with key: id, value: SKQ1.211006.001

[JNIEnv] 调用: NewStringUTF
  参数: id
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.vt.diff.V

[JNIEnv] 调用: GetStringUTFChars
  参数: �יHѠ0�c�$�c�`�
�\(p�
调用栈:
0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50ac560 libart.so!nterp_helper+0xb0,0xe50acfa4 libart.so!nterp_helper+0xaf4,0x70f0d8bd boot.oat!0x14f8bd

[JNIEnv] 调用: GetStringUTFChars
  参数: @��
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: execResult=null

[JNIEnv] 调用: GetStringUTFChars
  参数: 9�pA��aU�taU�`�
�\�q�&��C
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: java.security.AlgorithmParametersSpi

[JNIEnv] 调用: GetStringUTFChars
  参数: (��r
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: UMLog

[JNIEnv] 调用: GetStringUTFChars
  参数: HѠ0�c�$�c�`�
�\(p�
调用栈:
0xe534c0fd libart.so!_ZN3artL29VMClassLoader_findLoadedClassEP7_JNIEnvP7_jclassP8_jobjectP8_jstring+0x40,0x711656bb boot-core-libart.oat!0xf6bb
[JNIEnv] GetStringUTFChars 返回: com.android.org.conscrypt.OpenSSLECKeyFactory

[JNIEnv] 调用: NewStringUTF
  参数: 1.3.6.1.5.5.7.3.1
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 基础组件库完整性自检通过。

[JNIEnv] 调用: GetStringUTFChars
  参数:  F�
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: com.sytt.tzy.CheckRoot

[JNIEnv] 调用: GetStringUTFChars
  参数: pA��aU�taU�`�
�\�q�&��C
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs

[JNIEnv] 调用: GetStringUTFChars
  参数: ��
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: to write /data

[JNIEnv] 调用: GetStringUTFChars
  参数: �A�A
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�����D��Ur�g�q
调用栈:
0xda7e2b8f libjavacore.so!0x1bb8f,0x71166d05 boot-core-libart.oat!0x10d05
[JNIEnv] GetStringUTFChars 返回: /data/su_test

[JNIEnv] 调用: NewStringUTF
  参数: open
调用栈:
0xd04293ed libjavacrypto.so!0x213ed,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50acc50 libart.so!nterp_helper+0x7a0,0xe50acfa4 libart.so!nterp_helper+0xaf4,0x70f03da3 boot.oat!0x145da3

[JNIEnv] 调用: NewStringUTF
  参数: 1.3.6.1.5.5.7.3.2
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �����D��Ur�g�q
调用栈:
0xd04293ed libjavacrypto.so!0x213ed,0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50acc50 libart.so!nterp_helper+0x7a0,0xe50acfa4 libart.so!nterp_helper+0xaf4,0x70f03da3 boot.oat!0x145da3
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/um_rtd_conf.xml.bak

[JNIEnv] 调用: NewStringUTF
  参数: access
调用栈:
0xda7e2bc3 libjavacore.so!0x1bbc3,0x71166d05 boot-core-libart.oat!0x10d05

[JNIEnv] 调用: NewStringUTF
  参数: Permission denied
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: id, value: SKQ1.211006.001
[*] JSONObject.put called with key: fng, value: Redmi/alioth/alioth:12/SKQ1.211006.001/V13.0.7.0.SKHCNXM:user/release-keys

[JNIEnv] 调用: NewStringUTF
  参数: fng
调用栈:
0xda7e6703 libjavacore.so!0x1f703,0x71166c91 boot-core-libart.oat!0x10c91

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�G��G��Xq�Ur�d�q

[JNIEnv] 调用: NewStringUTF
  参数: TLSv1.2
调用栈:
0xda7de385 libjavacore.so!0x17385,0x7116659b boot-core-libart.oat!0x1059b

[JNIEnv] 调用: GetStringUTFChars
  参数: h�
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.err

[JNIEnv] 调用: GetStringUTFChars
  参数: �G��G��Xq�Ur�d�q
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/um_rtd_conf.xml

[JNIEnv] 调用: NewStringUTF
  参数: access
调用栈:
0xda7de385 libjavacore.so!0x17385,0x7116659b boot-core-libart.oat!0x1059b

[JNIEnv] 调用: GetStringUTFChars
  参数: h�h_�p0Z�p(h�ph�Kq8h�ph�Kqh�Kq��#�wu�pZ�pPW�PW�h�h�Kq��#�t�#����q�MtqPW���r �h���#�t�#��K�ph�PW�
���qP��pPW�	�
�����h��,r�xq
调用栈:
0xda7e8c87 libjavacore.so!0x21c87,0x7116694f boot-core-libart.oat!0x1094f
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/um_rtd_conf.xml

[JNIEnv] 调用: NewStringUTF
  参数: stat
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: java.io.FileNotFoundException: /data/su_test: open failed: EACCES (Permission denied)

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�Q��Q��Xq�Ur�d�q
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq �� ���D��Ur�g�q
调用栈:
0xda7e8d4f libjavacore.so!0x21d4f,0x7116694f boot-core-libart.oat!0x1094f

[JNIEnv] 调用: GetStringUTFChars
  参数:  F�
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.err

[JNIEnv] 调用: GetStringUTFChars
  参数: �Q��Q��Xq�Ur�d�q
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs

[JNIEnv] 调用: GetStringUTFChars
  参数: x�
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 	at libcore.io.IoBridge.open(IoBridge.java:575)

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�T��T��Xq�Ur�d�q
调用栈:
0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50acc50 libart.so!nterp_helper+0x7a0,0xe50ad6ac libart.so!nterp_helper+0x11fc,0xe50ad6ac libart.so!nterp_helper+0x11fc,0xe50ac4ec libart.so!nterp_helper+0x3c,0xe50b13d7 libart.so!art_quick_invoke_stub_internal+0x46,0xe54c476f libart.so!art_quick_invoke_stub+0x11e,0xe51065a5 libart.so!_ZN3art9ArtMethod6InvokeEPNS_6ThreadEPjjPNS_6JValueEPKc+0x8c,0xe53c373d libart.so!_ZN3art35InvokeVirtualOrInterfaceWithVarArgsIPNS_9ArtMethodEEENS_6JValueERKNS_33ScopedObjectAccessAlreadyRunnableEP8_jobjectT_St9__va_list+0x174,0xe53c384b libart.so!_ZN3art35InvokeVirtualOrInterfaceWithVarArgsIP10_jmethodIDEENS_6JValueERKNS_33ScopedObjectAccessAlreadyRunnableEP8_jobjectT_St9__va_list+0x2e,0xe527c5bf libart.so!_ZN3art3JNIILb0EE15CallVoidMethodVEP7_JNIEnvP8_jobjectP10_jmethodIDSt9__va_list+0x1ea,0xd04368ef libjavacrypto.so!0x2e8ef,0xd0437adb libjavacrypto.so!0x2fadb,0xd02e5daf libssl.so!0x1fdaf,0xd02da13b libssl.so!0x1413b,0xd02d940f libssl.so!0x1340f

[JNIEnv] 调用: NewStringUTF
  参数: TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.err

[JNIEnv] 调用: GetStringUTFChars
  参数: �T��T��Xq�Ur�d�q
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/ccg_sp_config_file.xml.bak

[JNIEnv] 调用: NewStringUTF
  参数: access
调用栈:
0xda7de385 libjavacore.so!0x17385,0x7116659b boot-core-libart.oat!0x1059b

[JNIEnv] 调用: GetStringUTFChars
  参数: ��
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 	at java.io.FileOutputStream.<init>(FileOutputStream.java:236)

[JNIEnv] 调用: GetStringUTFChars
  参数: �XqxW�xW��Xq�Ur�d�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数:  �� ���D��Ur�g�q
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/ccg_sp_config_file.xml

[JNIEnv] 调用: GetStringUTFChars
  参数: ��
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: fng, value: Redmi/alioth/alioth:12/SKQ1.211006.001/V13.0.7.0.SKHCNXM:user/release-keys
[*] JSONObject.put called with key: lch, value: com.miui.home

[JNIEnv] 调用: NewStringUTF
  参数: lch
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/ccg_sp_config_file.xml

[JNIEnv] 调用: GetStringUTFChars
  参数: ��h_�p0Z�p(h�ph�Kq8h�ph�Kqh�Kq��#�wu�pZ�pPW�PW���h�Kq��#�t�#����q�MtqPW���r������#�t�#��A�p��PW�����qP��pPW�����(�(����,r�xq
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.err

[JNIEnv] 调用: GetStringUTFChars
  参数: xW�xW��Xq�Ur�d�q
调用栈:
0xda7e8c87 libjavacore.so!0x21c87,0x7116694f boot-core-libart.oat!0x1094f
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/ccg_sp_config_file.xml

[JNIEnv] 调用: GetStringUTFChars
  参数: ��
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 	at java.io.FileOutputStream.<init>(FileOutputStream.java:125)

[JNIEnv] 调用: GetStringUTFChars
  参数: �XqPZ�PZ��Xq�Ur�d�q
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/ccg_sp_config_file.xml

[JNIEnv] 调用: GetStringUTFChars
  参数: ��
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.err

[JNIEnv] 调用: GetStringUTFChars
  参数: PZ�PZ��Xq�Ur�d�q
调用栈:
0xda7e2b8f libjavacore.so!0x1bb8f,0x71166d05 boot-core-libart.oat!0x10d05
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/ccg_sp_config_file.xml

[JNIEnv] 调用: GetStringUTFChars
  参数: 8U�rHl?
调用栈:
0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50acc50 libart.so!nterp_helper+0x7a0,0xe50ad6ac libart.so!nterp_helper+0x11fc,0xe50ad6ac libart.so!nterp_helper+0x11fc,0xe50ac4ec libart.so!nterp_helper+0x3c,0xe50b13d7 libart.so!art_quick_invoke_stub_internal+0x46,0xe54c476f libart.so!art_quick_invoke_stub+0x11e,0xe51065a5 libart.so!_ZN3art9ArtMethod6InvokeEPNS_6ThreadEPjjPNS_6JValueEPKc+0x8c,0xe53c373d libart.so!_ZN3art35InvokeVirtualOrInterfaceWithVarArgsIPNS_9ArtMethodEEENS_6JValueERKNS_33ScopedObjectAccessAlreadyRunnableEP8_jobjectT_St9__va_list+0x174,0xe53c384b libart.so!_ZN3art35InvokeVirtualOrInterfaceWithVarArgsIP10_jmethodIDEENS_6JValueERKNS_33ScopedObjectAccessAlreadyRunnableEP8_jobjectT_St9__va_list+0x2e,0xe527c5bf libart.so!_ZN3art3JNIILb0EE15CallVoidMethodVEP7_JNIEnvP8_jobjectP10_jmethodIDSt9__va_list+0x1ea,0xd04368ef libjavacrypto.so!0x2e8ef,0xd0437adb libjavacrypto.so!0x2fadb,0xd02e5daf libssl.so!0x1fdaf,0xd02da13b libssl.so!0x1413b,0xd02d940f libssl.so!0x1340f

[JNIEnv] 调用: NewStringUTF
  参数: TLSv1.2
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 	at com.sytt.tzy.CheckRoot.writeFile(CheckRoot.java:166)

[JNIEnv] 调用: GetStringUTFChars
  参数: �XqH]�H]��Xq�Ur�d�q
调用栈:
0xdc22e867 libicu_jni.so!0x8867,0x72677869 boot-core-icu4j.oat!0x2e869
[JNIEnv] GetStringUTFChars 返回: UTF-8

[JNIEnv] 调用: GetStringUTFChars
  参数: ��
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.err

[JNIEnv] 调用: GetStringUTFChars
  参数: H]�H]��Xq�Ur�d�q
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/ccg_sp_config_file.xml

[JNIEnv] 调用: GetStringUTFChars
  参数: x�
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq8��8���D��Ur�g�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 	at com.sytt.tzy.CheckRoot.checkAccessRootData(CheckRoot.java:141)

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq8`�8`��Xq�Ur�d�q
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/ccg_sp_config_file.xml.bak

[JNIEnv] 调用: NewStringUTF
  参数: access
调用栈:
0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50acc50 libart.so!nterp_helper+0x7a0,0xe50acfa4 libart.so!nterp_helper+0xaf4,0xe50ada0c libart.so!nterp_helper+0x155c,0xe50acfa4 libart.so!nterp_helper+0xaf4,0xe50ada0c libart.so!nterp_helper+0x155c,0xe50acfa4 libart.so!nterp_helper+0xaf4,0x711d6317 boot-okhttp.oat!0x33317

[JNIEnv] 调用: NewStringUTF
  参数: TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256
调用栈:
0xda7de385 libjavacore.so!0x17385,0x7116659b boot-core-libart.oat!0x1059b

[JNIEnv] 调用: GetStringUTFChars
  参数: ��x�h_�p8h�p(h�p
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.err

[JNIEnv] 调用: GetStringUTFChars
  参数: 8`�8`��Xq�Ur�d�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: 8��8���D��Ur�g�q
调用栈:
0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50acc50 libart.so!nterp_helper+0x7a0,0xe50acfa4 libart.so!nterp_helper+0xaf4,0xe50ad950 libart.so!nterp_helper+0x14a0,0xe50acfa4 libart.so!nterp_helper+0xaf4,0xe50ad950 libart.so!nterp_helper+0x14a0,0xe50acfa4 libart.so!nterp_helper+0xaf4,0x711d6317 boot-okhttp.oat!0x33317

[JNIEnv] 调用: NewStringUTF
  参数: TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256
调用栈:
0xda7e4391 libjavacore.so!0x1d391,0x711668e9 boot-core-libart.oat!0x108e9
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/ccg_sp_config_file.xml

[JNIEnv] 调用: GetStringUTFChars
  参数: x�h_�p8h�p(h�p
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: lch, value: com.miui.home
[*] JSONObject.put called with key: ov, value: 32

[JNIEnv] 调用: NewStringUTF
  参数: ov
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 	at com.sytt.tzy.CheckRoot.isDeviceRooted(CheckRoot.java:31)

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�d��d��Xq�Ur�d�q
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�������D��Ur�g�q
调用栈:
0xda7e43ab libjavacore.so!0x1d3ab,0x711668e9 boot-core-libart.oat!0x108e9
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/ccg_sp_config_file.xml.bak

[JNIEnv] 调用: GetStringUTFChars
  参数: ��A
调用栈:
0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50acc50 libart.so!nterp_helper+0x7a0,0xe50acfa4 libart.so!nterp_helper+0xaf4,0xe50ad950 libart.so!nterp_helper+0x14a0,0xe50acfa4 libart.so!nterp_helper+0xaf4,0x711b322f boot-okhttp.oat!0x1022f

[JNIEnv] 调用: GetStringUTFChars
  参数: 8�
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �������D��Ur�g�q
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/app_UApm/656436ae58a9eb5b0a11a63e

[JNIEnv] 调用: GetStringUTFChars
  参数: ��
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.err

[JNIEnv] 调用: GetStringUTFChars
  参数: �d��d��Xq�Ur�d�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: ov, value: 32

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�������D��Ur�g�q

[JNIEnv] 调用: NewStringUTF
  参数: utoken.umeng.com
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/app_UApm/656436ae58a9eb5b0a11a63e/ready

[JNIEnv] 调用: GetStringUTFChars
  参数: ��
调用栈:
0xda7e2b8f libjavacore.so!0x1bb8f,0x71166d05 boot-core-libart.oat!0x10d05
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/ccg_sp_config_file.xml

[JNIEnv] 调用: GetStringUTFChars
  参数: 8U�r
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �������D��Ur�g�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: os, value: 1
[*] JSONObject.put called with key: op, value: 46001

[JNIEnv] 调用: NewStringUTF
  参数: op
调用栈:
0xdc22e867 libicu_jni.so!0x8867,0x72677869 boot-core-icu4j.oat!0x2e869
[JNIEnv] GetStringUTFChars 返回: UTF-8
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq

[JNIEnv] 调用: GetStringUTFChars
  参数: ���
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 	at com.sytt.tzy.UnityPlayerActivity.CheckDevicRooted(UnityPlayerActivity.java:553)

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�g��g��Xq�Ur�d�q
调用栈:
0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50acc50 libart.so!nterp_helper+0x7a0,0xe50acfa4 libart.so!nterp_helper+0xaf4,0xe50ad950 libart.so!nterp_helper+0x14a0,0xe50acfa4 libart.so!nterp_helper+0xaf4,0xe50acfa4 libart.so!nterp_helper+0xaf4,0xe50acfa4 libart.so!nterp_helper+0xaf4,0x711bdde5 boot-okhttp.oat!0x1ade5

[JNIEnv] 调用: NewStringUTF
  参数: TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/app_UApm/656436ae58a9eb5b0a11a63e/ready

[JNIEnv] 调用: GetStringUTFChars
  参数: ��
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.err

[JNIEnv] 调用: GetStringUTFChars
  参数: �g��g��Xq�Ur�d�q
调用栈:
0xda7a2c27 libopenjdk.so!Java_java_io_UnixFileSystem_getBooleanAttributes0+0x22,0x70e65c27 boot.oat!0xa7c27
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/app_UApm/656436ae58a9eb5b0a11a63e/ready

[JNIEnv] 调用: GetStringUTFChars
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/app_UApm/656436ae58a9eb5b0a11a63e/ready
Error: access violation accessing 0x19
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)

[JNIEnv] 调用: GetStringUTFChars
  参数: ��
调用栈:
0xda7df40d libjavacore.so!0x1840d,0x711669bb boot-core-libart.oat!0x109bb
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/ccg_sp_config_file.xml

[JNIEnv] 调用: GetStringUTFChars
  参数: ��h_�p0Z�p(h�ph�Kq8h�ph�Kqh�Kq
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: 
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 	at com.unity3d.player.UnityPlayer.nativeRender(Native Method)

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�j��j��Xq�Ur�d�q
调用栈:
0xe50b5e8f libart.so!art_quick_generic_jni_trampoline+0x2e,0xe50acc50 libart.so!nterp_helper+0x7a0,0xe50acfa4 libart.so!nterp_helper+0xaf4,0xe50ad950 libart.so!nterp_helper+0x14a0,0xe50acfa4 libart.so!nterp_helper+0xaf4,0xe50acfa4 libart.so!nterp_helper+0xaf4,0xe50acfa4 libart.so!nterp_helper+0xaf4,0x711bdde5 boot-okhttp.oat!0x1ade5
[*] JSONObject.put called with key: aaid, value: AZxsmZv_L72t5-P9czGclz66CLefhlydX9JTOpPPIXPmgytGtYGtrpgrJEv2tLdX6SnMH0o8Uwr7HU1R18RGQhR3vmdnLmodlPghl21ZT5bDZd8tsz0=

[JNIEnv] 调用: NewStringUTF
  参数: aaid
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/app_UApm/656436ae58a9eb5b0a11a63e

[JNIEnv] 调用: GetStringUTFChars
  参数: `�
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.err

[JNIEnv] 调用: GetStringUTFChars
  参数: �j��j��Xq�Ur�d�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: op, value: 46001
[*] JSONObject.put called with key: lg, value: zh

[JNIEnv] 调用: NewStringUTF
  参数: lg
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 	at com.unity3d.player.UnityPlayer.access$300(Unknown Source:0)

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�m��m��Xq�Ur�d�q
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq(	�(	��D��Ur�g�q
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/app_UApm/656436ae58a9eb5b0a11a63e/ready

[JNIEnv] 调用: GetStringUTFChars
  参数: `�
调用栈:
0xda7e8c87 libjavacore.so!0x21c87,0x7116694f boot-core-libart.oat!0x1094f
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/ccg_sp_config_file.xml

[JNIEnv] 调用: GetStringUTFChars
  参数: x�h_�p0Z�p(h�ph�Kq8h�ph�Kqh�Kq
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: (	�(	��D��Ur�g�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.err

[JNIEnv] 调用: GetStringUTFChars
  参数: �m��m��Xq�Ur�d�q
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/app_UApm/656436ae58a9eb5b0a11a63e/ready

[JNIEnv] 调用: GetStringUTFChars
  参数: `�
调用栈:
0xda7e4143 libjavacore.so!0x1d143,0x71164e9f boot-core-libart.oat!0xee9f
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/ccg_sp_config_file.xml.bak

[JNIEnv] 调用: GetStringUTFChars
  参数:  7�

[JNIEnv] 调用: GetStringUTFChars
  参数: ��
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: lg, value: zh

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�������D��Ur�g�q
[*] JSONObject.put called with key: md, value: M2012K11AC

[JNIEnv] 调用: NewStringUTF
  参数: md
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 	at com.unity3d.player.UnityPlayer$e$1.handleMessage(Unknown Source:95)

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�p��p��Xq�Ur�d�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �������D��Ur�g�q
调用栈:
0xe723df49 libandroid_runtime.so!0x79f49,0x71fc0ddd boot-framework.oat!0x18cddd
[JNIEnv] GetStringUTFChars 返回: log.looper.10150.ccg_dispatch.slow

[JNIEnv] 调用: GetStringUTFChars
  参数: xF�
调用栈:
0xda7a9105 libopenjdk.so!Mock_getProperty+0x2c,0x70e653e3 boot.oat!0xa73e3
[JNIEnv] GetStringUTFChars 返回: lsp.Identifier.OAID

[JNIEnv] 调用: NewStringUTF
  参数: 739f0aa330ad82f9
调用栈:
0xda7a2c27 libopenjdk.so!Java_java_io_UnixFileSystem_getBooleanAttributes0+0x22,0x70e65c27 boot.oat!0xa7c27
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/app_UApm/656436ae58a9eb5b0a11a63e/ready

[JNIEnv] 调用: GetStringUTFChars
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/app_UApm/656436ae58a9eb5b0a11a63e/ready
Error: access violation accessing 0x11
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)

[JNIEnv] 调用: GetStringUTFChars
  参数: ��
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: aaid, value: AZxsmZv_L72t5-P9czGclz66CLefhlydX9JTOpPPIXPmgytGtYGtrpgrJEv2tLdX6SnMH0o8Uwr7HU1R18RGQhR3vmdnLmodlPghl21ZT5bDZd8tsz0=
[*] JSONObject.put called with key: suc, value: true

[JNIEnv] 调用: NewStringUTF
  参数: suc
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/files

[JNIEnv] 调用: GetStringUTFChars
  参数:  8�
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �XqH�H��D��Ur�g�q
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/files/.dmpvedpogjhejs.cfg

[JNIEnv] 调用: GetStringUTFChars
  参数: xF�
调用栈:
0xda7a9141 libopenjdk.so!Mock_getProperty+0x68,0x70e653e3 boot.oat!0xa73e3

[JNIEnv] 调用: GetStringUTFChars
  参数: ��
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/app_UApm/656436ae58a9eb5b0a11a63e

[JNIEnv] 调用: GetStringUTFChars
  参数: �
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/files

[JNIEnv] 调用: GetStringUTFChars
  参数: �8�
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: H�H��D��Ur�g�q
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/umeng_sp_oaid.xml

[JNIEnv] 调用: GetStringUTFChars
  参数: ���
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.err

[JNIEnv] 调用: GetStringUTFChars
  参数: �p��p��Xq�Ur�d�q
调用栈:
0xda7e2b8f libjavacore.so!0x1bb8f,0x71166d05 boot-core-libart.oat!0x10d05
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/files/.dmpvedpogjhejs.cfg
[*] JSONObject.put called with key: col_delay_times, value: 1

[JNIEnv] 调用: NewStringUTF
  参数: col_delay_times
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: md, value: M2012K11AC
[*] JSONObject.put called with key: tz, value: Asia/Shanghai

[JNIEnv] 调用: NewStringUTF
  参数: tz
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/umeng_sp_oaid.xml.bak

[JNIEnv] 调用: NewStringUTF
  参数: access
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�e��e��D��Ur�g�q"
调用栈:
0xda7de385 libjavacore.so!0x17385,0x7116659b boot-core-libart.oat!0x1059b

[JNIEnv] 调用: GetStringUTFChars
  参数: �����h_�p8h�p(h�p
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/app_UApm/656436ae58a9eb5b0a11a63e/upload

[JNIEnv] 调用: GetStringUTFChars
  参数: �
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 	at android.os.Handler.dispatchMessage(Handler.java:102)

[JNIEnv] 调用: GetStringUTFChars
  参数: �XqPs�Ps��Xq�Ur�d�q
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259
调用栈:
0xda7e4391 libjavacore.so!0x1d391,0x711668e9 boot-core-libart.oat!0x108e9
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/umeng_sp_oaid.xml

[JNIEnv] 调用: GetStringUTFChars
  参数: ���h_�p8h�p(h�p
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/app_UApm/656436ae58a9eb5b0a11a63e/upload

[JNIEnv] 调用: GetStringUTFChars
  参数: �
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.err

[JNIEnv] 调用: GetStringUTFChars
  参数: Ps�Ps��Xq�Ur�d�q
调用栈:
0xda7e43ab libjavacore.so!0x1d3ab,0x711668e9 boot-core-libart.oat!0x108e9
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/umeng_sp_oaid.xml.bak

[JNIEnv] 调用: GetStringUTFChars
  参数: ��A
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 	at android.os.Looper.loopOnce(Looper.java:201)

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�u��u��Xq�Ur�d�q
调用栈:
0xda7e2b8f libjavacore.so!0x1bb8f,0x71166d05 boot-core-libart.oat!0x10d05
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/umeng_sp_oaid.xml

[JNIEnv] 调用: GetStringUTFChars
  参数: 8U�r
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �e��e��D��Ur�g�q"
调用栈:
0xda7a2c27 libopenjdk.so!Java_java_io_UnixFileSystem_getBooleanAttributes0+0x22,0x70e65c27 boot.oat!0xa7c27
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/app_UApm/656436ae58a9eb5b0a11a63e/upload

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x15
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/app_UApm/656436ae58a9eb5b0a11a63e/upload
调用栈:
0xdc22e867 libicu_jni.so!0x8867,0x72677869 boot-core-icu4j.oat!0x2e869
[JNIEnv] GetStringUTFChars 返回: UTF-8

[JNIEnv] 调用: GetStringUTFChars
  参数: ���
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.err

[JNIEnv] 调用: GetStringUTFChars
  参数: �u��u��Xq�Ur�d�q
调用栈:
0xda7df40d libjavacore.so!0x1840d,0x711669bb boot-core-libart.oat!0x109bb
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/umeng_sp_oaid.xml

[JNIEnv] 调用: GetStringUTFChars
  参数: ��h_�p0Z�p(h�ph�Kq8h�ph�Kqh�Kq
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 	at android.os.Looper.loop(Looper.java:288)

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�x��x��Xq�Ur�d�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: col_delay_times, value: 1
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�������D��Ur�g�q
[*] JSONObject.put called with key: col_delay_ts, value: 1

[JNIEnv] 调用: NewStringUTF
  参数: col_delay_ts
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.err

[JNIEnv] 调用: GetStringUTFChars
  参数: �x��x��Xq�Ur�d�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �������D��Ur�g�q
调用栈:
0xda7e8c87 libjavacore.so!0x21c87,0x7116694f boot-core-libart.oat!0x1094f
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/umeng_sp_oaid.xml

[JNIEnv] 调用: GetStringUTFChars
  参数: ���h_�p0Z�p(h�ph�Kq8h�ph�Kqh�Kq
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: suc, value: true

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xqp�p��D��Ur�g�q
[*] JSONObject.put called with key: uabc, value: {"model":"M2012K11AC","zts":1753607531054}

[JNIEnv] 调用: NewStringUTF
  参数: uabc
调用栈:
0xda7e4143 libjavacore.so!0x1d143,0x71164e9f boot-core-libart.oat!0xee9f
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/umeng_sp_oaid.xml.bak

[JNIEnv] 调用: GetStringUTFChars
  参数: 0��
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: p�p��D��Ur�g�q
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.internal.UMInternalManagerAgent
[*] JSONObject.put called with key: i_sdk_v, value: 1.2.0

[JNIEnv] 调用: NewStringUTF
  参数: i_sdk_v
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 	at com.unity3d.player.UnityPlayer$e.run(Unknown Source:20)

[JNIEnv] 调用: NewStringUTF
  参数: Permission denied
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: tz, value: Asia/Shanghai
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �XqPt�Pt��D��Ur�g�q
[*] JSONObject.put called with key: sd, value: 55449/114133

[JNIEnv] 调用: NewStringUTF
  参数: sd
调用栈:
0xda7e6703 libjavacore.so!0x1f703,0x71166c91 boot-core-libart.oat!0x10c91

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�������Xq�Ur�d�q
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.err

[JNIEnv] 调用: GetStringUTFChars
  参数: �������Xq�Ur�d�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: Pt�Pt��D��Ur�g�q
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: Caused by: android.system.ErrnoException: open failed: EACCES (Permission denied)

[JNIEnv] 调用: GetStringUTFChars
  参数: �XqX��X���Xq�Ur�d�q
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: col_delay_ts, value: 1

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�������D��Ur�g�q
[*] JSONObject.put called with key: col_interval, value: 1

[JNIEnv] 调用: NewStringUTF
  参数: col_interval
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.err

[JNIEnv] 调用: GetStringUTFChars
  参数: X��X���Xq�Ur�d�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �������D��Ur�g�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 	at libcore.io.Linux.open(Native Method)

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�����Xq�Ur�d�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: uabc, value: {"model":"M2012K11AC","zts":1753607531054}
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: ���

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xqx:�x:��D��Ur�g�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.err

[JNIEnv] 调用: GetStringUTFChars
  参数: �����Xq�Ur�d�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: x:�x:��D��Ur�g�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 	at libcore.io.ForwardingOs.open(ForwardingOs.java:567)

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�������Xq�Ur�d�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: i_sdk_v, value: 1.2.0

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�!��!��D��Ur�g�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.err

[JNIEnv] 调用: GetStringUTFChars
  参数: �������Xq�Ur�d�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �!��!��D��Ur�g�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 	at libcore.io.BlockGuardOs.open(BlockGuardOs.java:273)

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�������Xq�Ur�d�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: sd, value: 55449/114133

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xqp��p���D��Ur�g�q
[*] JSONObject.put called with key: apn, value: com.sytt.tzy

[JNIEnv] 调用: NewStringUTF
  参数: apn
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.err

[JNIEnv] 调用: GetStringUTFChars
  参数: �������Xq�Ur�d�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: p��p���D��Ur�g�q
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/umzid_general_config.xml

[JNIEnv] 调用: GetStringUTFChars
  参数: ���
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: col_interval, value: 1

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�;��;��D��Ur�g�q
[*] JSONObject.put called with key: week_on, value: [1,2,3,4,5,6,7]

[JNIEnv] 调用: NewStringUTF
  参数: week_on
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/umzid_general_config.xml

[JNIEnv] 调用: GetStringUTFChars
  参数: �ˮ
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 	at libcore.io.ForwardingOs.open(ForwardingOs.java:567)

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xqؒ�ؒ��Xq�Ur�d�q
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/umzid_general_config.xml.bak

[JNIEnv] 调用: NewStringUTF
  参数: access
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.err

[JNIEnv] 调用: GetStringUTFChars
  参数: ؒ�ؒ��Xq�Ur�d�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �;��;��D��Ur�g�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 	at android.app.ActivityThread$AndroidOs.open(ActivityThread.java:7756)

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�������Xq�Ur�d�q
调用栈:
0xda7de385 libjavacore.so!0x17385,0x7116659b boot-core-libart.oat!0x1059b

[JNIEnv] 调用: GetStringUTFChars
  参数: ����ˮh_�p8h�p(h�p
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: gp, value: 1

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�)��)��D��Ur�g�q
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.err

[JNIEnv] 调用: GetStringUTFChars
  参数: �������Xq�Ur�d�q
调用栈:
0xda7e4391 libjavacore.so!0x1d391,0x711668e9 boot-core-libart.oat!0x108e9
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/umzid_general_config.xml

[JNIEnv] 调用: GetStringUTFChars
  参数: �ˮh_�p8h�p(h�p
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 	at libcore.io.IoBridge.open(IoBridge.java:561)

[JNIEnv] 调用: GetStringUTFChars
  参数: �XqH��H���Xq�Ur�d�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �)��)��D��Ur�g�q
调用栈:
0xda7e43ab libjavacore.so!0x1d3ab,0x711668e9 boot-core-libart.oat!0x108e9
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/umzid_general_config.xml.bak

[JNIEnv] 调用: GetStringUTFChars
  参数: ���A
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.err

[JNIEnv] 调用: GetStringUTFChars
  参数: H��H���Xq�Ur�d�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: apn, value: com.sytt.tzy

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�<��<��D��Ur�g�qXPOq
[*] JSONObject.put called with key: cpu, value: {"n":8,"na":"AArch64 Processor rev 0 (aarch64)Processor : AArch64 Processor rev 4 (aarch64) ","fn":710}

[JNIEnv] 调用: NewStringUTF
  参数: cpu
调用栈:
0xda7e2b8f libjavacore.so!0x1bb8f,0x71166d05 boot-core-libart.oat!0x10d05
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/umzid_general_config.xml

[JNIEnv] 调用: GetStringUTFChars
  参数: 8U�r
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 	... 13 more

[JNIEnv] 调用: GetStringUTFChars
  参数: 9�h���aU�taU�`�
�\�q�&��C
调用栈:
0xdc22e867 libicu_jni.so!0x8867,0x72677869 boot-core-icu4j.oat!0x2e869
[JNIEnv] GetStringUTFChars 返回: UTF-8

[JNIEnv] 调用: GetStringUTFChars
  参数: ����
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: com.sytt.tzy.CheckRoot

[JNIEnv] 调用: GetStringUTFChars
  参数: h���aU�taU�`�
�\�q�&��C
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �<��<��D��Ur�g�qXPOq
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: write failed

[JNIEnv] 调用: GetStringUTFChars
  参数: 9�����aU�taU�`�
�\�q�&��C
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: to, value: 1

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�������D��Ur�g�q
调用栈:
0xda7df40d libjavacore.so!0x1840d,0x711669bb boot-core-libart.oat!0x109bb
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/umzid_general_config.xml

[JNIEnv] 调用: GetStringUTFChars
  参数: ���h_�p0Z�p(h�ph�Kq8h�ph�Kqh�Kq
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: com.sytt.tzy.CheckRoot

[JNIEnv] 调用: GetStringUTFChars
  参数: ����aU�taU�`�
�\�q�&��C
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �������D��Ur�g�q
调用栈:
0xda7e8c87 libjavacore.so!0x21c87,0x7116694f boot-core-libart.oat!0x1094f
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/umzid_general_config.xml

[JNIEnv] 调用: GetStringUTFChars
  参数: �ˮh_�p0Z�p(h�ph�Kq8h�ph�Kqh�Kq
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: week_on, value: [1,2,3,4,5,6,7]

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xqh=�h=��D��Ur�g�q���q
[*] JSONObject.put called with key: hit_sdk, value: uapp

[JNIEnv] 调用: NewStringUTF
  参数: hit_sdk
调用栈:
0xda7e4143 libjavacore.so!0x1d143,0x71164e9f boot-core-libart.oat!0xee9f
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/umzid_general_config.xml.bak

[JNIEnv] 调用: GetStringUTFChars
  参数: ���
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: h=�h=��D��Ur�g�q���q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: to read /data

[JNIEnv] 调用: GetStringUTFChars
  参数: �A�
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: mo, value: 1

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq3�3��D��Ur�g�q
调用栈:
0xda7e2b8f libjavacore.so!0x1bb8f,0x71166d05 boot-core-libart.oat!0x10d05
[JNIEnv] GetStringUTFChars 返回: /data/su_test

[JNIEnv] 调用: NewStringUTF
  参数: open
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/umzid_general_config.xml

[JNIEnv] 调用: GetStringUTFChars
  参数: `��
调用栈:
0xda7e2bc3 libjavacore.so!0x1bbc3,0x71166d05 boot-core-libart.oat!0x10d05

[JNIEnv] 调用: NewStringUTF
  参数: No such file or directory
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.uyumao.sdk.UYMManager
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: 3�3��D��Ur�g�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: cpu, value: {"n":8,"na":"AArch64 Processor rev 0 (aarch64)Processor : AArch64 Processor rev 4 (aarch64) ","fn":710}

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�=��=��D��Ur�g�q�J�p
[*] JSONObject.put called with key: abi, value: armeabi-v7a

[JNIEnv] 调用: NewStringUTF
  参数: abi
调用栈:
0xda7e6703 libjavacore.so!0x1f703,0x71166c91 boot-core-libart.oat!0x10c91

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�������Xq�Ur�d�q
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �=��=��D��Ur�g�q�J�p
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.err

[JNIEnv] 调用: GetStringUTFChars
  参数: �������Xq�Ur�d�q
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: ca, value: 1

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: java.io.FileNotFoundException: /data/su_test: open failed: ENOENT (No such file or directory)

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�����Xq�Ur�d�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: 
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.err

[JNIEnv] 调用: GetStringUTFChars
  参数: �����Xq�Ur�d�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: hit_sdk, value: uapp

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�<��<��D��Ur�g�q
[*] JSONObject.put called with key: cfg, value: [{"col_delay_times":"1","col_delay_ts":"1","col_interval":"1","week_on":[1,2,3,4,5,6,7],"hit_sdk":"uapp"}]

[JNIEnv] 调用: NewStringUTF
  参数: cfg
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 	at libcore.io.IoBridge.open(IoBridge.java:575)

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�������Xq�Ur�d�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �<��<��D��Ur�g�q
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: abi, value: armeabi-v7a

[JNIEnv] 调用: GetStringUTFChars
  参数: �XqX>�X>��D��Ur�g�q�1Rq
[*] JSONObject.put called with key: abi2, value: armeabi

[JNIEnv] 调用: NewStringUTF
  参数: abi2
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.err

[JNIEnv] 调用: GetStringUTFChars
  参数: �������Xq�Ur�d�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: X>�X>��D��Ur�g�q�1Rq
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 	at java.io.FileInputStream.<init>(FileInputStream.java:160)

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xqȫ�ȫ��Xq�Ur�d�q
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: fl, value: 1

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�����D��Ur�g�q
[*] JSONObject.put called with key: _dsk_s, value: noper

[JNIEnv] 调用: NewStringUTF
  参数: _dsk_s
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.err

[JNIEnv] 调用: GetStringUTFChars
  参数: ȫ�ȫ��Xq�Ur�d�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �����D��Ur�g�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 	at com.sytt.tzy.CheckRoot.readFile(CheckRoot.java:181)

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�������Xq�Ur�d�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: cfg, value: [{"col_delay_times":"1","col_delay_ts":"1","col_interval":"1","week_on":[1,2,3,4,5,6,7],"hit_sdk":"uapp"}]

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259
[*] JSONObject.put called with key: sdk, value: ["uapp"]

[JNIEnv] 调用: NewStringUTF
  参数: sdk
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.err

[JNIEnv] 调用: GetStringUTFChars
  参数: �������Xq�Ur�d�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: 
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 	at com.sytt.tzy.CheckRoot.checkAccessRootData(CheckRoot.java:149)

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�������Xq�Ur�d�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: abi2, value: armeabi
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �XqPI�PI��D��Ur�g�q
[*] JSONObject.put called with key: ram, value: 2148/-548

[JNIEnv] 调用: NewStringUTF
  参数: ram
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.err

[JNIEnv] 调用: GetStringUTFChars
  参数: �������Xq�Ur�d�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: PI�PI��D��Ur�g�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 	at com.sytt.tzy.CheckRoot.isDeviceRooted(CheckRoot.java:31)

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq �� ���Xq�Ur�d�q
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: _dsk_s, value: noper

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�������D��Ur�g�q
[*] JSONObject.put called with key: _thm_z, value: noper

[JNIEnv] 调用: NewStringUTF
  参数: _thm_z
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.err

[JNIEnv] 调用: GetStringUTFChars
  参数:  �� ���Xq�Ur�d�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �������D��Ur�g�q
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 	at com.sytt.tzy.UnityPlayerActivity.CheckDevicRooted(UnityPlayerActivity.java:553)

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq(��(���Xq�Ur�d�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: sdk, value: ["uapp"]

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq@M�@M��D��Ur�g�q
[*] JSONObject.put called with key: col_po, value: {"cfg":[{"col_delay_times":"1","col_delay_ts":"1","col_interval":"1","week_on":[1,2,3,4,5,6,7],"hit_sdk":"uapp"}],"sdk":["uapp"]}

[JNIEnv] 调用: NewStringUTF
  参数: col_po
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.err

[JNIEnv] 调用: GetStringUTFChars
  参数: (��(���Xq�Ur�d�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 	at com.unity3d.player.UnityPlayer.nativeRender(Native Method)

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq �� ���Xq�Ur�d�q
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: @M�@M��D��Ur�g�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.err

[JNIEnv] 调用: GetStringUTFChars
  参数:  �� ���Xq�Ur�d�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: ram, value: 2148/-548

[JNIEnv] 调用: GetStringUTFChars
  参数: �XqXT�XT��D��Ur�g�q
[*] JSONObject.put called with key: rom, value: 55449/114133

[JNIEnv] 调用: NewStringUTF
  参数: rom
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 	at com.unity3d.player.UnityPlayer.access$300(Unknown Source:0)

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq8��8���Xq�Ur�d�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: XT�XT��D��Ur�g�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.err

[JNIEnv] 调用: GetStringUTFChars
  参数: 8��8���Xq�Ur�d�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 	at com.unity3d.player.UnityPlayer$e$1.handleMessage(Unknown Source:95)

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�����Xq�Ur�d�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: _thm_z, value: noper

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq(��(���D��Ur�g�q
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259
[*] JSONObject.put called with key: _gdf_r, value: noper

[JNIEnv] 调用: NewStringUTF
  参数: _gdf_r
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.err

[JNIEnv] 调用: GetStringUTFChars
  参数: �����Xq�Ur�d�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: (��(���D��Ur�g�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 	at android.os.Handler.dispatchMessage(Handler.java:102)

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�������Xq�Ur�d�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: col_po, value: {"cfg":[{"col_delay_times":"1","col_delay_ts":"1","col_interval":"1","week_on":[1,2,3,4,5,6,7],"hit_sdk":"uapp"}],"sdk":["uapp"]}
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �XqhU�hU��D��Ur�g�q
[*] JSONObject.put called with key: col_delay_times, value: 2

[JNIEnv] 调用: NewStringUTF
  参数: col_delay_times
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.err

[JNIEnv] 调用: GetStringUTFChars
  参数: �������Xq�Ur�d�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: hU�hU��D��Ur�g�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 	at android.os.Looper.loopOnce(Looper.java:201)

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq`��`���Xq�Ur�d�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: rom, value: 55449/114133

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq_�_��D��Ur�g�q
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259
[*] JSONObject.put called with key: cn, value: WIFI

[JNIEnv] 调用: NewStringUTF
  参数: cn
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.err

[JNIEnv] 调用: GetStringUTFChars
  参数: `��`���Xq�Ur�d�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: _�_��D��Ur�g�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 	at android.os.Looper.loop(Looper.java:288)

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq8��8���Xq�Ur�d�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: _gdf_r, value: noper

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�������D��Ur�g�q"
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259
[*] JSONObject.put called with key: _dsk_s, value: noper

[JNIEnv] 调用: NewStringUTF
  参数: _dsk_s
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �������D��Ur�g�q"
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.err

[JNIEnv] 调用: GetStringUTFChars
  参数: 8��8���Xq�Ur�d�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 	at com.unity3d.player.UnityPlayer$e.run(Unknown Source:20)

[JNIEnv] 调用: NewStringUTF
  参数: No such file or directory
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: col_delay_times, value: 2

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq ]� ]��D��Ur�g�q
[*] JSONObject.put called with key: hour_on, value: 0-23

[JNIEnv] 调用: NewStringUTF
  参数: hour_on
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数:  ]� ]��D��Ur�g�q
调用栈:
0xda7e6703 libjavacore.so!0x1f703,0x71166c91 boot-core-libart.oat!0x10c91

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�������Xq�Ur�d�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: cn, value: WIFI
[*] JSONObject.put called with key: tn, value: 0

[JNIEnv] 调用: NewStringUTF
  参数: tn
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.err

[JNIEnv] 调用: GetStringUTFChars
  参数: �������Xq�Ur�d�q
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq@n�@n��D��Ur�g�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: Caused by: android.system.ErrnoException: open failed: ENOENT (No such file or directory)

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�������Xq�Ur�d�q
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.err

[JNIEnv] 调用: GetStringUTFChars
  参数: �������Xq�Ur�d�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: @n�@n��D��Ur�g�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 	at libcore.io.Linux.open(Native Method)

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq@��@���Xq�Ur�d�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: _dsk_s, value: noper

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq(��(���D��Ur�g�q
[*] JSONObject.put called with key: _thm_z, value: noper

[JNIEnv] 调用: NewStringUTF
  参数: _thm_z
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.err

[JNIEnv] 调用: GetStringUTFChars
  参数: @��@���Xq�Ur�d�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: (��(���D��Ur�g�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: hour_on, value: 0-23

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq`d�`d��D��Ur�g�q
[*] JSONObject.put called with key: col_interval, value: 86400

[JNIEnv] 调用: NewStringUTF
  参数: col_interval
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 	at libcore.io.ForwardingOs.open(ForwardingOs.java:567)

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�����Xq�Ur�d�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: `d�`d��D��Ur�g�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.err

[JNIEnv] 调用: GetStringUTFChars
  参数: �����Xq�Ur�d�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: tn, value: 0
[*] JSONObject.put called with key: ev, value: {"sr":"1080*1920","dpi":"397.565*399.737","wf":"{\"bs\":\"ea:f3:69:d5:21:cc\",\"ss\":\"\\\"b306bdba-b\\\"\"}","sen":"1,35,2,14,4,16,8,5,5,9,10,11,18,19,17,15,20,3,22,18,19,33171007,33171039,33171039,33171031,33171045,33171045,33171085,33171089,29,29,27,27,33171038,33171036,33171038,33171032,33171036,33171055,33171055,33171030,33171032,33171030,33171097,30,33171097,30,33171027,33171029,33171027,33171088,33171088,33171029","pcn":"com.sytt.tzy","osn":"12","av":"1.0.0","ch":"Wechat_Sdk","mf":"Xiaomi","sv":"2.0.4","osd":"SKQ1.211006.001 test-keys","prod":"alioth","tags":"release-keys","id":"SKQ1.211006.001","fng":"Redmi\/alioth\/alioth:12\/SKQ1.211006.001\/V13.0.7.0.SKHCNXM:user\/release-keys","lch":"com.miui.home","ov":"32","os":1,"op":"46001","lg":"zh","md":"M2012K11AC","tz":"Asia\/Shanghai","sd":"55449\/114133","apn":"com.sytt.tzy","cpu":"{\"n\":8,\"na\":\"AArch64 Processor rev 0 (aarch64)Processor : AArch64 Processor rev 4 (aarch64) \",\"fn\":710}","abi":"armeabi-v7a","abi2":"armeabi","ram":"2148\/-548","rom":"55449\/114133","cn":"WIFI","tn":0}

[JNIEnv] 调用: NewStringUTF
  参数: ev
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 	at libcore.io.BlockGuardOs.open(BlockGuardOs.java:273)

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�������Xq�Ur�d�q
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �XqP{�P{��D��Ur�g�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.err

[JNIEnv] 调用: GetStringUTFChars
  参数: �������Xq�Ur�d�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: P{�P{��D��Ur�g�q
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: _thm_z, value: noper

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�����D��Ur�g�q
[*] JSONObject.put called with key: _gdf_r, value: noper

[JNIEnv] 调用: NewStringUTF
  参数: _gdf_r
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 	at libcore.io.ForwardingOs.open(ForwardingOs.java:567)

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �����D��Ur�g�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.err

[JNIEnv] 调用: GetStringUTFChars
  参数: 
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: col_interval, value: 86400

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�������D��Ur�g�q
[*] JSONObject.put called with key: col_delay_ts, value: 30

[JNIEnv] 调用: NewStringUTF
  参数: col_delay_ts
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 	at android.app.ActivityThread$AndroidOs.open(ActivityThread.java:7756)

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�������Xq�Ur�d�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �������D��Ur�g�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: ev, value: {"sr":"1080*1920","dpi":"397.565*399.737","wf":"{\"bs\":\"ea:f3:69:d5:21:cc\",\"ss\":\"\\\"b306bdba-b\\\"\"}","sen":"1,35,2,14,4,16,8,5,5,9,10,11,18,19,17,15,20,3,22,18,19,33171007,33171039,33171039,33171031,33171045,33171045,33171085,33171089,29,29,27,27,33171038,33171036,33171038,33171032,33171036,33171055,33171055,33171030,33171032,33171030,33171097,30,33171097,30,33171027,33171029,33171027,33171088,33171088,33171029","pcn":"com.sytt.tzy","osn":"12","av":"1.0.0","ch":"Wechat_Sdk","mf":"Xiaomi","sv":"2.0.4","osd":"SKQ1.211006.001 test-keys","prod":"alioth","tags":"release-keys","id":"SKQ1.211006.001","fng":"Redmi\/alioth\/alioth:12\/SKQ1.211006.001\/V13.0.7.0.SKHCNXM:user\/release-keys","lch":"com.miui.home","ov":"32","os":1,"op":"46001","lg":"zh","md":"M2012K11AC","tz":"Asia\/Shanghai","sd":"55449\/114133","apn":"com.sytt.tzy","cpu":"{\"n\":8,\"na\":\"AArch64 Processor rev 0 (aarch64)Processor : AArch64 Processor rev 4 (aarch64) \",\"fn\":710}","abi":"armeabi-v7a","abi2":"armeabi","ram":"2148\/-548","rom":"55449\/114133","cn":"WIFI","tn":0}

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�����D��Ur�g�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.err

[JNIEnv] 调用: GetStringUTFChars
  参数: �������Xq�Ur�d�q

[JNIEnv] 调用: GetStringUTFChars
  参数: P��
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �����D��Ur�g�q
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 	at libcore.io.IoBridge.open(IoBridge.java:561)

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xqp��p���Xq�Ur�d�q
调用栈:
0xe727c21b libandroid_runtime.so!0xb821b,0x71fbe09d boot-framework.oat!0x18a09d
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/databases/wxop_tencent_analysis.db

[JNIEnv] 调用: GetStringUTFChars
  参数: �oLq
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: _gdf_r, value: noper

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq���D��Ur�g�q
[*] JSONObject.put called with key: _gdf_r, value: noper

[JNIEnv] 调用: NewStringUTF
  参数: _gdf_r
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.err

[JNIEnv] 调用: GetStringUTFChars
  参数: p��p���Xq�Ur�d�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: ���D��Ur�g�q
调用栈:
0xe7240f31 libandroid_runtime.so!0x7cf31,0x71fc0ddd boot-framework.oat!0x18cddd
[JNIEnv] GetStringUTFChars 返回: CursorWindowStats

[JNIEnv] 调用: GetStringUTFChars
  参数: ����/�H��$�
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 	... 12 more

[JNIEnv] 调用: GetStringUTFChars
  参数: 9�����aU�taU�`�
�\�q�&��
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: MtaSDK

[JNIEnv] 调用: GetStringUTFChars
  参数: �/�H��$�
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: com.sytt.tzy.CheckRoot

[JNIEnv] 调用: GetStringUTFChars
  参数: ����aU�taU�`�
�\�q�&��
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: col_delay_ts, value: 30
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq0��0���D��Ur�g�q
[*] JSONObject.put called with key: hit_sdk, value: uapp

[JNIEnv] 调用: NewStringUTF
  参数: hit_sdk
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: strRead=null

[JNIEnv] 调用: GetStringUTFChars
  参数: 9����aU�daU�`�
���q��A�
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: 0��0���D��Ur�g�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 
java.lang.NoClassDefFoundError: Failed resolution of: Lorg/apache/http/client/methods/HttpPost;
	at com.tencent.wxop.stat.i.a(Unknown Source:168)
	at com.tencent.wxop.stat.k.run(Unknown Source:6)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1167)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:641)
	at java.lang.Thread.run(Thread.java:920)
Caused by: java.lang.ClassNotFoundException: org.apache.http.client.methods.HttpPost
	... 5 more

调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: _gdf_r, value: noper

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq(�(��D��Ur�g�q
[*] JSONObject.put called with key: _thm_z, value: noper

[JNIEnv] 调用: NewStringUTF
  参数: _thm_z
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: com.sytt.tzy.CheckRoot

[JNIEnv] 调用: GetStringUTFChars
  参数: ���aU�daU�`�
���q��A�
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: (�(��D��Ur�g�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: to exec su

[JNIEnv] 调用: NewStringUTF
  参数: error=2, No such file or directory
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: hit_sdk, value: uapp
[*] JSONObject.put called with key: cfg, value: [{"col_delay_times":"2","hour_on":"0-23","col_interval":"86400","col_delay_ts":"30","hit_sdk":"uapp"}]

[JNIEnv] 调用: NewStringUTF
  参数: cfg
调用栈:
0xda7a98ad libopenjdk.so!0x1d8ad,0xda7a97c5 libopenjdk.so!UNIXProcess_forkAndExec+0x344,0x70e68a29 boot.oat!0xaaa29

[JNIEnv] 调用: GetStringUTFChars
  参数: 9�x���aU�daU�`�
���q��A��������aU�`8�
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: com.sytt.tzy.CheckRoot

[JNIEnv] 调用: GetStringUTFChars
  参数: x���aU�daU�`�
���q��A��������aU�`8�
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: Unexpected error - Here is what I know: Cannot run program "su": error=2, No such file or directory

[JNIEnv] 调用: GetStringUTFChars
  参数: �XqH��H���Xq�Ur�d�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.err

[JNIEnv] 调用: GetStringUTFChars
  参数: H��H���Xq�Ur�d�q
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�;��;��D��Ur�g�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: java.lang.NullPointerException: Attempt to invoke virtual method 'void java.lang.Process.destroy()' on a null object reference

[JNIEnv] 调用: GetStringUTFChars
  参数: �XqP��P���Xq�Ur�d�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �;��;��D��Ur�g�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.err

[JNIEnv] 调用: GetStringUTFChars
  参数: P��P���Xq�Ur�d�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: cfg, value: [{"col_delay_times":"2","hour_on":"0-23","col_interval":"86400","col_delay_ts":"30","hit_sdk":"uapp"}]

[JNIEnv] 调用: GetStringUTFChars
  参数: �XqP��P���D��Ur�g�q
[*] JSONObject.put called with key: sdk, value: ["uapp"]

[JNIEnv] 调用: NewStringUTF
  参数: sdk
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 	at com.sytt.tzy.CheckRoot.checkGetRootAuth(CheckRoot.java:87)

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq8��8���Xq�Ur�d�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: P��P���D��Ur�g�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.err

[JNIEnv] 调用: GetStringUTFChars
  参数: 8��8���Xq�Ur�d�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 	at com.sytt.tzy.CheckRoot.isDeviceRooted(CheckRoot.java:34)

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�����Xq�Ur�d�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: _thm_z, value: noper
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq(J�(J��D��Ur�g�q
[*] JSONObject.put called with key: _dsk_s, value: noper

[JNIEnv] 调用: NewStringUTF
  参数: _dsk_s
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.err

[JNIEnv] 调用: GetStringUTFChars
  参数: �����Xq�Ur�d�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: (J�(J��D��Ur�g�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 	at com.sytt.tzy.UnityPlayerActivity.CheckDevicRooted(UnityPlayerActivity.java:553)

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�����Xq�Ur�d�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: sdk, value: ["uapp"]
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xqp��p���D��Ur�g�q
[*] JSONObject.put called with key: col_qsc, value: {"cfg":[{"col_delay_times":"2","hour_on":"0-23","col_interval":"86400","col_delay_ts":"30","hit_sdk":"uapp"}],"sdk":["uapp"]}

[JNIEnv] 调用: NewStringUTF
  参数: col_qsc
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.err

[JNIEnv] 调用: GetStringUTFChars
  参数: �����Xq�Ur�d�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: p��p���D��Ur�g�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 	at com.unity3d.player.UnityPlayer.nativeRender(Native Method)

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�����Xq�Ur�d�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: _dsk_s, value: noper

[JNIEnv] 调用: GetStringUTFChars
  参数:  ��H��H\�p�?��@� ��H��LBǽ�9r\͙q�@�p��H��H\�p+-
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq8]�8]��D��Ur�g�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.err

[JNIEnv] 调用: GetStringUTFChars
  参数: �����Xq�Ur�d�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: 8]�8]��D��Ur�g�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 	at com.unity3d.player.UnityPlayer.access$300(Unknown Source:0)

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�����Xq�Ur�d�q
调用栈:
0xe72b6cfd libandroid_runtime.so!0xf2cfd,0x71fbaac7 boot-framework.oat!0x186ac7
[JNIEnv] GetStringUTFChars 返回: status_bar_height

[JNIEnv] 调用: GetStringUTFChars
  参数: H��H\�p�?��@� ��H��LBǽ�9r\͙q�@�p��H��H\�p+-

[JNIEnv] 调用: GetStringUTFChars
  参数: ��
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: col_qsc, value: {"cfg":[{"col_delay_times":"2","hour_on":"0-23","col_interval":"86400","col_delay_ts":"30","hit_sdk":"uapp"}],"sdk":["uapp"]}
[*] JSONObject.put called with key: col_delay_times, value: 1

[JNIEnv] 调用: NewStringUTF
  参数: col_delay_times
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.err

[JNIEnv] 调用: GetStringUTFChars
  参数: �����Xq�Ur�d�q
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/app_UApm/656436ae58a9eb5b0a11a63e

[JNIEnv] 调用: GetStringUTFChars
  参数: p�
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 	at com.unity3d.player.UnityPlayer$e$1.handleMessage(Unknown Source:95)

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�����Xq�Ur�d�q
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/app_UApm/656436ae58a9eb5b0a11a63e/ready

[JNIEnv] 调用: GetStringUTFChars
  参数: p�
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.err

[JNIEnv] 调用: GetStringUTFChars
  参数: �����Xq�Ur�d�q
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/app_UApm/656436ae58a9eb5b0a11a63e/ready

[JNIEnv] 调用: GetStringUTFChars
  参数: p�
调用栈:
0xe72b6d1f libandroid_runtime.so!0xf2d1f,0x71fbaac7 boot-framework.oat!0x186ac7
[JNIEnv] GetStringUTFChars 返回: dimen

[JNIEnv] 调用: GetStringUTFChars
  参数: H\�p�?��@� ��H��LBǽ�9r\͙q�@�p��H��H\�p+-
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�m��m��D��Ur�g�q"
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 	at android.os.Handler.dispatchMessage(Handler.java:102)

[JNIEnv] 调用: GetStringUTFChars
  参数: �XqP�P��Xq�Ur�d�q
调用栈:
0xe72b6d59 libandroid_runtime.so!0xf2d59,0x71fbaac7 boot-framework.oat!0x186ac7
[JNIEnv] GetStringUTFChars 返回: android

[JNIEnv] 调用: GetStringUTFChars
  参数: ��Nq
调用栈:
0xda7a2c27 libopenjdk.so!Java_java_io_UnixFileSystem_getBooleanAttributes0+0x22,0x70e65c27 boot.oat!0xa7c27
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/app_UApm/656436ae58a9eb5b0a11a63e/ready

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x19
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/app_UApm/656436ae58a9eb5b0a11a63e/ready

[JNIEnv] 调用: GetStringUTFChars
  参数: ��
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �m��m��D��Ur�g�q"
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.err

[JNIEnv] 调用: GetStringUTFChars
  参数: P�P��Xq�Ur�d�q
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/app_UApm/656436ae58a9eb5b0a11a63e

[JNIEnv] 调用: GetStringUTFChars
  参数: �
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: col_delay_times, value: 1
[*] JSONObject.put called with key: col_delay_ts, value: 0

[JNIEnv] 调用: NewStringUTF
  参数: col_delay_ts
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/app_UApm/656436ae58a9eb5b0a11a63e/ready

[JNIEnv] 调用: GetStringUTFChars
  参数: �
调用栈:
0xda7a9105 libopenjdk.so!Mock_getProperty+0x2c,0x70e653e3 boot.oat!0xa73e3
[JNIEnv] GetStringUTFChars 返回: lsp.display.statusbar.height

[JNIEnv] 调用: NewStringUTF
  参数: 80
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 	at android.os.Looper.loopOnce(Looper.java:201)

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�����Xq�Ur�d�q
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq|�|��D��Ur�g�q
调用栈:
0xda7a9141 libopenjdk.so!Mock_getProperty+0x68,0x70e653e3 boot.oat!0xa73e3
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/app_UApm/656436ae58a9eb5b0a11a63e/ready

[JNIEnv] 调用: GetStringUTFChars
  参数: �
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: |�|��D��Ur�g�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: col_delay_ts, value: 0

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�������D��Ur�g�q��P
[*] JSONObject.put called with key: col_interval, value: 300

[JNIEnv] 调用: NewStringUTF
  参数: col_interval
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.err

[JNIEnv] 调用: GetStringUTFChars
  参数: �����Xq�Ur�d�q
调用栈:
0xda7a2c27 libopenjdk.so!Java_java_io_UnixFileSystem_getBooleanAttributes0+0x22,0x70e65c27 boot.oat!0xa7c27
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/app_UApm/656436ae58a9eb5b0a11a63e/ready

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x11
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/app_UApm/656436ae58a9eb5b0a11a63e/ready

[JNIEnv] 调用: GetStringUTFChars
  参数: @�
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �������D��Ur�g�q��P
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 	at android.os.Looper.loop(Looper.java:288)

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�����Xq�Ur�d�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: a_st_h, value: 80

[JNIEnv] 调用: GetStringUTFChars
  参数: ���H��H\�p�?��@����H���Bǽ�9r\͙q�@�p��H��H\�p.-
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq(��(���D��Ur�g�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.err

[JNIEnv] 调用: GetStringUTFChars
  参数: �����Xq�Ur�d�q
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/app_UApm/656436ae58a9eb5b0a11a63e

[JNIEnv] 调用: GetStringUTFChars
  参数: ��
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: (��(���D��Ur�g�q
调用栈:
0xe72b6cfd libandroid_runtime.so!0xf2cfd,0x71fbaac7 boot-framework.oat!0x186ac7
[JNIEnv] GetStringUTFChars 返回: navigation_bar_height

[JNIEnv] 调用: GetStringUTFChars
  参数: H��H\�p�?��@����H���Bǽ�9r\͙q�@�p��H��H\�p.-
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 	at com.unity3d.player.UnityPlayer$e.run(Unknown Source:20)

[JNIEnv] 调用: GetStringUTFChars
  参数: 0H���fU��fU�`�
�L���(���
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/app_UApm/656436ae58a9eb5b0a11a63e/upload

[JNIEnv] 调用: GetStringUTFChars
  参数: ��
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: col_interval, value: 300
[*] JSONObject.put called with key: week_on, value: [1,2,3,4,5,6,7]

[JNIEnv] 调用: NewStringUTF
  参数: week_on
调用栈:
0xe72b6d1f libandroid_runtime.so!0xf2d1f,0x71fbaac7 boot-framework.oat!0x186ac7
[JNIEnv] GetStringUTFChars 返回: dimen

[JNIEnv] 调用: GetStringUTFChars
  参数: H\�p�?��@����H���Bǽ�9r\͙q�@�p��H��H\�p.-
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: umlog

[JNIEnv] 调用: GetStringUTFChars
  参数: ��fU��fU�`�
�L���(���
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/app_UApm/656436ae58a9eb5b0a11a63e/upload

[JNIEnv] 调用: GetStringUTFChars
  参数: ��
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: Event: simulator--yes-M2012K11AC-6e79ba413ab4847d1f966397b6b6df18
[*] JSONObject.put called with key: id, value: simulator

[JNIEnv] 调用: NewStringUTF
  参数: id
调用栈:
0xe72b6d59 libandroid_runtime.so!0xf2d59,0x71fbaac7 boot-framework.oat!0x186ac7
[JNIEnv] GetStringUTFChars 返回: android

[JNIEnv] 调用: GetStringUTFChars
  参数: �XqP��P���D��Ur�g�q����
调用栈:
0xda7a2c27 libopenjdk.so!Java_java_io_UnixFileSystem_getBooleanAttributes0+0x22,0x70e65c27 boot.oat!0xa7c27
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/app_UApm/656436ae58a9eb5b0a11a63e/upload

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x15
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/app_UApm/656436ae58a9eb5b0a11a63e/upload
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: P��P���D��Ur�g�q����
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: a_nav_h, value: 132

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�������D��Ur�g�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �������D��Ur�g�q
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: week_on, value: [1,2,3,4,5,6,7]

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�����D��Ur�g�q��ȭ�X��
[*] JSONObject.put called with key: hit_sdk, value: uapp

[JNIEnv] 调用: NewStringUTF
  参数: hit_sdk
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �����D��Ur�g�q��ȭ�X��
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: a_den, value: 2.75

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�������D��Ur�g�qp���
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �������D��Ur�g�qp���
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: a_dpi, value: 440

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq#�#��D��Ur�g�q
[*] JSONObject.put called with key: scr, value: {"a_st_h":80,"a_nav_h":132,"a_den":2.75,"a_dpi":440}

[JNIEnv] 调用: NewStringUTF
  参数: scr
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: #�#��D��Ur�g�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: id, value: simulator

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�������D��Ur�g�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �������D��Ur�g�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: hit_sdk, value: uapp

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�#��#��D��Ur�g�q�|Wq�D�
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259
[*] JSONObject.put called with key: cfg, value: [{"col_delay_times":"1","col_delay_ts":"0","col_interval":"300","week_on":[1,2,3,4,5,6,7],"hit_sdk":"uapp"}]

[JNIEnv] 调用: NewStringUTF
  参数: cfg
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �#��#��D��Ur�g�q�|Wq�D�
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: ts, value: 1753607965839

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq $� $��D��Ur�g�q���
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数:  $� $��D��Ur�g�q���
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: __t, value: 2049

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�������D��Ur�g�q
[*] JSONObject.put called with key: simulator, value: yes-M2012K11AC-6e79ba413ab4847d1f966397b6b6df18

[JNIEnv] 调用: NewStringUTF
  参数: simulator
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �������D��Ur�g�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: cfg, value: [{"col_delay_times":"1","col_delay_ts":"0","col_interval":"300","week_on":[1,2,3,4,5,6,7],"hit_sdk":"uapp"}]

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�����D��Ur�g�q
[*] JSONObject.put called with key: sdk, value: ["uapp"]

[JNIEnv] 调用: NewStringUTF
  参数: sdk
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �����D��Ur�g�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: scr, value: {"a_st_h":80,"a_nav_h":132,"a_den":2.75,"a_dpi":440}
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�������D��Ur�g�qؿ��D�
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �������D��Ur�g�qؿ��D�
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: a_fit, value: 1753332282051

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�â�â�D��Ur�g�q8¢�D�
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �â�â�D��Ur�g�q8¢�D�
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: a_alut, value: 1753332282051

[JNIEnv] 调用: GetStringUTFChars
  参数: �XqX-�X-��D��Ur�g�q
[*] JSONObject.put called with key: a_c, value: null

[JNIEnv] 调用: NewStringUTF
  参数: a_c
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: X-�X-��D��Ur�g�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: simulator, value: yes-M2012K11AC-6e79ba413ab4847d1f966397b6b6df18

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq`��`���D��Ur�g�q
[*] JSONObject.put called with key: __i, value: 267A00E061645180845BBD7794F3239E

[JNIEnv] 调用: NewStringUTF
  参数: __i
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: `��`���D��Ur�g�q
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: sdk, value: ["uapp"]

[JNIEnv] 调用: GetStringUTFChars
  参数: �XqHϢHϢ�D��Ur�g�q�͢�'
[*] JSONObject.put called with key: screen_on, value: {"cfg":[{"col_delay_times":"1","col_delay_ts":"0","col_interval":"300","week_on":[1,2,3,4,5,6,7],"hit_sdk":"uapp"}],"sdk":["uapp"]}

[JNIEnv] 调用: NewStringUTF
  参数: screen_on
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: HϢHϢ�D��Ur�g�q�͢�'
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: a_uid, value: 10150

[JNIEnv] 调用: GetStringUTFChars
  参数: P9�

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�6��6��D��Ur�g�q
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /system/app/Superuser.apk

[JNIEnv] 调用: NewStringUTF
  参数: access
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �6��6��D��Ur�g�q
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: __i, value: 267A00E061645180845BBD7794F3239E

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�����D��Ur�g�q
调用栈:
0xda7de385 libjavacore.so!0x17385,0x7116659b boot-core-libart.oat!0x1059b

[JNIEnv] 调用: GetStringUTFChars
  参数: �Ѣ
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �����D��Ur�g�q
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /system/app/Kinguser.apk

[JNIEnv] 调用: NewStringUTF
  参数: access
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: screen_on, value: {"cfg":[{"col_delay_times":"1","col_delay_ts":"0","col_interval":"300","week_on":[1,2,3,4,5,6,7],"hit_sdk":"uapp"}],"sdk":["uapp"]}

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xqh7�h7��D��Ur�g�qp��
[*] JSONObject.put called with key: col_delay_times, value: 2

[JNIEnv] 调用: NewStringUTF
  参数: col_delay_times
调用栈:
0xda7de385 libjavacore.so!0x17385,0x7116659b boot-core-libart.oat!0x1059b
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: h7�h7��D��Ur�g�qp��
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: ds, value: 0

[JNIEnv] 调用: GetStringUTFChars
  参数: �XqH֢H֢�D��Ur�g�q0֢
[*] JSONObject.put called with key: pn, value: com.sytt.tzy

[JNIEnv] 调用: NewStringUTF
  参数: pn
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: H֢H֢�D��Ur�g�q0֢
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: a_root, value: 1

[JNIEnv] 调用: GetStringUTFChars
  参数: �XqX��X���D��Ur�g�q"
[*] JSONObject.put called with key: tf, value: 2025/7/27 下午5:19

[JNIEnv] 调用: NewStringUTF
  参数: tf
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: X��X���D��Ur�g�q"
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: col_delay_times, value: 2

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�?��?��D��Ur�g�q
[*] JSONObject.put called with key: hour_on, value: 0-23

[JNIEnv] 调用: NewStringUTF
  参数: hour_on
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �?��?��D��Ur�g�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: pn, value: com.sytt.tzy

[JNIEnv] 调用: GetStringUTFChars
  参数: �XqP��P���D��Ur�g�q

[JNIEnv] 调用: GetStringUTFChars
  参数: 0H�hA�,fU�fU�`�
�L���H@��@�
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: P��P���D��Ur�g�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: umlog

[JNIEnv] 调用: GetStringUTFChars
  参数: hA�,fU�fU�`�
�L���H@��@�
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: tf, value: 2025/7/27 下午5:19

[JNIEnv] 调用: GetStringUTFChars
  参数: 8	Rq���ph�r���8	Rqh�r_�7r0)�qXe�r
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: Event: openUI--MessageDialog
[*] JSONObject.put called with key: id, value: openUI

[JNIEnv] 调用: NewStringUTF
  参数: id
调用栈:
0xe723de83 libandroid_runtime.so!0x79e83,0x71fcdccb boot-framework.oat!0x199ccb
[JNIEnv] GetStringUTFChars 返回: debug.force_rtl

[JNIEnv] 调用: NewStringUTF
  参数: false
调用栈:
0xe723e443 libandroid_runtime.so!0x7a443,0xe633e5b5 libc.so!_ZN16SystemProperties12ReadCallbackEPK9prop_infoPFvPvPKcS5_jES3_+0xa8,0xe723de97 libandroid_runtime.so!0x79e97,0x71fcdccb boot-framework.oat!0x199ccb

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: s_fs, value: 1.0

[JNIEnv] 调用: GetStringUTFChars
  参数: �|�

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�����D��Ur�g�q
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: android.content.Context
[*] JSONObject.put called with key: a_meid, value: 

[JNIEnv] 调用: NewStringUTF
  参数: a_meid
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �����D��Ur�g�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: hour_on, value: 0-23

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq0K�0K��D��Ur�g�q
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259
[*] JSONObject.put called with key: col_interval, value: 86400

[JNIEnv] 调用: NewStringUTF
  参数: col_interval
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: 0K�0K��D��Ur�g�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: id, value: openUI

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq@�@��D��Ur�g�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: @�@��D��Ur�g�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: a_meid, value: 

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�K��K��D��Ur�g�q�|Wq�D�
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �|�
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �K��K��D��Ur�g�q�|Wq�D�
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: android.content.Context

[JNIEnv] 调用: GetStringUTFChars
  参数: pOWq
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: ts, value: 1753607968455

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xqp�p��D��Ur�g�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: p�p��D��Ur�g�q
调用栈:
0xda7a9105 libopenjdk.so!Mock_getProperty+0x2c,0x70e653e3 boot.oat!0xa73e3
[JNIEnv] GetStringUTFChars 返回: persist.radio.default.data

[JNIEnv] 调用: NewStringUTF
  参数: 0
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: col_interval, value: 86400

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq8L�8L��D��Ur�g�q���
[*] JSONObject.put called with key: col_delay_ts, value: 30

[JNIEnv] 调用: NewStringUTF
  参数: col_delay_ts
调用栈:
0xda7a9141 libopenjdk.so!Mock_getProperty+0x68,0x70e653e3 boot.oat!0xa73e3
[*] JSONObject.put called with key: a_imsi, value: null

[JNIEnv] 调用: NewStringUTF
  参数: a_imsi
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: 8L�8L��D��Ur�g�q���
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: __t, value: 2049

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�����D��Ur�g�q�m�p�D�
[*] JSONObject.put called with key: openUI, value: MessageDialog

[JNIEnv] 调用: NewStringUTF
  参数: openUI
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �����D��Ur�g�q�m�p�D�
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: st, value: 1753598311680

[JNIEnv] 调用: GetStringUTFChars
  参数: �|�

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�!��!��D��Ur�g�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �!��!��D��Ur�g�q
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: android.content.Context

[JNIEnv] 调用: GetStringUTFChars
  参数: pOWq
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: col_delay_ts, value: 30
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �XqXU�XU��D��Ur�g�q
[*] JSONObject.put called with key: hit_sdk, value: uapp

[JNIEnv] 调用: NewStringUTF
  参数: hit_sdk
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: XU�XU��D��Ur�g�q
调用栈:
0xda7a9105 libopenjdk.so!Mock_getProperty+0x2c,0x70e653e3 boot.oat!0xa73e3
[JNIEnv] GetStringUTFChars 返回: persist.radio.default.data

[JNIEnv] 调用: NewStringUTF
  参数: 0
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: openUI, value: MessageDialog
[*] JSONObject.put called with key: __i, value: 267A00E061645180845BBD7794F3239E

[JNIEnv] 调用: NewStringUTF
  参数: __i
调用栈:
0xda7a9141 libopenjdk.so!Mock_getProperty+0x68,0x70e653e3 boot.oat!0xa73e3

[JNIEnv] 调用: GetStringUTFChars
  参数: �t��gOqq 
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�/��/��D��Ur�g�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �/��/��D��Ur�g�q
调用栈:
0xe723de83 libandroid_runtime.so!0x79e83,0x71fcdccb boot-framework.oat!0x199ccb
[JNIEnv] GetStringUTFChars 返回: net.hostname
[*] JSONObject.put called with key: hn, value: ad921d6048636625889553a3db49a4a

[JNIEnv] 调用: NewStringUTF
  参数: hn
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: hit_sdk, value: uapp
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xqp^�p^��D��Ur�g�q
[*] JSONObject.put called with key: cfg, value: [{"col_delay_times":"2","hour_on":"0-23","col_interval":"86400","col_delay_ts":"30","hit_sdk":"uapp"}]

[JNIEnv] 调用: NewStringUTF
  参数: cfg
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: p^�p^��D��Ur�g�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: __i, value: 267A00E061645180845BBD7794F3239E

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq@_�@_��D��Ur�g�qp��
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: @_�@_��D��Ur�g�qp��
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: ds, value: 0

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq &� &��D��Ur�g�q
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259
[*] JSONObject.put called with key: pn, value: com.sytt.tzy

[JNIEnv] 调用: NewStringUTF
  参数: pn
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数:  &� &��D��Ur�g�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: hn, value: ad921d6048636625889553a3db49a4a

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq0C�0C��D��Ur�g�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: 0C�0C��D��Ur�g�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: cfg, value: [{"col_delay_times":"2","hour_on":"0-23","col_interval":"86400","col_delay_ts":"30","hit_sdk":"uapp"}]

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�&��&��D��Ur�g�q�|Wq�D�
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259
[*] JSONObject.put called with key: sdk, value: ["uapp"]

[JNIEnv] 调用: NewStringUTF
  参数: sdk
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �&��&��D��Ur�g�q�|Wq�D�
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: ts, value: 1753607970284

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�g��g��D��Ur�g�q
[*] JSONObject.put called with key: sinfo, value: {"a_fit":1753332282051,"a_alut":1753332282051,"a_uid":10150,"a_root":1,"tf":"2025\/7\/27 下午5:19","s_fs":1,"a_meid":"","st":1753598311680,"hn":"ad921d6048636625889553a3db49a4a","ts":1753607970284}

[JNIEnv] 调用: NewStringUTF
  参数: sinfo
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �g��g��D��Ur�g�q
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: pn, value: com.sytt.tzy

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�Q��Q��D��Ur�g�q

[JNIEnv] 调用: NewStringUTF
  参数: gameValue

[JNIEnv] 调用: NewStringUTF
  参数: null
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �Q��Q��D��Ur�g�q
调用栈:
0xb72d04f3 libunity.so!0xcbf4f3

[JNIEnv] 调用: GetStringUTFChars
  参数: 0H��j��fU��fU�`�
�L����i� j�
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: umlog

[JNIEnv] 调用: GetStringUTFChars
  参数: �j��fU��fU�`�
�L����i� j�
调用栈:
0xe5407303 libart.so!_ZN3art6Thread10CreatePeerEPKcbP8_jobject+0x4a,0xe5404f2b libart.so!_ZN3art6Thread6AttachEPKcbP8_jobjectb+0x16a,0xe53c7d4b libart.so!_ZN3art7Runtime19AttachCurrentThreadEPKcbP8_jobjectb+0x32,0xe52655e3 libart.so!_ZN3art3JII27AttachCurrentThreadInternalEP7_JavaVMPP7_JNIEnvPvb+0xea,0xb4f36e69 libNetHTProtect.so!0xf6e69,0xb4f36f15 libNetHTProtect.so!0xf6f15,0xb4f37075 libNetHTProtect.so!0xf7075,0xb4fcfe29 libNetHTProtect.so!0x18fe29,0xb4fe49fb libNetHTProtect.so!0x1a49fb,0xb4fe3af3 libNetHTProtect.so!0x1a3af3,0xb4fe3077 libNetHTProtect.so!0x1a3077,0xb4f90935 libNetHTProtect.so!0x150935,0xb4f90af3 libNetHTProtect.so!0x150af3,0xb4fb876b libNetHTProtect.so!0x17876b,0xb4fb79bf libNetHTProtect.so!0x1779bf,0xb4fb7827 libNetHTProtect.so!0x177827

[JNIEnv] 调用: NewStringUTF
  参数: com.netease.htprotect.poly.a
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: Event: ClickWX--null
[*] JSONObject.put called with key: id, value: ClickWX

[JNIEnv] 调用: NewStringUTF
  参数: id
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: sdk, value: ["uapp"]

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�B��B��D��Ur�g�q
[*] JSONObject.put called with key: col_usc, value: {"cfg":[{"col_delay_times":"2","hour_on":"0-23","col_interval":"86400","col_delay_ts":"30","hit_sdk":"uapp"}],"sdk":["uapp"]}

[JNIEnv] 调用: NewStringUTF
  参数: col_usc
调用栈:
0xb4f38341 libNetHTProtect.so!0xf8341,0xb4edce8f libNetHTProtect.so!0x9ce8f,0xb4edc187 libNetHTProtect.so!0x9c187,0xb4fd006b libNetHTProtect.so!0x19006b,0xb4fe49fb libNetHTProtect.so!0x1a49fb,0xb4fe3af3 libNetHTProtect.so!0x1a3af3,0xb4fe3077 libNetHTProtect.so!0x1a3077,0xb4f90935 libNetHTProtect.so!0x150935,0xb4f90af3 libNetHTProtect.so!0x150af3,0xb4fb876b libNetHTProtect.so!0x17876b,0xb4fb79bf libNetHTProtect.so!0x1779bf,0xb4fb7827 libNetHTProtect.so!0x177827,0xb4fb777d libNetHTProtect.so!0x17777d,0xe6387139 libc.so!_ZL15__pthread_startPv+0x2a,0xe633fd57 libc.so!__start_thread+0x20

[JNIEnv] 调用: GetStringUTFChars
  参数: �
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �B��B��D��Ur�g�q
调用栈:
0xe534c0fd libart.so!_ZN3artL29VMClassLoader_findLoadedClassEP7_JNIEnvP7_jclassP8_jobjectP8_jstring+0x40,0x711656bb boot-core-libart.oat!0xf6bb
[JNIEnv] GetStringUTFChars 返回: com.netease.htprotect.poly.a

[JNIEnv] 调用: GetStringUTFChars
  参数: �
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: sinfo, value: {"a_fit":1753332282051,"a_alut":1753332282051,"a_uid":10150,"a_root":1,"tf":"2025\/7\/27 下午5:19","s_fs":1,"a_meid":"","st":1753598311680,"hn":"ad921d6048636625889553a3db49a4a","ts":1753607970284}
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�d��d��D��Ur�g�q

[JNIEnv] 调用: NewStringUTF
  参数: com.android.inputmethod.latin.LatinIME
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259
调用栈:
0xe534c0fd libart.so!_ZN3artL29VMClassLoader_findLoadedClassEP7_JNIEnvP7_jclassP8_jobjectP8_jstring+0x40,0x711656bb boot-core-libart.oat!0xf6bb
[JNIEnv] GetStringUTFChars 返回: com.netease.htprotect.poly.a

[JNIEnv] 调用: GetStringUTFChars
  参数: �
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: com.android.inputmethod.latin
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.netease.htprotect.poly.a

[JNIEnv] 调用: GetStringUTFChars
  参数: �
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �d��d��D��Ur�g�q
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: com.android.inputmethod.latin
调用栈:
0xe533390b libart.so!_ZN3artL25DexFile_defineClassNativeEP7_JNIEnvP7_jclassP8_jstringP8_jobjectS7_S7_+0x52,0x711641b3 boot-core-libart.oat!0xe1b3
[JNIEnv] GetStringUTFChars 返回: com.netease.htprotect.poly.a

[JNIEnv] 调用: GetStringUTFChars
  参数: �
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: com.android.inputmethod.latin
调用栈:
0xe533390b libart.so!_ZN3artL25DexFile_defineClassNativeEP7_JNIEnvP7_jclassP8_jstringP8_jobjectS7_S7_+0x52,0x711641b3 boot-core-libart.oat!0xe1b3
[JNIEnv] GetStringUTFChars 返回: com.netease.htprotect.poly.a
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: com.android.inputmethod.latin
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: col_usc, value: {"cfg":[{"col_delay_times":"2","hour_on":"0-23","col_interval":"86400","col_delay_ts":"30","hit_sdk":"uapp"}],"sdk":["uapp"]}

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xqxt�xt��D��Ur�g�q
[*] JSONObject.put called with key: col_delay_times, value: 1

[JNIEnv] 调用: NewStringUTF
  参数: col_delay_times
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /system/product/app/LatinIME
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /system/product/app/LatinIME
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: xt�xt��D��Ur�g�q
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /system/product/app/LatinIME/LatinIME.apk
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: id, value: ClickWX
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xqu�u��D��Ur�g�q�|Wq�D�
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /system/product/app/LatinIME/LatinIME.apk
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /system/product/app/LatinIME/lib/arm64
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: u�u��D��Ur�g�q�|Wq�D�
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /system/product/app/LatinIME/lib
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: ts, value: 1753607971128

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�u��u��D��Ur�g�q���
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: arm64-v8a
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �u��u��D��Ur�g�q���
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /system/product/overlay/LatinIME__auto_generated_rro_product.apk
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: __t, value: 2049

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq u� u��D��Ur�g�q"
[*] JSONObject.put called with key: ClickWX, value: null

[JNIEnv] 调用: NewStringUTF
  参数: ClickWX
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /data/resource-cache/com.android.systemui-neutral-Bkw5.frro
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数:  u� u��D��Ur�g�q"
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /data/resource-cache/com.android.systemui-accent-Mq6z.frro
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: col_delay_times, value: 1
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq~�~��D��Ur�g�q
[*] JSONObject.put called with key: col_delay_ts, value: 0

[JNIEnv] 调用: NewStringUTF
  参数: col_delay_ts
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /system/product/overlay/LatinIME__auto_generated_rro_product.apk
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: ~�~��D��Ur�g�q
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: default:targetSdkVersion=30
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: ClickWX, value: null
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�������D��Ur�g�q
[*] JSONObject.put called with key: __i, value: 267A00E061645180845BBD7794F3239E

[JNIEnv] 调用: NewStringUTF
  参数: __i
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: :complete
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �������D��Ur�g�q
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /data/user_de/0/com.android.inputmethod.latin
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: col_delay_ts, value: 0
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�����D��Ur�g�q
[*] JSONObject.put called with key: col_interval, value: 300

[JNIEnv] 调用: NewStringUTF
  参数: col_interval
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /data/user_de/0/com.android.inputmethod.latin
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �����D��Ur�g�q
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: /data/user/0/com.android.inputmethod.latin
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: __i, value: 267A00E061645180845BBD7794F3239E

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�������D��Ur�g�qp��
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: 12
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �������D��Ur�g�qp��
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: androidx.core.app.CoreComponentFactory
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: ds, value: 0
[*] JSONObject.put called with key: pn, value: com.sytt.tzy

[JNIEnv] 调用: NewStringUTF
  参数: pn
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: com.android.inputmethod.latin
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27

[JNIEnv] 调用: NewStringUTF
  参数: android.permission.BIND_INPUT_METHOD
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27
[*] JSONObject.put called with key: a_id, value: com.sohu.inputmethod.sogou.xiaomi/.SogouIME

[JNIEnv] 调用: NewStringUTF
  参数: a_id
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �XqX��X���D��Ur�g�q
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: X��X���D��Ur�g�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: pn, value: com.sytt.tzy

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�������D��Ur�g�q

[JNIEnv] 调用: GetStringUTFChars
  参数: 8U�r�Z�rS+q0�p
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �������D��Ur�g�q
调用栈:
0xdc22e867 libicu_jni.so!0x8867,0x72677869 boot-core-icu4j.oat!0x2e869
[JNIEnv] GetStringUTFChars 返回: UTF-8

[JNIEnv] 调用: GetStringUTFChars
  参数: P9�
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /system/app/Superuser.apk

[JNIEnv] 调用: NewStringUTF
  参数: access
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: col_interval, value: 300

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�b��b��D��Ur�g�q
[*] JSONObject.put called with key: week_on, value: [1,2,3,4,5,6,7]

[JNIEnv] 调用: NewStringUTF
  参数: week_on
调用栈:
0xda7de385 libjavacore.so!0x17385,0x7116659b boot-core-libart.oat!0x1059b

[JNIEnv] 调用: GetStringUTFChars
  参数: 9��:�fU�fU�`�
�t�q�,fU�C0�	|��<fU�`8�
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �b��b��D��Ur�g�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: com.sytt.tzy.CheckRoot

[JNIEnv] 调用: GetStringUTFChars
  参数: �:�fU�fU�`�
�t�q�,fU�C0�	|��<fU�`8�
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: a_id, value: com.sohu.inputmethod.sogou.xiaomi/.SogouIME
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq8��8���D��Ur�g�q
[*] JSONObject.put called with key: a_pn, value: com.sohu.inputmethod.sogou.xiaomi

[JNIEnv] 调用: NewStringUTF
  参数: a_pn
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: to exec busybox df

[JNIEnv] 调用: GetStringUTFChars
  参数: 9�x;�leU�TeU�`�
���q�&��C0�	Z���eU����9�x;�
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: 8��8���D��Ur�g�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: com.sytt.tzy.CheckRoot

[JNIEnv] 调用: GetStringUTFChars
  参数: x;�leU�TeU�`�
���q�&��C0�	Z���eU����9�x;�
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: week_on, value: [1,2,3,4,5,6,7]
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�n��n��D��Ur�g�q
[*] JSONObject.put called with key: hit_sdk, value: uapp

[JNIEnv] 调用: NewStringUTF
  参数: hit_sdk
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: to shell exec which for find su :

[JNIEnv] 调用: NewStringUTF
  参数: error=2, No such file or directory
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �n��n��D��Ur�g�q
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259
调用栈:
0xda7a98ad libopenjdk.so!0x1d8ad,0xda7a97c5 libopenjdk.so!UNIXProcess_forkAndExec+0x344,0x70e68a29 boot.oat!0xaaa29

[JNIEnv] 调用: GetStringUTFChars
  参数: 9�PA�fU�fU�`�
�t�q�,fU�C0�	���<fU�`8�
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: a_pn, value: com.sohu.inputmethod.sogou.xiaomi

[JNIEnv] 调用: GetStringUTFChars
  参数: �XqP��P���D��Ur�g�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: com.sytt.tzy.CheckRoot

[JNIEnv] 调用: GetStringUTFChars
  参数: PA�fU�fU�`�
�t�q�,fU�C0�	���<fU�`8�
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: P��P���D��Ur�g�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: execResult=null

[JNIEnv] 调用: GetStringUTFChars
  参数: 9�pA� fU�fU�`�
�\�q�,fU�C0�	d��<fU�`8�
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: hit_sdk, value: uapp

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�n��n��D��Ur�g�q�|Wq�D�
[*] JSONObject.put called with key: cfg, value: [{"col_delay_times":"1","col_delay_ts":"0","col_interval":"300","week_on":[1,2,3,4,5,6,7],"hit_sdk":"uapp"}]

[JNIEnv] 调用: NewStringUTF
  参数: cfg
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: com.sytt.tzy.CheckRoot

[JNIEnv] 调用: GetStringUTFChars
  参数: pA� fU�fU�`�
�\�q�,fU�C0�	d��<fU�`8�
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �n��n��D��Ur�g�q�|Wq�D�
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: to write /data

[JNIEnv] 调用: GetStringUTFChars
  参数: �A�A
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: ts, value: 1753607974869
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq`��`���D��Ur�g�q
[*] JSONObject.put called with key: input, value: [{"a_id":"com.sohu.inputmethod.sogou.xiaomi\/.SogouIME","a_pn":"com.sohu.inputmethod.sogou.xiaomi","ts":1753607974869}]

[JNIEnv] 调用: NewStringUTF
  参数: input
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: `��`���D��Ur�g�q
调用栈:
0xda7e2b8f libjavacore.so!0x1bb8f,0x71166d05 boot-core-libart.oat!0x10d05
[JNIEnv] GetStringUTFChars 返回: /data/su_test

[JNIEnv] 调用: NewStringUTF
  参数: open
调用栈:
0xda7e2bc3 libjavacore.so!0x1bbc3,0x71166d05 boot-core-libart.oat!0x10d05

[JNIEnv] 调用: NewStringUTF
  参数: Permission denied
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: cfg, value: [{"col_delay_times":"1","col_delay_ts":"0","col_interval":"300","week_on":[1,2,3,4,5,6,7],"hit_sdk":"uapp"}]

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�������D��Ur�g�q
[*] JSONObject.put called with key: sdk, value: ["uapp"]

[JNIEnv] 调用: NewStringUTF
  参数: sdk
调用栈:
0xda7e6703 libjavacore.so!0x1f703,0x71166c91 boot-core-libart.oat!0x10c91

[JNIEnv] 调用: GetStringUTFChars
  参数: �XqС�С��Xq�Ur�d�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �������D��Ur�g�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.err

[JNIEnv] 调用: GetStringUTFChars
  参数: С�С��Xq�Ur�d�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: input, value: [{"a_id":"com.sohu.inputmethod.sogou.xiaomi\/.SogouIME","a_pn":"com.sohu.inputmethod.sogou.xiaomi","ts":1753607974869}]
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�������D��Ur�g�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: java.io.FileNotFoundException: /data/su_test: open failed: EACCES (Permission denied)

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�������Xq�Ur�d�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.err

[JNIEnv] 调用: GetStringUTFChars
  参数: �������Xq�Ur�d�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �������D��Ur�g�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 	at libcore.io.IoBridge.open(IoBridge.java:575)

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xqh��h���Xq�Ur�d�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: sdk, value: ["uapp"]

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq肣肣�D��Ur�g�q���p�D�
[*] JSONObject.put called with key: screen_off, value: {"cfg":[{"col_delay_times":"1","col_delay_ts":"0","col_interval":"300","week_on":[1,2,3,4,5,6,7],"hit_sdk":"uapp"}],"sdk":["uapp"]}

[JNIEnv] 调用: NewStringUTF
  参数: screen_off
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.err

[JNIEnv] 调用: GetStringUTFChars
  参数: h��h���Xq�Ur�d�q

[JNIEnv] 调用: GetStringUTFChars
  参数: ��
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: 肣肣�D��Ur�g�q���p�D�
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/app_UApm/656436ae58a9eb5b0a11a63e

[JNIEnv] 调用: GetStringUTFChars
  参数: ( �
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: t, value: 3746029568

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�������D��Ur�g�qh�Nq�D�
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 	at java.io.FileOutputStream.<init>(FileOutputStream.java:236)

[JNIEnv] 调用: GetStringUTFChars
  参数: �XqX��X���Xq�Ur�d�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �������D��Ur�g�qh�Nq�D�
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.err

[JNIEnv] 调用: GetStringUTFChars
  参数: X��X���Xq�Ur�d�q
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/app_UApm/656436ae58a9eb5b0a11a63e/ready

[JNIEnv] 调用: GetStringUTFChars
  参数: ( �
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 	at java.io.FileOutputStream.<init>(FileOutputStream.java:125)

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq0��0���Xq�Ur�d�q
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/app_UApm/656436ae58a9eb5b0a11a63e/ready

[JNIEnv] 调用: GetStringUTFChars
  参数: ( �
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: f, value: 2117926912

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�������D��Ur�g�q�|Wq�D�
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.err

[JNIEnv] 调用: GetStringUTFChars
  参数: 0��0���Xq�Ur�d�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �������D��Ur�g�q�|Wq�D�
调用栈:
0xda7a2c27 libopenjdk.so!Java_java_io_UnixFileSystem_getBooleanAttributes0+0x22,0x70e65c27 boot.oat!0xa7c27
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/app_UApm/656436ae58a9eb5b0a11a63e/ready

[JNIEnv] 调用: GetStringUTFChars
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/app_UApm/656436ae58a9eb5b0a11a63e/ready
Error: access violation accessing 0x19
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)

[JNIEnv] 调用: GetStringUTFChars
  参数: P!�
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 	at com.sytt.tzy.CheckRoot.writeFile(CheckRoot.java:166)

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq(��(���Xq�Ur�d�q
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/app_UApm/656436ae58a9eb5b0a11a63e

[JNIEnv] 调用: GetStringUTFChars
  参数: �!�
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.err

[JNIEnv] 调用: GetStringUTFChars
  参数: (��(���Xq�Ur�d�q
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/app_UApm/656436ae58a9eb5b0a11a63e/ready

[JNIEnv] 调用: GetStringUTFChars
  参数: �!�
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 	at com.sytt.tzy.CheckRoot.checkAccessRootData(CheckRoot.java:141)

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�����Xq�Ur�d�q
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/app_UApm/656436ae58a9eb5b0a11a63e/ready

[JNIEnv] 调用: GetStringUTFChars
  参数: �!�
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: ts, value: 1753607976459

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�������D��Ur�g�q
[*] JSONObject.put called with key: mem, value: {"t":3746029568,"f":2117926912,"ts":1753607976459}

[JNIEnv] 调用: NewStringUTF
  参数: mem
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.err

[JNIEnv] 调用: GetStringUTFChars
  参数: �����Xq�Ur�d�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �������D��Ur�g�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 	at com.sytt.tzy.CheckRoot.isDeviceRooted(CheckRoot.java:31)

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�������Xq�Ur�d�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: screen_off, value: {"cfg":[{"col_delay_times":"1","col_delay_ts":"0","col_interval":"300","week_on":[1,2,3,4,5,6,7],"hit_sdk":"uapp"}],"sdk":["uapp"]}
[*] JSONObject.put called with key: col_delay_times, value: 2

[JNIEnv] 调用: NewStringUTF
  参数: col_delay_times
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.err

[JNIEnv] 调用: GetStringUTFChars
  参数: �������Xq�Ur�d�q
调用栈:
0xda7a2c27 libopenjdk.so!Java_java_io_UnixFileSystem_getBooleanAttributes0+0x22,0x70e65c27 boot.oat!0xa7c27
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/app_UApm/656436ae58a9eb5b0a11a63e/ready

[JNIEnv] 调用: GetStringUTFChars
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/app_UApm/656436ae58a9eb5b0a11a63e/ready
Error: access violation accessing 0x11
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)

[JNIEnv] 调用: GetStringUTFChars
  参数: �"�
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/app_UApm/656436ae58a9eb5b0a11a63e

[JNIEnv] 调用: GetStringUTFChars
  参数: x#�
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 	at com.sytt.tzy.UnityPlayerActivity.CheckDevicRooted(UnityPlayerActivity.java:553)

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�������Xq�Ur�d�q
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/app_UApm/656436ae58a9eb5b0a11a63e/upload

[JNIEnv] 调用: GetStringUTFChars
  参数: x#�
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�������D��Ur�g�q
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/app_UApm/656436ae58a9eb5b0a11a63e/upload

[JNIEnv] 调用: GetStringUTFChars
  参数: x#�
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �������D��Ur�g�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.err

[JNIEnv] 调用: GetStringUTFChars
  参数: �������Xq�Ur�d�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: mem, value: {"t":3746029568,"f":2117926912,"ts":1753607976459}

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�������D��Ur�g�q"
[*] JSONObject.put called with key: inner, value: {"gp":1,"to":1,"mo":1,"ca":1,"fl":1,"_gdf_r":"noper","_thm_z":"noper","_dsk_s":"noper","scr":{"a_st_h":80,"a_nav_h":132,"a_den":2.75,"a_dpi":440},"sinfo":{"a_fit":1753332282051,"a_alut":1753332282051,"a_uid":10150,"a_root":1,"tf":"2025\/7\/27 下午5:19","s_fs":1,"a_meid":"","st":1753598311680,"hn":"ad921d6048636625889553a3db49a4a","ts":1753607970284},"input":[{"a_id":"com.sohu.inputmethod.sogou.xiaomi\/.SogouIME","a_pn":"com.sohu.inputmethod.sogou.xiaomi","ts":1753607974869}],"mem":{"t":3746029568,"f":2117926912,"ts":1753607976459}}

[JNIEnv] 调用: NewStringUTF
  参数: inner
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 	at com.unity3d.player.UnityPlayer.nativeRender(Native Method)

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�������Xq�Ur�d�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �������D��Ur�g�q"
调用栈:
0xda7a2c27 libopenjdk.so!Java_java_io_UnixFileSystem_getBooleanAttributes0+0x22,0x70e65c27 boot.oat!0xa7c27
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/app_UApm/656436ae58a9eb5b0a11a63e/upload

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x15
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/app_UApm/656436ae58a9eb5b0a11a63e/upload
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.err

[JNIEnv] 调用: GetStringUTFChars
  参数: �������Xq�Ur�d�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: col_delay_times, value: 2
[*] JSONObject.put called with key: signature, value: bD9jRQ0UE3YLSgo+GUQzDEg2ME5KHQIoRB4QMgxYe196CwJ6dn5mCT0zawUtOgJvPVYSbil6NQt0NHcKNHQWPhRrdB9ABho2HEdKehYQN1A6

[JNIEnv] 调用: NewStringUTF
  参数: signature
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 	at com.unity3d.player.UnityPlayer.access$300(Unknown Source:0)

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�������Xq�Ur�d�q
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �XqP�P��D��Ur�g�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.err

[JNIEnv] 调用: GetStringUTFChars
  参数: �������Xq�Ur�d�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: P�P��D��Ur�g�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 	at com.unity3d.player.UnityPlayer$e$1.handleMessage(Unknown Source:95)

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�������Xq�Ur�d�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: signature, value: bD9jRQ0UE3YLSgo+GUQzDEg2ME5KHQIoRB4QMgxYe196CwJ6dn5mCT0zawUtOgJvPVYSbil6NQt0NHcKNHQWPhRrdB9ABho2HEdKehYQN1A6
[*] JSONObject.put called with key: act_when, value: 0

[JNIEnv] 调用: NewStringUTF
  参数: act_when
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.err

[JNIEnv] 调用: GetStringUTFChars
  参数: �������Xq�Ur�d�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 	at android.os.Handler.dispatchMessage(Handler.java:102)

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq0��0���Xq�Ur�d�q
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq(ǣ(ǣ�D��Ur�g�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.err

[JNIEnv] 调用: GetStringUTFChars
  参数: 0��0���Xq�Ur�d�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: (ǣ(ǣ�D��Ur�g�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 	at android.os.Looper.loopOnce(Looper.java:201)

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�������Xq�Ur�d�q
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: inner, value: {"gp":1,"to":1,"mo":1,"ca":1,"fl":1,"_gdf_r":"noper","_thm_z":"noper","_dsk_s":"noper","scr":{"a_st_h":80,"a_nav_h":132,"a_den":2.75,"a_dpi":440},"sinfo":{"a_fit":1753332282051,"a_alut":1753332282051,"a_uid":10150,"a_root":1,"tf":"2025\/7\/27 下午5:19","s_fs":1,"a_meid":"","st":1753598311680,"hn":"ad921d6048636625889553a3db49a4a","ts":1753607970284},"input":[{"a_id":"com.sohu.inputmethod.sogou.xiaomi\/.SogouIME","a_pn":"com.sohu.inputmethod.sogou.xiaomi","ts":1753607974869}],"mem":{"t":3746029568,"f":2117926912,"ts":1753607976459}}

[JNIEnv] 调用: GetStringUTFChars
  参数: xF�

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�����D��Ur�g�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.err

[JNIEnv] 调用: GetStringUTFChars
  参数: �������Xq�Ur�d�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �����D��Ur�g�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 	at android.os.Looper.loop(Looper.java:288)

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�������Xq�Ur�d�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: act_when, value: 0
[*] JSONObject.put called with key: col_delay_ts, value: 10

[JNIEnv] 调用: NewStringUTF
  参数: col_delay_ts
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.err

[JNIEnv] 调用: GetStringUTFChars
  参数: �������Xq�Ur�d�q
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/files

[JNIEnv] 调用: GetStringUTFChars
  参数: �ͣ
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 	at com.unity3d.player.UnityPlayer$e.run(Unknown Source:20)

[JNIEnv] 调用: NewStringUTF
  参数: Permission denied
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/files/umeng_zcfg_flag

[JNIEnv] 调用: GetStringUTFChars
  参数: �F�
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�*��*��D��Ur�g�q
调用栈:
0xda7e6703 libjavacore.so!0x1f703,0x71166c91 boot-core-libart.oat!0x10c91

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�������Xq�Ur�d�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �*��*��D��Ur�g�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.err

[JNIEnv] 调用: GetStringUTFChars
  参数: �������Xq�Ur�d�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: col_delay_ts, value: 10
[*] JSONObject.put called with key: col_interval, value: 60

[JNIEnv] 调用: NewStringUTF
  参数: col_interval
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/databases

[JNIEnv] 调用: GetStringUTFChars
  参数: @ϣ
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: Caused by: android.system.ErrnoException: open failed: EACCES (Permission denied)

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq8��8���Xq�Ur�d�q
调用栈:
0xe727e6bb libandroid_runtime.so!0xba6bb,0x71fc284b boot-framework.oat!0x18e84b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/databases/umeng_zero_cache.db

[JNIEnv] 调用: GetStringUTFChars
  参数: @ϣ
调用栈:
0xe727e6e5 libandroid_runtime.so!0xba6e5,0x71fc284b boot-framework.oat!0x18e84b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/databases/umeng_zero_cache.db

[JNIEnv] 调用: GetStringUTFChars
  参数: ��Nq
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.err

[JNIEnv] 调用: GetStringUTFChars
  参数: 8��8���Xq�Ur�d�q
调用栈:
0xe723df49 libandroid_runtime.so!0x79f49,0x71fc0ddd boot-framework.oat!0x18cddd
[JNIEnv] GetStringUTFChars 返回: debug.sqlite.pagesize

[JNIEnv] 调用: GetStringUTFChars
  参数: ��Nq萙@ʀr0ӣ
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq9�9��D��Ur�g�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 	at libcore.io.Linux.open(Native Method)

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�������Xq�Ur�d�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: 9�9��D��Ur�g�q
调用栈:
0xe723de83 libandroid_runtime.so!0x79e83,0x71fcdccb boot-framework.oat!0x199ccb
[JNIEnv] GetStringUTFChars 返回: debug.sqlite.journalmode

[JNIEnv] 调用: GetStringUTFChars
  参数: �NqА�@ʀr0ӣ
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.err

[JNIEnv] 调用: GetStringUTFChars
  参数: �������Xq�Ur�d�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: col_interval, value: 60
[*] JSONObject.put called with key: week_on, value: [1,2,3,4,5,6,7]

[JNIEnv] 调用: NewStringUTF
  参数: week_on
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 	at libcore.io.ForwardingOs.open(ForwardingOs.java:567)

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�������Xq�Ur�d�q
调用栈:
0xe723de83 libandroid_runtime.so!0x79e83,0x71fcdccb boot-framework.oat!0x199ccb
[JNIEnv] GetStringUTFChars 返回: debug.sqlite.syncmode

[JNIEnv] 调用: GetStringUTFChars
  参数: ��Nq
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.err

[JNIEnv] 调用: GetStringUTFChars
  参数: �������Xq�Ur�d�q
调用栈:
0xe723df49 libandroid_runtime.so!0x79f49,0x71fc0ddd boot-framework.oat!0x18cddd
[JNIEnv] GetStringUTFChars 返回: debug.sqlite.journalsizelimit

[JNIEnv] 调用: GetStringUTFChars
  参数: 8�Nqd
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�L��L��D��Ur�g�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 	at libcore.io.BlockGuardOs.open(BlockGuardOs.java:273)

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�������Xq�Ur�d�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �L��L��D��Ur�g�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.err

[JNIEnv] 调用: GetStringUTFChars
  参数: �������Xq�Ur�d�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: week_on, value: [1,2,3,4,5,6,7]
[*] JSONObject.put called with key: hit_sdk, value: uapp

[JNIEnv] 调用: NewStringUTF
  参数: hit_sdk
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 	at libcore.io.ForwardingOs.open(ForwardingOs.java:567)

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�������Xq�Ur�d�q
调用栈:
0xe723df49 libandroid_runtime.so!0x79f49,0x71fc0ddd boot-framework.oat!0x18cddd
[JNIEnv] GetStringUTFChars 返回: debug.sqlite.wal.autocheckpoint

[JNIEnv] 调用: GetStringUTFChars
  参数: ܣ
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.err

[JNIEnv] 调用: GetStringUTFChars
  参数: �������Xq�Ur�d�q
调用栈:
0xe727ea99 libandroid_runtime.so!0xbaa99,0x71fb96e3 boot-framework.oat!0x1856e3
[JNIEnv] GetStringUTFChars 返回: zh_CN

[JNIEnv] 调用: GetStringUTFChars
  参数: @ϣ�
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�Z��Z��D��Ur�g�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 	at android.app.ActivityThread$AndroidOs.open(ActivityThread.java:7756)

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xqx��x���Xq�Ur�d�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �Z��Z��D��Ur�g�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.err

[JNIEnv] 调用: GetStringUTFChars
  参数: x��x���Xq�Ur�d�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: hit_sdk, value: uapp
[*] JSONObject.put called with key: sel_policy, value: 0

[JNIEnv] 调用: NewStringUTF
  参数: sel_policy
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 	at libcore.io.IoBridge.open(IoBridge.java:561)

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq(��(���Xq�Ur�d�q
调用栈:
0xda7df40d libjavacore.so!0x1840d,0x711669bb boot-core-libart.oat!0x109bb
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/databases/umeng_zero_cache.db

[JNIEnv] 调用: GetStringUTFChars
  参数: @ϣ
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.err

[JNIEnv] 调用: GetStringUTFChars
  参数: (��(���Xq�Ur�d�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 	... 13 more

[JNIEnv] 调用: GetStringUTFChars
  参数: 9�h�� fU�fU�`�
�\�q�,fU�C0�	���<fU�`8�
调用栈:
0xe727c21b libandroid_runtime.so!0xb821b,0x71fbe09d boot-framework.oat!0x18a09d
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/databases/umeng_zero_cache.db

[JNIEnv] 调用: GetStringUTFChars
  参数: �oLq
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�h��h��D��Ur�g�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: com.sytt.tzy.CheckRoot

[JNIEnv] 调用: GetStringUTFChars
  参数: h�� fU�fU�`�
�\�q�,fU�C0�	���<fU�`8�
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �h��h��D��Ur�g�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: write failed

[JNIEnv] 调用: GetStringUTFChars
  参数: 9���� fU�fU�`�
�\�q�,fU�C0�	���<fU�`8�
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: sel_policy, value: 0
[*] JSONObject.put called with key: cfg, value: [{"col_delay_times":"2","signature":"bD9jRQ0UE3YLSgo+GUQzDEg2ME5KHQIoRB4QMgxYe196CwJ6dn5mCT0zawUtOgJvPVYSbil6NQt0NHcKNHQWPhRrdB9ABho2HEdKehYQN1A6","act_when":"0","col_delay_ts":"10","col_interval":"60","week_on":[1,2,3,4,5,6,7],"hit_sdk":"uapp","sel_policy":"0"}]

[JNIEnv] 调用: NewStringUTF
  参数: cfg
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: com.sytt.tzy.CheckRoot

[JNIEnv] 调用: GetStringUTFChars
  参数: ��� fU�fU�`�
�\�q�,fU�C0�	���<fU�`8�
调用栈:
0xe7240f31 libandroid_runtime.so!0x7cf31,0x71fc0ddd boot-framework.oat!0x18cddd
[JNIEnv] GetStringUTFChars 返回: CursorWindowStats

[JNIEnv] 调用: GetStringUTFChars
  参数: �י�����c���c�`�
�\(p�
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: UMLog

[JNIEnv] 调用: GetStringUTFChars
  参数: �����c���c�`�
�\(p�
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: to read /data

[JNIEnv] 调用: GetStringUTFChars
  参数: �A�
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 统计SDK版本号: 9.6.1

[JNIEnv] 调用: GetStringUTFChars
  参数: �י
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xqȅ�ȅ��D��Ur�g�q
调用栈:
0xda7e2b8f libjavacore.so!0x1bb8f,0x71166d05 boot-core-libart.oat!0x10d05
[JNIEnv] GetStringUTFChars 返回: /data/su_test

[JNIEnv] 调用: NewStringUTF
  参数: open
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: UMLog

[JNIEnv] 调用: GetStringUTFChars
  参数: 
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: ȅ�ȅ��D��Ur�g�q
调用栈:
0xda7e2bc3 libjavacore.so!0x1bbc3,0x71166d05 boot-core-libart.oat!0x10d05

[JNIEnv] 调用: NewStringUTF
  参数: No such file or directory
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: cfg, value: [{"col_delay_times":"2","signature":"bD9jRQ0UE3YLSgo+GUQzDEg2ME5KHQIoRB4QMgxYe196CwJ6dn5mCT0zawUtOgJvPVYSbil6NQt0NHcKNHQWPhRrdB9ABho2HEdKehYQN1A6","act_when":"0","col_delay_ts":"10","col_interval":"60","week_on":[1,2,3,4,5,6,7],"hit_sdk":"uapp","sel_policy":"0"}]
[*] JSONObject.put called with key: sdk, value: ["uapp"]

[JNIEnv] 调用: NewStringUTF
  参数: sdk
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: ZID SDK版本号: 1.8.0

[JNIEnv] 调用: GetStringUTFChars
  参数: @��
调用栈:
0xda7e6703 libjavacore.so!0x1f703,0x71166c91 boot-core-libart.oat!0x10c91

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�������Xq�Ur�d�q
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.analytics.game.GameSdkVersion

[JNIEnv] 调用: GetStringUTFChars
  参数:  ��
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.vt.V

[JNIEnv] 调用: GetStringUTFChars
  参数: ���
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.err

[JNIEnv] 调用: GetStringUTFChars
  参数: �������Xq�Ur�d�q
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.message.PushAgent

[JNIEnv] 调用: GetStringUTFChars
  参数: д�
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�������D��Ur�g�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: java.io.FileNotFoundException: /data/su_test: open failed: ENOENT (No such file or directory)

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�������Xq�Ur�d�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �������D��Ur�g�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.err

[JNIEnv] 调用: GetStringUTFChars
  参数: �������Xq�Ur�d�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: sdk, value: ["uapp"]
[*] JSONObject.put called with key: umc_cfg, value: {"cfg":[{"col_delay_times":"2","signature":"bD9jRQ0UE3YLSgo+GUQzDEg2ME5KHQIoRB4QMgxYe196CwJ6dn5mCT0zawUtOgJvPVYSbil6NQt0NHcKNHQWPhRrdB9ABho2HEdKehYQN1A6","act_when":"0","col_delay_ts":"10","col_interval":"60","week_on":[1,2,3,4,5,6,7],"hit_sdk":"uapp","sel_policy":"0"}],"sdk":["uapp"]}

[JNIEnv] 调用: NewStringUTF
  参数: umc_cfg
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 	at libcore.io.IoBridge.open(IoBridge.java:575)

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�����Xq�Ur�d�q
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.socialize.UMShareAPI

[JNIEnv] 调用: GetStringUTFChars
  参数: �Қ
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.err

[JNIEnv] 调用: GetStringUTFChars
  参数: �����Xq�Ur�d�q
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.error.UMError

[JNIEnv] 调用: GetStringUTFChars
  参数: p5�
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�������D��Ur�g�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 	at java.io.FileInputStream.<init>(FileInputStream.java:160)

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xqh�h��Xq�Ur�d�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �������D��Ur�g�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.err

[JNIEnv] 调用: GetStringUTFChars
  参数: h�h��Xq�Ur�d�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: umc_cfg, value: {"cfg":[{"col_delay_times":"2","signature":"bD9jRQ0UE3YLSgo+GUQzDEg2ME5KHQIoRB4QMgxYe196CwJ6dn5mCT0zawUtOgJvPVYSbil6NQt0NHcKNHQWPhRrdB9ABho2HEdKehYQN1A6","act_when":"0","col_delay_ts":"10","col_interval":"60","week_on":[1,2,3,4,5,6,7],"hit_sdk":"uapp","sel_policy":"0"}],"sdk":["uapp"]}
[*] JSONObject.put called with key: col_delay_times, value: 3

[JNIEnv] 调用: NewStringUTF
  参数: col_delay_times
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 	at com.sytt.tzy.CheckRoot.readFile(CheckRoot.java:181)

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq`�`��Xq�Ur�d�q
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.umzid.ZIDManager

[JNIEnv] 调用: GetStringUTFChars
  参数: ��
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.err

[JNIEnv] 调用: GetStringUTFChars
  参数: `�`��Xq�Ur�d�q
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.commonsdk.internal.UMOplus

[JNIEnv] 调用: GetStringUTFChars
  参数: H��
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xqh��h���D��Ur�g�q"
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 	at com.sytt.tzy.CheckRoot.checkAccessRootData(CheckRoot.java:149)

[JNIEnv] 调用: GetStringUTFChars
  参数: �XqP�P��Xq�Ur�d�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: h��h���D��Ur�g�q"
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.err

[JNIEnv] 调用: GetStringUTFChars
  参数: P�P��Xq�Ur�d�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: col_delay_times, value: 3
[*] JSONObject.put called with key: col_delay_ts, value: 10

[JNIEnv] 调用: NewStringUTF
  参数: col_delay_ts
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 	at com.sytt.tzy.CheckRoot.isDeviceRooted(CheckRoot.java:31)

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�����Xq�Ur�d�q
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.airec.RecAgent

[JNIEnv] 调用: GetStringUTFChars
  参数: ���
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.err

[JNIEnv] 调用: GetStringUTFChars
  参数: �����Xq�Ur�d�q
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.umverify.UMVerifyHelper

[JNIEnv] 调用: GetStringUTFChars
  参数: ���
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�������D��Ur�g�q
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.sms.UMSMS

[JNIEnv] 调用: GetStringUTFChars
  参数: �ǚ
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 	at com.sytt.tzy.UnityPlayerActivity.CheckDevicRooted(UnityPlayerActivity.java:553)

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�����Xq�Ur�d�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �������D��Ur�g�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.err

[JNIEnv] 调用: GetStringUTFChars
  参数: �����Xq�Ur�d�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: col_delay_ts, value: 10
[*] JSONObject.put called with key: col_interval, value: 60

[JNIEnv] 调用: NewStringUTF
  参数: col_interval
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 	at com.unity3d.player.UnityPlayer.nativeRender(Native Method)

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�����Xq�Ur�d�q
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.umcrash.UMCrash

[JNIEnv] 调用: GetStringUTFChars
  参数: �יp����c���c�`�
�\(p�8H���ƽ�ƽ��c�����יp������יp��`d�p
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�����D��Ur�g�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: UMLog

[JNIEnv] 调用: GetStringUTFChars
  参数: p����c���c�`�
�\(p�8H���ƽ�ƽ��c�����יp������יp��`d�p
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.err

[JNIEnv] 调用: GetStringUTFChars
  参数: �����Xq�Ur�d�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �����D��Ur�g�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 	at com.unity3d.player.UnityPlayer.access$300(Unknown Source:0)

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�����Xq�Ur�d�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: col_interval, value: 60
[*] JSONObject.put called with key: week_on, value: [1,2,3,4,5,6,7]

[JNIEnv] 调用: NewStringUTF
  参数: week_on
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.err

[JNIEnv] 调用: GetStringUTFChars
  参数: �����Xq�Ur�d�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: APM SDK版本号: 1.9.1

[JNIEnv] 调用: GetStringUTFChars
  参数: ���
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 	at com.unity3d.player.UnityPlayer$e$1.handleMessage(Unknown Source:95)

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�����Xq�Ur�d�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.err

[JNIEnv] 调用: GetStringUTFChars
  参数: �����Xq�Ur�d�q
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.umlink.MobclickLink

[JNIEnv] 调用: GetStringUTFChars
  参数: ȓ�
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�������D��Ur�g�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 	at android.os.Handler.dispatchMessage(Handler.java:102)

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xqh�h��Xq�Ur�d�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �������D��Ur�g�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.err

[JNIEnv] 调用: GetStringUTFChars
  参数: h�h��Xq�Ur�d�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: week_on, value: [1,2,3,4,5,6,7]
[*] JSONObject.put called with key: hit_sdk, value: uapp

[JNIEnv] 调用: NewStringUTF
  参数: hit_sdk
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 	at android.os.Looper.loopOnce(Looper.java:201)

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.umeng.cconfig.UMRemoteConfig

[JNIEnv] 调用: GetStringUTFChars
  参数: �י�
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.err

[JNIEnv] 调用: GetStringUTFChars
  参数: 
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 	at android.os.Looper.loop(Looper.java:288)

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�#��#��Xq�Ur�d�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: UMLog

[JNIEnv] 调用: GetStringUTFChars
  参数: �
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.err

[JNIEnv] 调用: GetStringUTFChars
  参数: �#��#��Xq�Ur�d�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: UABTEST SDK版本号: 1.0.1

[JNIEnv] 调用: GetStringUTFChars
  参数: `��
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 	at com.unity3d.player.UnityPlayer$e.run(Unknown Source:20)

[JNIEnv] 调用: NewStringUTF
  参数: No such file or directory
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: hit_sdk, value: uapp
[*] JSONObject.put called with key: cfg, value: [{"col_delay_times":"3","col_delay_ts":"10","col_interval":"60","week_on":[1,2,3,4,5,6,7],"hit_sdk":"uapp"}]

[JNIEnv] 调用: NewStringUTF
  参数: cfg
调用栈:
0xda7e6703 libjavacore.so!0x1f703,0x71166c91 boot-core-libart.oat!0x10c91

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xqh/�h/��Xq�Ur�d�q
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: com.uyumao.sdk.UYMManager

[JNIEnv] 调用: GetStringUTFChars
  参数: ����
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.err

[JNIEnv] 调用: GetStringUTFChars
  参数: h/�h/��Xq�Ur�d�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: MobclickAgent

[JNIEnv] 调用: GetStringUTFChars
  参数: �
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq���D��Ur�g�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: Caused by: android.system.ErrnoException: open failed: ENOENT (No such file or directory)

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq 2� 2��Xq�Ur�d�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: ���D��Ur�g�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.err

[JNIEnv] 调用: GetStringUTFChars
  参数:  2� 2��Xq�Ur�d�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: cfg, value: [{"col_delay_times":"3","col_delay_ts":"10","col_interval":"60","week_on":[1,2,3,4,5,6,7],"hit_sdk":"uapp"}]
[*] JSONObject.put called with key: sdk, value: ["uapp"]

[JNIEnv] 调用: NewStringUTF
  参数: sdk
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 	at libcore.io.Linux.open(Native Method)

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�4��4��Xq�Ur�d�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: module init:azioct
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �XqH%H%�D��Ur�g�q
[*] JSONObject.put called with key: #sig, value: EB:6A:26:D0:1D:18:6B:18:BC:CC:62:FD:71:AF:69:DE

[JNIEnv] 调用: NewStringUTF
  参数: #sig
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: H%H%�D��Ur�g�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.err

[JNIEnv] 调用: GetStringUTFChars
  参数: �4��4��Xq�Ur�d�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: sdk, value: ["uapp"]
[*] JSONObject.put called with key: ap_mode, value: {"cfg":[{"col_delay_times":"3","col_delay_ts":"10","col_interval":"60","week_on":[1,2,3,4,5,6,7],"hit_sdk":"uapp"}],"sdk":["uapp"]}

[JNIEnv] 调用: NewStringUTF
  参数: ap_mode
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 	at libcore.io.ForwardingOs.open(ForwardingOs.java:567)

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�7��7��Xq�Ur�d�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.err

[JNIEnv] 调用: GetStringUTFChars
  参数: �7��7��Xq�Ur�d�q
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�)
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 	at libcore.io.BlockGuardOs.open(BlockGuardOs.java:273)

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�:��:��Xq�Ur�d�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �)
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.err

[JNIEnv] 调用: GetStringUTFChars
  参数: �:��:��Xq�Ur�d�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: #sig, value: EB:6A:26:D0:1D:18:6B:18:BC:CC:62:FD:71:AF:69:DE

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�:�:�D��Ur�g�q
[*] JSONObject.put called with key: #sis1, value: C7:55:92:86:4D:52:28:AB:54:EE:80:DD:EB:5B:4A:A1:B0:49:39:B9

[JNIEnv] 调用: NewStringUTF
  参数: #sis1
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 	at libcore.io.ForwardingOs.open(ForwardingOs.java:567)

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�=��=��Xq�Ur�d�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �:�:�D��Ur�g�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.err

[JNIEnv] 调用: GetStringUTFChars
  参数: �=��=��Xq�Ur�d�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: ap_mode, value: {"cfg":[{"col_delay_times":"3","col_delay_ts":"10","col_interval":"60","week_on":[1,2,3,4,5,6,7],"hit_sdk":"uapp"}],"sdk":["uapp"]}
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�O
[*] JSONObject.put called with key: col_delay_times, value: 1

[JNIEnv] 调用: NewStringUTF
  参数: col_delay_times
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 	at android.app.ActivityThread$AndroidOs.open(ActivityThread.java:7756)

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq`@�`@��Xq�Ur�d�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �O
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.err

[JNIEnv] 调用: GetStringUTFChars
  参数: `@�`@��Xq�Ur�d�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: #sis1, value: C7:55:92:86:4D:52:28:AB:54:EE:80:DD:EB:5B:4A:A1:B0:49:39:B9
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq@K@K�D��Ur�g�q"
[*] JSONObject.put called with key: #sis, value: x1WShk1SKKtU7oDd61tKobBJObk=

[JNIEnv] 调用: NewStringUTF
  参数: #sis
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 	at libcore.io.IoBridge.open(IoBridge.java:561)

[JNIEnv] 调用: GetStringUTFChars
  参数: �XqA�A��Xq�Ur�d�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: @K@K�D��Ur�g�q"
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.err

[JNIEnv] 调用: GetStringUTFChars
  参数: A�A��Xq�Ur�d�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: col_delay_times, value: 1
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�b
[*] JSONObject.put called with key: col_delay_ts, value: 0

[JNIEnv] 调用: NewStringUTF
  参数: col_delay_ts
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �b
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 	... 12 more

[JNIEnv] 调用: GetStringUTFChars
  参数: 9�pA� fU�fU�`�
�\�q�,fU�
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: #sis, value: x1WShk1SKKtU7oDd61tKobBJObk=
[*] JSONObject.put called with key: #av, value: 1.0.0

[JNIEnv] 调用: NewStringUTF
  参数: #av
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: com.sytt.tzy.CheckRoot

[JNIEnv] 调用: GetStringUTFChars
  参数: pA� fU�fU�`�
�\�q�,fU�
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�Y�Y�D��Ur�g�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: strRead=null

[JNIEnv] 调用: GetStringUTFChars
  参数: 9���fU��eU�`�
���q�
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �Y�Y�D��Ur�g�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: com.sytt.tzy.CheckRoot

[JNIEnv] 调用: GetStringUTFChars
  参数: ��fU��eU�`�
���q�
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: col_delay_ts, value: 0
[*] JSONObject.put called with key: col_interval, value: 300

[JNIEnv] 调用: NewStringUTF
  参数: col_interval
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�g�g�D��Ur�g�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: to exec su
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: NewStringUTF
  参数: error=2, No such file or directory
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �g�g�D��Ur�g�q
调用栈:
0xda7a98ad libopenjdk.so!0x1d8ad,0xda7a97c5 libopenjdk.so!UNIXProcess_forkAndExec+0x344,0x70e68a29 boot.oat!0xaaa29

[JNIEnv] 调用: GetStringUTFChars
  参数: 9��H�fU��eU�`�
���q�
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: col_interval, value: 300

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�m
[*] JSONObject.put called with key: week_on, value: [1,2,3,4,5,6,7]

[JNIEnv] 调用: NewStringUTF
  参数: week_on
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: com.sytt.tzy.CheckRoot

[JNIEnv] 调用: GetStringUTFChars
  参数: �H�fU��eU�`�
���q�
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �m
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: #av, value: 1.0.0

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xqn
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: Unexpected error - Here is what I know: Cannot run program "su": error=2, No such file or directory

[JNIEnv] 调用: GetStringUTFChars
  参数: �XqHL�HL��Xq�Ur�d�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: n
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.err

[JNIEnv] 调用: GetStringUTFChars
  参数: HL�HL��Xq�Ur�d�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: #vc, value: 1

[JNIEnv] 调用: GetStringUTFChars
  参数: �XqX{X{�D��Ur�g�q
[*] JSONObject.put called with key: #imd, value: 544eeec7333d94a56d0b62e8507ab

[JNIEnv] 调用: NewStringUTF
  参数: #imd
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: java.lang.NullPointerException: Attempt to invoke virtual method 'void java.lang.Process.destroy()' on a null object reference

[JNIEnv] 调用: GetStringUTFChars
  参数: �XqPT�PT��Xq�Ur�d�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: X{X{�D��Ur�g�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.err

[JNIEnv] 调用: GetStringUTFChars
  参数: PT�PT��Xq�Ur�d�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: week_on, value: [1,2,3,4,5,6,7]
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�~
[*] JSONObject.put called with key: hit_sdk, value: uapp

[JNIEnv] 调用: NewStringUTF
  参数: hit_sdk
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 	at com.sytt.tzy.CheckRoot.checkGetRootAuth(CheckRoot.java:87)

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq8W�8W��Xq�Ur�d�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �~
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.err

[JNIEnv] 调用: GetStringUTFChars
  参数: 8W�8W��Xq�Ur�d�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: #imd, value: 544eeec7333d94a56d0b62e8507ab

[JNIEnv] 调用: GetStringUTFChars
  参数: p
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xqp�p��D��Ur�g�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 	at com.sytt.tzy.CheckRoot.isDeviceRooted(CheckRoot.java:34)

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�[��[��Xq�Ur�d�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: p�p��D��Ur�g�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.err

[JNIEnv] 调用: GetStringUTFChars
  参数: �[��[��Xq�Ur�d�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: hit_sdk, value: uapp
[*] JSONObject.put called with key: cfg, value: [{"col_delay_times":"1","col_delay_ts":"0","col_interval":"300","week_on":[1,2,3,4,5,6,7],"hit_sdk":"uapp"}]

[JNIEnv] 调用: NewStringUTF
  参数: cfg
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 	at com.sytt.tzy.UnityPlayerActivity.CheckDevicRooted(UnityPlayerActivity.java:553)

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�^��^��Xq�Ur�d�q
调用栈:
0xda7e2b8f libjavacore.so!0x1bb8f,0x71166d05 boot-core-libart.oat!0x10d05
[JNIEnv] GetStringUTFChars 返回: /proc/cpuinfo

[JNIEnv] 调用: GetStringUTFChars
  参数: 8U�r
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.err

[JNIEnv] 调用: GetStringUTFChars
  参数: �^��^��Xq�Ur�d�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 	at com.unity3d.player.UnityPlayer.nativeRender(Native Method)

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�a��a��Xq�Ur�d�q
调用栈:
0xdc22e867 libicu_jni.so!0x8867,0x72677869 boot-core-icu4j.oat!0x2e869
[JNIEnv] GetStringUTFChars 返回: UTF-8
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�����D��Ur�g�q
[*] JSONObject.put called with key: cpu, value: AArch64 Processor rev 0 (aarch64)Processor	: AArch64 Processor rev 4 (aarch64)

[JNIEnv] 调用: NewStringUTF
  参数: cpu
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.err

[JNIEnv] 调用: GetStringUTFChars
  参数: �a��a��Xq�Ur�d�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �����D��Ur�g�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 	at com.unity3d.player.UnityPlayer.access$300(Unknown Source:0)

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�d��d��Xq�Ur�d�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: cfg, value: [{"col_delay_times":"1","col_delay_ts":"0","col_interval":"300","week_on":[1,2,3,4,5,6,7],"hit_sdk":"uapp"}]
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq@�
[*] JSONObject.put called with key: sdk, value: ["uapp"]

[JNIEnv] 调用: NewStringUTF
  参数: sdk
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.err

[JNIEnv] 调用: GetStringUTFChars
  参数: �d��d��Xq�Ur�d�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 	at com.unity3d.player.UnityPlayer$e$1.handleMessage(Unknown Source:95)

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�g��g��Xq�Ur�d�q

[JNIEnv] 调用: GetStringUTFChars
  参数: `%�
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: @�
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/app_UApm/656436ae58a9eb5b0a11a63e

[JNIEnv] 调用: GetStringUTFChars
  参数: �%�
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: cpu, value: AArch64 Processor rev 0 (aarch64)Processor	: AArch64 Processor rev 4 (aarch64)
[*] JSONObject.put called with key: #mnc, value: 

[JNIEnv] 调用: NewStringUTF
  参数: #mnc
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/app_UApm/656436ae58a9eb5b0a11a63e/ready

[JNIEnv] 调用: GetStringUTFChars
  参数: �%�
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.err

[JNIEnv] 调用: GetStringUTFChars
  参数: �g��g��Xq�Ur�d�q
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/app_UApm/656436ae58a9eb5b0a11a63e/ready

[JNIEnv] 调用: GetStringUTFChars
  参数: �%�
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 	at android.os.Handler.dispatchMessage(Handler.java:102)

[JNIEnv] 调用: GetStringUTFChars
  参数: �XqPj�Pj��Xq�Ur�d�q
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq���D��Ur�g�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.err

[JNIEnv] 调用: GetStringUTFChars
  参数: Pj�Pj��Xq�Ur�d�q
调用栈:
0xda7a2c27 libopenjdk.so!Java_java_io_UnixFileSystem_getBooleanAttributes0+0x22,0x70e65c27 boot.oat!0xa7c27
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/app_UApm/656436ae58a9eb5b0a11a63e/ready

[JNIEnv] 调用: GetStringUTFChars
Error: access violation accessing 0x19
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/app_UApm/656436ae58a9eb5b0a11a63e/ready

[JNIEnv] 调用: GetStringUTFChars
  参数: '�
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: ���D��Ur�g�q
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/app_UApm/656436ae58a9eb5b0a11a63e

[JNIEnv] 调用: GetStringUTFChars
  参数: �'�
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 	at android.os.Looper.loopOnce(Looper.java:201)

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�l��l��Xq�Ur�d�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: sdk, value: ["uapp"]

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xqh�
[*] JSONObject.put called with key: screen_unlock, value: {"cfg":[{"col_delay_times":"1","col_delay_ts":"0","col_interval":"300","week_on":[1,2,3,4,5,6,7],"hit_sdk":"uapp"}],"sdk":["uapp"]}

[JNIEnv] 调用: NewStringUTF
  参数: screen_unlock
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.err

[JNIEnv] 调用: GetStringUTFChars
  参数: �l��l��Xq�Ur�d�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: h�
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 	at android.os.Looper.loop(Looper.java:288)

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�o��o��Xq�Ur�d�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: #mnc, value: 
[*] JSONObject.put called with key: #dt, value: Phone

[JNIEnv] 调用: NewStringUTF
  参数: #dt
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.err

[JNIEnv] 调用: GetStringUTFChars
  参数: �o��o��Xq�Ur�d�q
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/app_UApm/656436ae58a9eb5b0a11a63e/ready

[JNIEnv] 调用: GetStringUTFChars
  参数: �'�
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: 	at com.unity3d.player.UnityPlayer$e.run(Unknown Source:20)

[JNIEnv] 调用: GetStringUTFChars
  参数: 0H�r��fU��fU�`�
�L���(p��p�
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: umlog

[JNIEnv] 调用: GetStringUTFChars
  参数: r��fU��fU�`�
�L���(p��p�
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/app_UApm/656436ae58a9eb5b0a11a63e/ready

[JNIEnv] 调用: GetStringUTFChars
  参数: �'�
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�����D��Ur�g�q 
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: Event: simulator--yes-M2012K11AC-6e79ba413ab4847d1f966397b6b6df18
[*] JSONObject.put called with key: id, value: simulator

[JNIEnv] 调用: NewStringUTF
  参数: id
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �����D��Ur�g�q 
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: screen_unlock, value: {"cfg":[{"col_delay_times":"1","col_delay_ts":"0","col_interval":"300","week_on":[1,2,3,4,5,6,7],"hit_sdk":"uapp"}],"sdk":["uapp"]}

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq@�
[*] JSONObject.put called with key: cc, value: {"col_po":{"cfg":[{"col_delay_times":"1","col_delay_ts":"1","col_interval":"1","week_on":[1,2,3,4,5,6,7],"hit_sdk":"uapp"}],"sdk":["uapp"]},"col_qsc":{"cfg":[{"col_delay_times":"2","hour_on":"0-23","col_interval":"86400","col_delay_ts":"30","hit_sdk":"uapp"}],"sdk":["uapp"]},"screen_on":{"cfg":[{"col_delay_times":"1","col_delay_ts":"0","col_interval":"300","week_on":[1,2,3,4,5,6,7],"hit_sdk":"uapp"}],"sdk":["uapp"]},"col_usc":{"cfg":[{"col_delay_times":"2","hour_on":"0-23","col_interval":"86400","col_delay_ts":"30","hit_sdk":"uapp"}],"sdk":["uapp"]},"screen_off":{"cfg":[{"col_delay_times":"1","col_delay_ts":"0","col_interval":"300","week_on":[1,2,3,4,5,6,7],"hit_sdk":"uapp"}],"sdk":["uapp"]},"umc_cfg":{"cfg":[{"col_delay_times":"2","signature":"bD9jRQ0UE3YLSgo+GUQzDEg2ME5KHQIoRB4QMgxYe196CwJ6dn5mCT0zawUtOgJvPVYSbil6NQt0NHcKNHQWPhRrdB9ABho2HEdKehYQN1A6","act_when":"0","col_delay_ts":"10","col_interval":"60","week_on":[1,2,3,4,5,6,7],"hit_sdk":"uapp","sel_policy":"0"}],"sdk":["uapp"]},"ap_mode":{"cfg":[{"col_delay_times":"3","col_delay_ts":"10","col_interval":"60","week_on":[1,2,3,4,5,6,7],"hit_sdk":"uapp"}],"sdk":["uapp"]},"screen_unlock":{"cfg":[{"col_delay_times":"1","col_delay_ts":"0","col_interval":"300","week_on":[1,2,3,4,5,6,7],"hit_sdk":"uapp"}],"sdk":["uapp"]}}

[JNIEnv] 调用: NewStringUTF
  参数: cc
调用栈:
0xda7a2c27 libopenjdk.so!Java_java_io_UnixFileSystem_getBooleanAttributes0+0x22,0x70e65c27 boot.oat!0xa7c27
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/app_UApm/656436ae58a9eb5b0a11a63e/ready

[JNIEnv] 调用: GetStringUTFChars
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/app_UApm/656436ae58a9eb5b0a11a63e/ready
Error: access violation accessing 0x11
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)

[JNIEnv] 调用: GetStringUTFChars
  参数: �(�
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: @�
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/app_UApm/656436ae58a9eb5b0a11a63e

[JNIEnv] 调用: GetStringUTFChars
  参数: 0)�
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: #dt, value: Phone
[*] JSONObject.put called with key: #pkg, value: com.sytt.tzy

[JNIEnv] 调用: NewStringUTF
  参数: #pkg
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq|�|��D��Ur�g�q
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/app_UApm/656436ae58a9eb5b0a11a63e/upload

[JNIEnv] 调用: GetStringUTFChars
  参数: 0)�
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: |�|��D��Ur�g�q
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/app_UApm/656436ae58a9eb5b0a11a63e/upload

[JNIEnv] 调用: GetStringUTFChars
  参数: 0)�
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: id, value: simulator

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�|��|��D��Ur�g�q�|Wq�D�
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �|��|��D��Ur�g�q�|Wq�D�
调用栈:
0xda7a2c27 libopenjdk.so!Java_java_io_UnixFileSystem_getBooleanAttributes0+0x22,0x70e65c27 boot.oat!0xa7c27
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/app_UApm/656436ae58a9eb5b0a11a63e/upload

[JNIEnv] 调用: GetStringUTFChars
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/app_UApm/656436ae58a9eb5b0a11a63e/upload
Error: access violation accessing 0x15
    at <anonymous> (frida/runtime/core.js:145)
    at onEnter (/Users/cuimingqiang/vscode/frida/game.js:506)
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: ts, value: 1753607988728

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq }� }��D��Ur�g�q���
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数:  }� }��D��Ur�g�q���
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: __t, value: 2049

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq��
[*] JSONObject.put called with key: simulator, value: yes-M2012K11AC-6e79ba413ab4847d1f966397b6b6df18

[JNIEnv] 调用: NewStringUTF
  参数: simulator
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: ��
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: #pkg, value: com.sytt.tzy

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�A�A�D��Ur�g�q
[*] JSONObject.put called with key: #sdt, value: Android

[JNIEnv] 调用: NewStringUTF
  参数: #sdt
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �A�A�D��Ur�g�q
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: cc, value: {"col_po":{"cfg":[{"col_delay_times":"1","col_delay_ts":"1","col_interval":"1","week_on":[1,2,3,4,5,6,7],"hit_sdk":"uapp"}],"sdk":["uapp"]},"col_qsc":{"cfg":[{"col_delay_times":"2","hour_on":"0-23","col_interval":"86400","col_delay_ts":"30","hit_sdk":"uapp"}],"sdk":["uapp"]},"screen_on":{"cfg":[{"col_delay_times":"1","col_delay_ts":"0","col_interval":"300","week_on":[1,2,3,4,5,6,7],"hit_sdk":"uapp"}],"sdk":["uapp"]},"col_usc":{"cfg":[{"col_delay_times":"2","hour_on":"0-23","col_interval":"86400","col_delay_ts":"30","hit_sdk":"uapp"}],"sdk":["uapp"]},"screen_off":{"cfg":[{"col_delay_times":"1","col_delay_ts":"0","col_interval":"300","week_on":[1,2,3,4,5,6,7],"hit_sdk":"uapp"}],"sdk":["uapp"]},"umc_cfg":{"cfg":[{"col_delay_times":"2","signature":"bD9jRQ0UE3YLSgo+GUQzDEg2ME5KHQIoRB4QMgxYe196CwJ6dn5mCT0zawUtOgJvPVYSbil6NQt0NHcKNHQWPhRrdB9ABho2HEdKehYQN1A6","act_when":"0","col_delay_ts":"10","col_interval":"60","week_on":[1,2,3,4,5,6,7],"hit_sdk":"uapp","sel_policy":"0"}],"sdk":["uapp"]},"ap_mode":{"cfg":[{"col_delay_times":"3","col_delay_ts":"10","col_interval":"60","week_on":[1,2,3,4,5,6,7],"hit_sdk":"uapp"}],"sdk":["uapp"]},"screen_unlock":{"cfg":[{"col_delay_times":"1","col_delay_ts":"0","col_interval":"300","week_on":[1,2,3,4,5,6,7],"hit_sdk":"uapp"}],"sdk":["uapp"]}}

[JNIEnv] 调用: GetStringUTFChars
  参数: �XqX��X���D��Ur�g�q
[*] JSONObject.put called with key: code, value: 200

[JNIEnv] 调用: NewStringUTF
  参数: code
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: X��X���D��Ur�g�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: simulator, value: yes-M2012K11AC-6e79ba413ab4847d1f966397b6b6df18

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq��
[*] JSONObject.put called with key: __i, value: 267A00E061645180845BBD7794F3239E

[JNIEnv] 调用: NewStringUTF
  参数: __i
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: ��
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: #sdt, value: Android
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�P�P�D��Ur�g�q
[*] JSONObject.put called with key: #dd, value: 739f0aa330ad82f9

[JNIEnv] 调用: NewStringUTF
  参数: #dd
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �P�P�D��Ur�g�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: code, value: 200
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�������D��Ur�g�q
[*] JSONObject.put called with key: ts, value: 1753077225

[JNIEnv] 调用: NewStringUTF
  参数: ts
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �������D��Ur�g�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: __i, value: 267A00E061645180845BBD7794F3239E

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: #dd, value: 739f0aa330ad82f9

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xqh��h���D��Ur�g�qp��
[*] JSONObject.put called with key: #dm, value: M2012K11AC

[JNIEnv] 调用: NewStringUTF
  参数: #dm
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: h��h���D��Ur�g�qp��
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: ds, value: 0

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�Z�Z�D��Ur�g�q
[*] JSONObject.put called with key: pn, value: com.sytt.tzy

[JNIEnv] 调用: NewStringUTF
  参数: pn
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �Z�Z�D��Ur�g�q
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: ts, value: 1753077225

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259
[*] JSONObject.put called with key: result, value: 1

[JNIEnv] 调用: NewStringUTF
  参数: result
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: 
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: #dm, value: M2012K11AC

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xqؘ�ؘ��D��Ur�g�q
[*] JSONObject.put called with key: #boa, value: alioth

[JNIEnv] 调用: NewStringUTF
  参数: #boa
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: ؘ�ؘ��D��Ur�g�q
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: pn, value: com.sytt.tzy

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�a�a�D��Ur�g�q

[JNIEnv] 调用: GetStringUTFChars
  参数: 0H�h��,fU�fU�`�
�L���H�����
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �a�a�D��Ur�g�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: umlog

[JNIEnv] 调用: GetStringUTFChars
  参数: h��,fU�fU�`�
�L���H�����
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: result, value: 1

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xqpp�D��Ur�g�q
[*] JSONObject.put called with key: config, value: {"cc":{"col_po":{"cfg":[{"col_delay_times":"1","col_delay_ts":"1","col_interval":"1","week_on":[1,2,3,4,5,6,7],"hit_sdk":"uapp"}],"sdk":["uapp"]},"col_qsc":{"cfg":[{"col_delay_times":"2","hour_on":"0-23","col_interval":"86400","col_delay_ts":"30","hit_sdk":"uapp"}],"sdk":["uapp"]},"screen_on":{"cfg":[{"col_delay_times":"1","col_delay_ts":"0","col_interval":"300","week_on":[1,2,3,4,5,6,7],"hit_sdk":"uapp"}],"sdk":["uapp"]},"col_usc":{"cfg":[{"col_delay_times":"2","hour_on":"0-23","col_interval":"86400","col_delay_ts":"30","hit_sdk":"uapp"}],"sdk":["uapp"]},"screen_off":{"cfg":[{"col_delay_times":"1","col_delay_ts":"0","col_interval":"300","week_on":[1,2,3,4,5,6,7],"hit_sdk":"uapp"}],"sdk":["uapp"]},"umc_cfg":{"cfg":[{"col_delay_times":"2","signature":"bD9jRQ0UE3YLSgo+GUQzDEg2ME5KHQIoRB4QMgxYe196CwJ6dn5mCT0zawUtOgJvPVYSbil6NQt0NHcKNHQWPhRrdB9ABho2HEdKehYQN1A6","act_when":"0","col_delay_ts":"10","col_interval":"60","week_on":[1,2,3,4,5,6,7],"hit_sdk":"uapp","sel_policy":"0"}],"sdk":["uapp"]},"ap_mode":{"cfg":[{"col_delay_times":"3","col_delay_ts":"10","col_interval":"60","week_on":[1,2,3,4,5,6,7],"hit_sdk":"uapp"}],"sdk":["uapp"]},"screen_unlock":{"cfg":[{"col_delay_times":"1","col_delay_ts":"0","col_interval":"300","week_on":[1,2,3,4,5,6,7],"hit_sdk":"uapp"}],"sdk":["uapp"]}},"code":200,"ts":1753077225}

[JNIEnv] 调用: NewStringUTF
  参数: config
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: Event: openUI--MessageDialog
[*] JSONObject.put called with key: id, value: openUI

[JNIEnv] 调用: NewStringUTF
  参数: id
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: pp�D��Ur�g�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: #boa, value: alioth
[*] JSONObject.put called with key: #db, value: Redmi

[JNIEnv] 调用: NewStringUTF
  参数: #db
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq0��0���D��Ur�g�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: 0��0���D��Ur�g�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: id, value: openUI

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�����D��Ur�g�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �����D��Ur�g�q
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: config, value: {"cc":{"col_po":{"cfg":[{"col_delay_times":"1","col_delay_ts":"1","col_interval":"1","week_on":[1,2,3,4,5,6,7],"hit_sdk":"uapp"}],"sdk":["uapp"]},"col_qsc":{"cfg":[{"col_delay_times":"2","hour_on":"0-23","col_interval":"86400","col_delay_ts":"30","hit_sdk":"uapp"}],"sdk":["uapp"]},"screen_on":{"cfg":[{"col_delay_times":"1","col_delay_ts":"0","col_interval":"300","week_on":[1,2,3,4,5,6,7],"hit_sdk":"uapp"}],"sdk":["uapp"]},"col_usc":{"cfg":[{"col_delay_times":"2","hour_on":"0-23","col_interval":"86400","col_delay_ts":"30","hit_sdk":"uapp"}],"sdk":["uapp"]},"screen_off":{"cfg":[{"col_delay_times":"1","col_delay_ts":"0","col_interval":"300","week_on":[1,2,3,4,5,6,7],"hit_sdk":"uapp"}],"sdk":["uapp"]},"umc_cfg":{"cfg":[{"col_delay_times":"2","signature":"bD9jRQ0UE3YLSgo+GUQzDEg2ME5KHQIoRB4QMgxYe196CwJ6dn5mCT0zawUtOgJvPVYSbil6NQt0NHcKNHQWPhRrdB9ABho2HEdKehYQN1A6","act_when":"0","col_delay_ts":"10","col_interval":"60","week_on":[1,2,3,4,5,6,7],"hit_sdk":"uapp","sel_policy":"0"}],"sdk":["uapp"]},"ap_mode":{"cfg":[{"col_delay_times":"3","col_delay_ts":"10","col_interval":"60","week_on":[1,2,3,4,5,6,7],"hit_sdk":"uapp"}],"sdk":["uapp"]},"screen_unlock":{"cfg":[{"col_delay_times":"1","col_delay_ts":"0","col_interval":"300","week_on":[1,2,3,4,5,6,7],"hit_sdk":"uapp"}],"sdk":["uapp"]}},"code":200,"ts":1753077225}

[JNIEnv] 调用: GetStringUTFChars
  参数: �XqФ�Ф��D��Ur�g�q�|Wq�D�
[*] JSONObject.put called with key: actionName, value: screen_on

[JNIEnv] 调用: NewStringUTF
  参数: actionName
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: Ф�Ф��D��Ur�g�q�|Wq�D�
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: ts, value: 1753607990784

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq8��8���D��Ur�g�q���
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: 8��8���D��Ur�g�q���
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: __t, value: 2049

[JNIEnv] 调用: GetStringUTFChars
  参数: �XqPP�D��Ur�g�q
[*] JSONObject.put called with key: openUI, value: MessageDialog

[JNIEnv] 调用: NewStringUTF
  参数: openUI
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: PP�D��Ur�g�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: #db, value: Redmi

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq8O8O�D��Ur�g�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: 8O8O�D��Ur�g�q
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: actionName, value: screen_on

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq���D��Ur�g�q�;��D�
[*] JSONObject.put called with key: sdk, value: uapp

[JNIEnv] 调用: NewStringUTF
  参数: sdk
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: NewStringUTF
  参数: android.intent.action.BATTERY_CHANGED
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: ���D��Ur�g�q�;��D�
调用栈:
0xe72ae4c9 libandroid_runtime.so!0xea4c9,0x71fc0b27 boot-framework.oat!0x18cb27
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: #mant, value: 1660631023000

[JNIEnv] 调用: GetStringUTFChars
  参数: �XqX��X���D��Ur�g�q
[*] JSONObject.put called with key: #dmf, value: Xiaomi

[JNIEnv] 调用: NewStringUTF
  参数: #dmf
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: X��X���D��Ur�g�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: openUI, value: MessageDialog

[JNIEnv] 调用: GetStringUTFChars
  参数: �XqhVhV�D��Ur�g�q
[*] JSONObject.put called with key: __i, value: 267A00E061645180845BBD7794F3239E

[JNIEnv] 调用: NewStringUTF
  参数: __i
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: hVhV�D��Ur�g�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: sdk, value: uapp

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq���D��Ur�g�q
[*] JSONObject.put called with key: hit_sdk, value: uapp

[JNIEnv] 调用: NewStringUTF
  参数: hit_sdk
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: ���D��Ur�g�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: #dmf, value: Xiaomi

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xqp��p���D��Ur�g�q
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259
[*] JSONObject.put called with key: #did, value: SKQ1.211006.001

[JNIEnv] 调用: NewStringUTF
  参数: #did
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: p��p���D��Ur�g�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: __i, value: 267A00E061645180845BBD7794F3239E

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq@��@���D��Ur�g�qp��
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: @��@���D��Ur�g�qp��
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: ds, value: 0

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq@]@]�D��Ur�g�q
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259
[*] JSONObject.put called with key: pn, value: com.sytt.tzy

[JNIEnv] 调用: NewStringUTF
  参数: pn
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: @]@]�D��Ur�g�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: hit_sdk, value: uapp

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq''�D��Ur�g�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: ''�D��Ur�g�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: #did, value: SKQ1.211006.001

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�]�]�D��Ur�g�q�]�D�
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259
[*] JSONObject.put called with key: #dn, value: alioth

[JNIEnv] 调用: NewStringUTF
  参数: #dn
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �]�]�D��Ur�g�q�]�D�
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: delay, value: 0

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�������D��Ur�g�q
[*] JSONObject.put called with key: actionName, value: screen_off

[JNIEnv] 调用: NewStringUTF
  参数: actionName
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �������D��Ur�g�q
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: pn, value: com.sytt.tzy

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�1�1�D��Ur�g�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �1�1�D��Ur�g�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: #dn, value: alioth

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xqgg�D��Ur�g�q
[*] JSONObject.put called with key: #ov, value: 12

[JNIEnv] 调用: NewStringUTF
  参数: #ov
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: gg�D��Ur�g�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: actionName, value: screen_off
[*] JSONObject.put called with key: sdk, value: uapp

[JNIEnv] 调用: NewStringUTF
  参数: sdk
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�<�<�D��Ur�g�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �<�<�D��Ur�g�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: #ov, value: 12
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq@n@n�D��Ur�g�q
[*] JSONObject.put called with key: os, value: Android

[JNIEnv] 调用: NewStringUTF
  参数: os
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: @n@n�D��Ur�g�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: sdk, value: uapp

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�G�G�D��Ur�g�q
[*] JSONObject.put called with key: hit_sdk, value: uapp

[JNIEnv] 调用: NewStringUTF
  参数: hit_sdk
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �G�G�D��Ur�g�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: os, value: Android

[JNIEnv] 调用: GetStringUTFChars
  参数: �I
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xquu�D��Ur�g�q
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: android.view.Display
[*] JSONObject.put called with key: #rl, value: 1920*1080

[JNIEnv] 调用: NewStringUTF
  参数: #rl
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: uu�D��Ur�g�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: hit_sdk, value: uapp

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xqhuhu�D��Ur�g�q�]�D�
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: huhu�D��Ur�g�q�]�D�
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: delay, value: 0
[*] JSONObject.put called with key: actionName, value: screen_unlock

[JNIEnv] 调用: NewStringUTF
  参数: actionName
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �XqHYHY�D��Ur�g�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: HYHY�D��Ur�g�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: #rl, value: 1920*1080
[*] JSONObject.put called with key: mc, value: 

[JNIEnv] 调用: NewStringUTF
  参数: mc
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�~�~�D��Ur�g�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �~�~�D��Ur�g�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: actionName, value: screen_unlock
[*] JSONObject.put called with key: sdk, value: uapp

[JNIEnv] 调用: NewStringUTF
  参数: sdk
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq(d(d�D��Ur�g�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: (d(d�D��Ur�g�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: mc, value: 

[JNIEnv] 调用: GetStringUTFChars
  参数: 8	Rq���ph�r
调用栈:
0xe723de83 libandroid_runtime.so!0x79e83,0x71fcdccb boot-framework.oat!0x199ccb
[JNIEnv] GetStringUTFChars 返回: debug.force_rtl

[JNIEnv] 调用: NewStringUTF
  参数: false
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �XqЅЅ�D��Ur�g�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: ЅЅ�D��Ur�g�q
调用栈:
0xe723e443 libandroid_runtime.so!0x7a443,0xe633e5b5 libc.so!_ZN16SystemProperties12ReadCallbackEPK9prop_infoPFvPvPKcS5_jES3_+0xa8,0xe723de97 libandroid_runtime.so!0x79e97,0x71fcdccb boot-framework.oat!0x199ccb
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: sdk, value: uapp

[JNIEnv] 调用: GetStringUTFChars
  参数: �XqPkPk�D��Ur�g�q<�
[*] JSONObject.put called with key: hit_sdk, value: uapp

[JNIEnv] 调用: NewStringUTF
  参数: hit_sdk
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: PkPk�D��Ur�g�q<�
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: #tz, value: 8

[JNIEnv] 调用: GetStringUTFChars
  参数: 8	Rq���ph�r
调用栈:
0xe723de83 libandroid_runtime.so!0x79e83,0x71fcdccb boot-framework.oat!0x199ccb
[JNIEnv] GetStringUTFChars 返回: debug.force_rtl

[JNIEnv] 调用: NewStringUTF
  参数: false
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�����D��Ur�g�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �����D��Ur�g�q
调用栈:
0xe723e443 libandroid_runtime.so!0x7a443,0xe633e5b5 libc.so!_ZN16SystemProperties12ReadCallbackEPK9prop_infoPFvPvPKcS5_jES3_+0xa8,0xe723de97 libandroid_runtime.so!0x79e97,0x71fcdccb boot-framework.oat!0x199ccb
[*] JSONObject.put called with key: #ct, value: CN

[JNIEnv] 调用: NewStringUTF
  参数: #ct
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: hit_sdk, value: uapp

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�����D��Ur�g�q�]�D�
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �����D��Ur�g�q�]�D�
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: delay, value: 0

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq`z`z�D��Ur�g�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: `z`z�D��Ur�g�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: #ct, value: CN
[*] JSONObject.put called with key: #lang, value: zh

[JNIEnv] 调用: NewStringUTF
  参数: #lang
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �XqH�H��D��Ur�g�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: H�H��D��Ur�g�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: #lang, value: zh

[JNIEnv] 调用: GetStringUTFChars
  参数: �|�
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: android.content.Context

[JNIEnv] 调用: GetStringUTFChars
  参数: pOWq
调用栈:
0xda7a9105 libopenjdk.so!Mock_getProperty+0x2c,0x70e653e3 boot.oat!0xa73e3
[JNIEnv] GetStringUTFChars 返回: persist.radio.default.data

[JNIEnv] 调用: NewStringUTF
  参数: 0
调用栈:
0xda7a9141 libopenjdk.so!Mock_getProperty+0x68,0x70e653e3 boot.oat!0xa73e3

[JNIEnv] 调用: GetStringUTFChars
  参数: xWq���p
调用栈:
0xe723de83 libandroid_runtime.so!0x79e83,0x71fcdccb boot-framework.oat!0x199ccb
[JNIEnv] GetStringUTFChars 返回: gsm.operator.alpha

[JNIEnv] 调用: NewStringUTF
  参数: 中国联通,中国联通
调用栈:
0xe723e443 libandroid_runtime.so!0x7a443,0xe633e5b5 libc.so!_ZN16SystemProperties12ReadCallbackEPK9prop_infoPFvPvPKcS5_jES3_+0xa8,0xe723de97 libandroid_runtime.so!0x79e97,0x71fcdccb boot-framework.oat!0x199ccb
[*] JSONObject.put called with key: #car, value: 中国联通

[JNIEnv] 调用: NewStringUTF
  参数: #car
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xqؒؒ�D��Ur�g�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: ؒؒ�D��Ur�g�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: #car, value: 中国联通
[*] JSONObject.put called with key: #disn, value: 神域天堂

[JNIEnv] 调用: NewStringUTF
  参数: #disn
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xqp�p��D��Ur�g�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: p�p��D��Ur�g�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: #disn, value: 神域天堂

[JNIEnv] 调用: GetStringUTFChars
  参数: �|�
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: android.content.Context
[*] JSONObject.put called with key: #ac, value: wifi

[JNIEnv] 调用: NewStringUTF
  参数: #ac
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�����D��Ur�g�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �����D��Ur�g�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: #ac, value: wifi

[JNIEnv] 调用: GetStringUTFChars
  参数:  {�X?OqH\�pX��rXրr {�X?Oq��ǽ�9r\͙qXրrp��X?OqH\�p�}��C0�	(`�X��r@ʀr {�m�r0�uqX��r {�X?OqH\�pp�c�\�c�p�c�\�c�
调用栈:
0xe72b6cfd libandroid_runtime.so!0xf2cfd,0x71fbaac7 boot-framework.oat!0x186ac7
[JNIEnv] GetStringUTFChars 返回: config_os_brand

[JNIEnv] 调用: GetStringUTFChars
  参数: X?OqH\�pX��rXրr {�X?Oq��ǽ�9r\͙qXրrp��X?OqH\�p�}��C0�	(`�X��r@ʀr {�m�r0�uqX��r {�X?OqH\�pp�c�\�c�p�c�\�c�
调用栈:
0xe72b6d1f libandroid_runtime.so!0xf2d1f,0x71fbaac7 boot-framework.oat!0x186ac7
[JNIEnv] GetStringUTFChars 返回: string

[JNIEnv] 调用: GetStringUTFChars
  参数: H\�pX��rXրr {�X?Oq��ǽ�9r\͙qXրrp��X?OqH\�p�}��C0�	(`�X��r@ʀr {�m�r0�uqX��r {�X?OqH\�pp�c�\�c�p�c�\�c�
调用栈:
0xe72b6d59 libandroid_runtime.so!0xf2d59,0x71fbaac7 boot-framework.oat!0x186ac7
[JNIEnv] GetStringUTFChars 返回: android
[*] JSONObject.put called with key: #oos, value: Android

[JNIEnv] 调用: NewStringUTF
  参数: #oos
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�����D��Ur�g�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �����D��Ur�g�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: #oos, value: Android

[JNIEnv] 调用: GetStringUTFChars
  参数: �|�
调用栈:
0xe5342cc5 libart.so!_ZN3artL18Class_classForNameEP7_JNIEnvP7_jclassP8_jstringhP8_jobject+0x30,0x70e68b13 boot.oat!0xaab13
[JNIEnv] GetStringUTFChars 返回: android.content.Context

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�����D��Ur�g�q�<�
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �����D��Ur�g�q�<�
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: #nt, value: 0
[*] JSONObject.put called with key: #cv, value: 9.6.1

[JNIEnv] 调用: NewStringUTF
  参数: #cv
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�����D��Ur�g�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �����D��Ur�g�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: #cv, value: 9.6.1

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�����D��Ur�g�qh=�
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �����D��Ur�g�qh=�
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: #cot, value: 0
[*] JSONObject.put called with key: #mv, value: 1

[JNIEnv] 调用: NewStringUTF
  参数: #mv
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�����D��Ur�g�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �����D��Ur�g�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: #mv, value: 1
[*] JSONObject.put called with key: #mod, value: azioct

[JNIEnv] 调用: NewStringUTF
  参数: #mod
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�����D��Ur�g�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �����D��Ur�g�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: #mod, value: azioct

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq�����D��Ur�g�q�=� 
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: �����D��Ur�g�q�=� 
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: #al, value: 32

[JNIEnv] 调用: GetStringUTFChars
  参数:  F�
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs

[JNIEnv] 调用: GetStringUTFChars
  参数: ��
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/um_session_id.xml.bak

[JNIEnv] 调用: NewStringUTF
  参数: access
调用栈:
0xda7de385 libjavacore.so!0x17385,0x7116659b boot-core-libart.oat!0x1059b

[JNIEnv] 调用: GetStringUTFChars
  参数: (�
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/um_session_id.xml

[JNIEnv] 调用: GetStringUTFChars
  参数: (�
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/um_session_id.xml

[JNIEnv] 调用: GetStringUTFChars
  参数: (�h_�p0Z�p(h�ph�Kq8h�ph�Kqh�Kq����wu�pZ�pPW�PW�(�h�Kq����t������q�MtqPW���r��������t����A�p(�PW�����qP��pPW�����h�h�(��,r�xq
调用栈:
0xda7e8c87 libjavacore.so!0x21c87,0x7116694f boot-core-libart.oat!0x1094f
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/um_session_id.xml

[JNIEnv] 调用: GetStringUTFChars
  参数: (�
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/um_session_id.xml

[JNIEnv] 调用: GetStringUTFChars
  参数: (�
调用栈:
0xda7e2b8f libjavacore.so!0x1bb8f,0x71166d05 boot-core-libart.oat!0x10d05
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/shared_prefs/um_session_id.xml

[JNIEnv] 调用: GetStringUTFChars
  参数: 8U�r�>Z
调用栈:
0xdc22e867 libicu_jni.so!0x8867,0x72677869 boot-core-icu4j.oat!0x2e869
[JNIEnv] GetStringUTFChars 返回: UTF-8
[*] JSONObject.put called with key: #sid, value: e6479cb1-37e0-4cf8-8c30-61949caf55a9

[JNIEnv] 调用: NewStringUTF
  参数: #sid
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq0�0��D��Ur�g�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: 0�0��D��Ur�g�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: #sid, value: e6479cb1-37e0-4cf8-8c30-61949caf55a9
[*] Detected oaid_required_time, modifying value to 0
[*] JSONObject.put called with key: oaid_required_time, value: 10

[JNIEnv] 调用: NewStringUTF
  参数: oaid_required_time
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq���D��Ur�g�qH�X��
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: ���D��Ur�g�qH�X��
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: oaid_required_time, value: 10.0

[JNIEnv] 调用: GetStringUTFChars
  参数: �XqPP�D��Ur�g�qX>�
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: PP�D��Ur�g�qX>�
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: #sre, value: 3

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq���D��Ur�g�q�@�
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: ���D��Ur�g�q�@�
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: #fre, value: 0

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq���D��Ur�g�q�@��
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: ���D��Ur�g�q�@��
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: #ret, value: 202

[JNIEnv] 调用: GetStringUTFChars
  参数: xF�
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/files

[JNIEnv] 调用: GetStringUTFChars
  参数: �
调用栈:
0xda7de35b libjavacore.so!0x1735b,0x7116659b boot-core-libart.oat!0x1059b
[JNIEnv] GetStringUTFChars 返回: /data/user/0/com.sytt.tzy/files/umeng_zcfg_flag
[*] JSONObject.put called with key: zid, value: AZxsmZv_L72t5-P9czGclz66CLefhlydX9JTOpPPIXPmgytGtYGtrpgrJEv2tLdX6SnMH0o8Uwr7HU1R18RGQhR3vmdnLmodlPghl21ZT5bDZd8tsz0=

[JNIEnv] 调用: NewStringUTF
  参数: zid
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �Xq
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: 
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: zid, value: AZxsmZv_L72t5-P9czGclz66CLefhlydX9JTOpPPIXPmgytGtYGtrpgrJEv2tLdX6SnMH0o8Uwr7HU1R18RGQhR3vmdnLmodlPghl21ZT5bDZd8tsz0=
[*] JSONObject.put called with key: #zsv, value: 1.8.0

[JNIEnv] 调用: NewStringUTF
  参数: #zsv
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �XqP/P/�D��Ur�g�q
调用栈:
0xe7240fc5 libandroid_runtime.so!0x7cfc5,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: System.out

[JNIEnv] 调用: GetStringUTFChars
  参数: P/P/�D��Ur�g�q
调用栈:
0xe7240ff1 libandroid_runtime.so!0x7cff1,0x71fc73cf boot-framework.oat!0x1933cf
[JNIEnv] GetStringUTFChars 返回: put name: #zsv, value: 1.8.0
[*] JSONObject.put called with key: #chn, value: Umeng

[JNIEnv] 调用: NewStringUTF
  参数: #chn
调用栈:
0xc311d09c,0xc311cd2d,0xc311cae5,0xc31bd259

[JNIEnv] 调用: GetStringUTFChars
  参数: �XqX:X:�D��Ur�g�q
